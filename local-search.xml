<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>开端</title>
    <link href="/2025/07/20/%E5%BC%80%E7%AB%AF/"/>
    <url>/2025/07/20/%E5%BC%80%E7%AB%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="开端"><a href="#开端" class="headerlink" title="开端"></a>开端</h1><p>这是公众号的第一篇文章，没什么人会看到，就来谈谈我自己。</p><p>我是一个极其自恋的人，同时我又极其的自卑；我时常幻想别人对我的关注，我时常想要别人对我的在意，我所做的一切都是在顺应别人，通过自己的妥协换取别人对我的在意和关注，我成功了，结果是变得自卑。我有着许多自己感到十分尴尬的事情，是处于那个时间、那个心智的我能做出的最蠢的事——是那种让你想起了就会脸红出汗的尴尬事，是痛恨自己对这种事有极好记忆力的丢脸事。我在跟所有人相处时，特别喜欢跟别人谈论自己的事，听到别人聊起他们自己我会感到很无聊，别人说自己看过什么，我会特别喜欢抢掉这个风头，让话题的焦点重新聚集在我身上。</p><p>我又是一个喜欢多想的人，用流行点的话就是比较敏感。我会幻想别人对我的看法，对我的行为的感想，到最后往往闹了乌龙。最频繁的，大概就是幻想别人喜欢自己，这种感觉应该每个人都有体会，我却觉得自己无法抑制。我知道自己长的一般，大众脸五分长相，因此明白这种幻想是完全不切实际的。最后我深陷于喜欢幻想别人喜欢自己，同时反驳这种幻想的纠结状态。不过，人对自己熟悉的事物会越看越顺眼，照惯了镜子，我<del>有时</del>经常会觉得自己长的挺帅，虽然，实际经历告诉我，这种想法是错误的，但他却深植于我的潜意识中，在许多场合让我自我迷失。</p><p>我喜欢放低自己的姿态，降低别人对我的期待值，幻想别人真正见到我时那种远超预期的感觉，这种扮猪吃老虎的简单快感，让我着迷。在网上跟人聊天，我也常常会有这种想法，实际上我也是这样干的，正是这个原因，和那份潜意识中暗暗窃喜自己长得不错的念头结合，成了我对外自贬外貌的动机。</p><p>这篇文章，也是我写出来希望能被其他人看到，以满足自己渴望被人认可的心情，我渴望被人认可，同时这种需求不能通过我的请求来满足，我需要通过自我展现出的所有，不经意被人看见时对我夸赞。一是不能炫耀、卖弄，二来要被人看到，这两者结合起来十分矛盾。被人看到那肯定是你说出来，露出来了，可不展出来，不现出来，哪有人会看到，不被人看到，哪来关注，哪来夸赞？与开篇第一句话反着来，“反正没什么人看到”，其实是希望别人看到的，不然不会写这样长一段文字，不会这样剖析自己，将自己剖肠破肚，五五六六都跟大家展展。</p><p>写下来，又跟上面这段文字呼应上了——我喜欢降低别人的期待，到了别人真正见了我了，相处下来，哎嘿！不是他自个说的那回事，现实好多了，于是，我心里得到极大的满足，暗自庆幸。</p><p>最近，我时常会想起以往的尴尬事。</p><p>我时常标榜自己是一个正常的人，我会伪装自己有着正常的三观，我按照大众的思想来伪装自己的言语，行为。有时偶尔露出些马脚，让旁人窥见我心里一角，事后心里便羞愧难当。用一段深奥些的话来说——“我既憎恶过去的“愚蠢”，又依赖这些记忆构建自我叙事。每一次脸红出汗的回忆，都是对当下人格的无声加固——通过否定过去的“我”，我试图证明此刻的“我”已更趋近理想。但吊诡的是，这种否定反而强化了记忆的鲜活，让自卑的根系愈发深扎。”记得上次坐火车回家，是那种连排座椅，因为不是春运，人并不多，大多都是大学生，我旁边是一个女生，身处理工校区，我已许久没有与女生正常对话，心里不免紧张，看他大学生模样，我趁站起协助她关窗帘时，搭起话来：“你也是大学生吗？”“是的。刚放假。”我看她并无厌恶，便聊起来。“你是哪个学校的？”,“我在郑州。你呢？”“我在青岛——ouc。”，“ouc？什么意思？”,“就是中国海洋大学，你可以搜一搜。”说出这句话，我便感到脸红，很明显我在为自己上一所985大学感到虚荣，甚至自负，不知道哪根筋搭错，我心里不自觉想要让他人为自己感到好厉害，想要甚至渴望听到他人的可能只是为了礼貌对我的夸赞——“985啊，好厉害”。我们的对话到此截至，我心里那层薄膜被自己揭开，露出可怖可恶的自傲。我为自己感到恶心，我想要纠正自己，只能在备忘录中增加一条——不要自负。</p><p>其次，是上次在一次小组展示，需要拍课前准备的照片时。我们需要找到一间空教室，当时临近考试，教室里几乎都有一两人，最后我敲定在上课的原教室里随便拍几张了事。微信发位置，等人，开拍，仅几分钟，突然一声巨大摔门声，将我拉入反悔的思绪。我下意识的忽略了教室里另一位同学的感受，我擅自为那位同学做出决定，我自顾自的做着自己的事情。我并不是这种人，我在许多情况都会问一句，在放学餐厅爆满时，我会问一句空座位旁边的同学有无位置，教学楼门帘我会为后面同学举一会门帘，防止后面同学被砸到。那一声摔门声让我突然意识到，我开始默认决定他人的想法，我开始忽视与人之间的沟通，忽视他人的感受。那是一种我最厌恶的人拥有的品质——不洗澡，抖腿人士。那时我心里抱着侥幸，希望那位同学是像我一般会对这种情况忽视的人，我下意识将自己想法代入。在她摔门后不到两分钟，我们拍完照走了。这件事又在我心里留下一个疙瘩，不痛，时常瘙痒。果然校园墙找到了我，我私信道歉，终无果。于是，我在备忘录上增加一条——不要忽视他人感受。</p><p>还是在一个小组合作中，我们一个三人小组准备合作一个游戏，我不是队长，也并非项目核心。在合作过程，我感觉项目的素材过于低龄（组内另一人买的素材），便擅自在网上找了一份素材，边学边自己做自己分工的那份工作，我的工作是关于战斗的内容（打击效果，闪避，终结技等）。在最后一周时候，我依然在用自己网上找到的素材做内容，而且内容也没比刚学多多少，但我心里那份自傲又开始发作。我觉得自己做的比队长那版素材好很多，到后面，队长问我的那份工作到哪里了？我拿出自己的那版，自觉自豪的展示，其实内容并没做完。“你内容并没做多少啊？！”“你还是做UI吧，战斗我来做！”，这段话无异刺痛了我，狠狠羞辱了我的自傲，我明白自己不过自己自嗨罢了，不按照指挥，又没有特别的工作量，我何以来的骄傲？我在备忘录上又增加一条——不是领导，遵守指挥！</p><p>最后补一个结尾，可能与前文有些不搭。</p><blockquote><p>我宣称自己是“自恋者”，但这种自恋绝非纯粹的优越感，而是被自卑浸透的镜像投射。通过不断迎合他人、制造话题焦点来确认存在感，实则是将自我价值外包给外界评判——他人的目光成了你唯一的度量衡。这种“妥协式自恋”的本质，是恐惧：若无人注视，自我是否仍有意义？于是，自卑成了自恋的寄生体，我越是渴望被认可，越需贬低真实的自己，以维持一个“安全”的假象。</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/02/22/C++%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B/"/>
    <url>/2025/02/22/C++%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="C-核心编程"><a href="#C-核心编程" class="headerlink" title="C++核心编程"></a>C++核心编程</h1><p>本阶段主要针对C++&#x3D;&#x3D;面向对象&#x3D;&#x3D;编程技术做详细讲解，探讨C++中的核心和精髓。</p><h2 id="1-内存分区模型"><a href="#1-内存分区模型" class="headerlink" title="1 内存分区模型"></a>1 内存分区模型</h2><p>C++程序在执行时，将内存大方向划分为<strong>4个区域</strong></p><ul><li>代码区：存放函数体的二进制代码，由操作系统进行管理的</li><li>全局区：存放全局变量和静态变量以及常量</li><li>栈区：由编译器自动分配释放, 存放函数的参数值,局部变量等</li><li>堆区：由程序员分配和释放,若程序员不释放,程序结束时由操作系统回收</li></ul><p><strong>内存四区意义：</strong></p><p>不同区域存放的数据，赋予不同的生命周期, 给我们更大的灵活编程</p><h3 id="1-1-程序运行前"><a href="#1-1-程序运行前" class="headerlink" title="1.1 程序运行前"></a>1.1 程序运行前</h3><pre><code class="hljs">在程序编译后，生成了exe可执行程序，**未执行该程序前**分为两个区域**代码区：**存放 CPU 执行的机器指令代码区是**共享**的，共享的目的是对于频繁被执行的程序，只需要在内存中有一份代码即可代码区是**只读**的，使其只读的原因是防止程序意外地修改了它的指令**全局区：**全局变量和静态变量存放在此.全局区还包含了常量区, 字符串常量和其他常量也存放在此.==该区域的数据在程序结束后由操作系统释放==.</code></pre><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//全局变量</span><br><span class="hljs-type">int</span> g_a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> g_b = <span class="hljs-number">10</span>;<br><br><span class="hljs-comment">//全局常量</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> c_g_a = <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> c_g_b = <span class="hljs-number">10</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//局部变量</span><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">10</span>;<br><br><span class="hljs-comment">//打印地址</span><br>cout &lt;&lt; <span class="hljs-string">&quot;局部变量a地址为： &quot;</span> &lt;&lt; (<span class="hljs-type">int</span>)&amp;a &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;局部变量b地址为： &quot;</span> &lt;&lt; (<span class="hljs-type">int</span>)&amp;b &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;全局变量g_a地址为： &quot;</span> &lt;&lt;  (<span class="hljs-type">int</span>)&amp;g_a &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;全局变量g_b地址为： &quot;</span> &lt;&lt;  (<span class="hljs-type">int</span>)&amp;g_b &lt;&lt; endl;<br><br><span class="hljs-comment">//静态变量</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> s_a = <span class="hljs-number">10</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> s_b = <span class="hljs-number">10</span>;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;静态变量s_a地址为： &quot;</span> &lt;&lt; (<span class="hljs-type">int</span>)&amp;s_a &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;静态变量s_b地址为： &quot;</span> &lt;&lt; (<span class="hljs-type">int</span>)&amp;s_b &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;字符串常量地址为： &quot;</span> &lt;&lt; (<span class="hljs-type">int</span>)&amp;<span class="hljs-string">&quot;hello world&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;字符串常量地址为： &quot;</span> &lt;&lt; (<span class="hljs-type">int</span>)&amp;<span class="hljs-string">&quot;hello world1&quot;</span> &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;全局常量c_g_a地址为： &quot;</span> &lt;&lt; (<span class="hljs-type">int</span>)&amp;c_g_a &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;全局常量c_g_b地址为： &quot;</span> &lt;&lt; (<span class="hljs-type">int</span>)&amp;c_g_b &lt;&lt; endl;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> c_l_a = <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> c_l_b = <span class="hljs-number">10</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;局部常量c_l_a地址为： &quot;</span> &lt;&lt; (<span class="hljs-type">int</span>)&amp;c_l_a &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;局部常量c_l_b地址为： &quot;</span> &lt;&lt; (<span class="hljs-type">int</span>)&amp;c_l_b &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>打印结果：</p><p><img src="/assets/1545017602518.png" alt="1545017602518"></p><p>总结：</p><ul><li>C++中在程序运行前分为全局区和代码区</li><li>代码区特点是共享和只读</li><li>全局区中存放全局变量、静态变量、常量</li><li>常量区中存放 const修饰的全局常量  和 字符串常量</li></ul><h3 id="1-2-程序运行后"><a href="#1-2-程序运行后" class="headerlink" title="1.2 程序运行后"></a>1.2 程序运行后</h3><pre><code class="hljs">**栈区：**由编译器自动分配释放, 存放函数的参数值,局部变量等注意事项：不要返回局部变量的地址，栈区开辟的数据由编译器自动释放</code></pre><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> * <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">return</span> &amp;a;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> *p = <span class="hljs-built_in">func</span>();<br><br>cout &lt;&lt; *p &lt;&lt; endl;<br>cout &lt;&lt; *p &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><pre><code class="hljs">**堆区：**由程序员分配释放,若程序员不释放,程序结束时由操作系统回收在C++中主要利用new在堆区开辟内存</code></pre><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span>* <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span>* a = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">10</span>);<br><span class="hljs-keyword">return</span> a;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> *p = <span class="hljs-built_in">func</span>();<br><br>cout &lt;&lt; *p &lt;&lt; endl;<br>cout &lt;&lt; *p &lt;&lt; endl;<br>  <br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>总结：</strong></p><p>堆区数据由程序员管理开辟和释放</p><p>堆区数据利用new关键字进行开辟内存</p><h3 id="1-3-new操作符"><a href="#1-3-new操作符" class="headerlink" title="1.3 new操作符"></a>1.3 new操作符</h3><pre><code class="hljs">C++中利用==new==操作符在堆区开辟数据堆区开辟的数据，由程序员手动开辟，手动释放，释放利用操作符 ==delete==语法：` new 数据类型`利用new创建的数据，会返回该数据对应的类型的指针</code></pre><p><strong>示例1： 基本语法</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span>* <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span>* a = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">10</span>);<br><span class="hljs-keyword">return</span> a;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> *p = <span class="hljs-built_in">func</span>();<br><br>cout &lt;&lt; *p &lt;&lt; endl;<br>cout &lt;&lt; *p &lt;&lt; endl;<br><br><span class="hljs-comment">//利用delete释放堆区数据</span><br><span class="hljs-keyword">delete</span> p;<br><br><span class="hljs-comment">//cout &lt;&lt; *p &lt;&lt; endl; //报错，释放的空间不可访问</span><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>示例2：开辟数组</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//堆区开辟数组</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span>* arr = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">10</span>];<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br>arr[i] = i + <span class="hljs-number">100</span>;<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br>cout &lt;&lt; arr[i] &lt;&lt; endl;<br>&#125;<br><span class="hljs-comment">//释放数组 delete 后加 []</span><br><span class="hljs-keyword">delete</span>[] arr;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="2-引用"><a href="#2-引用" class="headerlink" title="2 引用"></a>2 引用</h2><h3 id="2-1-引用的基本使用"><a href="#2-1-引用的基本使用" class="headerlink" title="2.1 引用的基本使用"></a>2.1 引用的基本使用</h3><p>**作用： **给变量起别名</p><p><strong>语法：</strong> <code>数据类型 &amp;别名 = 原名</code></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> &amp;b = a;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;<br><br>b = <span class="hljs-number">100</span>;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-引用注意事项"><a href="#2-2-引用注意事项" class="headerlink" title="2.2 引用注意事项"></a>2.2 引用注意事项</h3><ul><li>引用必须初始化</li><li>引用在初始化后，不可以改变</li></ul><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">20</span>;<br><span class="hljs-comment">//int &amp;c; //错误，引用必须初始化</span><br><span class="hljs-type">int</span> &amp;c = a; <span class="hljs-comment">//一旦初始化后，就不可以更改</span><br>c = b; <span class="hljs-comment">//这是赋值操作，不是更改引用</span><br><br>cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3-引用做函数参数"><a href="#2-3-引用做函数参数" class="headerlink" title="2.3 引用做函数参数"></a>2.3 引用做函数参数</h3><p><strong>作用：</strong>函数传参时，可以利用引用的技术让形参修饰实参</p><p><strong>优点：</strong>可以简化指针修改实参</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//1. 值传递</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mySwap01</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br><span class="hljs-type">int</span> temp = a;<br>a = b;<br>b = temp;<br>&#125;<br><br><span class="hljs-comment">//2. 地址传递</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mySwap02</span><span class="hljs-params">(<span class="hljs-type">int</span>* a, <span class="hljs-type">int</span>* b)</span> </span>&#123;<br><span class="hljs-type">int</span> temp = *a;<br>*a = *b;<br>*b = temp;<br>&#125;<br><br><span class="hljs-comment">//3. 引用传递</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mySwap03</span><span class="hljs-params">(<span class="hljs-type">int</span>&amp; a, <span class="hljs-type">int</span>&amp; b)</span> </span>&#123;<br><span class="hljs-type">int</span> temp = a;<br>a = b;<br>b = temp;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">20</span>;<br><br><span class="hljs-built_in">mySwap01</span>(a, b);<br>cout &lt;&lt; <span class="hljs-string">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; <span class="hljs-string">&quot; b:&quot;</span> &lt;&lt; b &lt;&lt; endl;<br><br><span class="hljs-built_in">mySwap02</span>(&amp;a, &amp;b);<br>cout &lt;&lt; <span class="hljs-string">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; <span class="hljs-string">&quot; b:&quot;</span> &lt;&lt; b &lt;&lt; endl;<br><br><span class="hljs-built_in">mySwap03</span>(a, b);<br>cout &lt;&lt; <span class="hljs-string">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; <span class="hljs-string">&quot; b:&quot;</span> &lt;&lt; b &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>总结：通过引用参数产生的效果同按地址传递是一样的。引用的语法更清楚简单</p></blockquote><h3 id="2-4-引用做函数返回值"><a href="#2-4-引用做函数返回值" class="headerlink" title="2.4 引用做函数返回值"></a>2.4 引用做函数返回值</h3><p>作用：引用是可以作为函数的返回值存在的</p><p>注意：<strong>不要返回局部变量引用</strong></p><p>用法：函数调用作为左值</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//返回局部变量引用</span><br><span class="hljs-function"><span class="hljs-type">int</span>&amp; <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>; <span class="hljs-comment">//局部变量</span><br><span class="hljs-keyword">return</span> a;<br>&#125;<br><br><span class="hljs-comment">//返回静态变量引用</span><br><span class="hljs-function"><span class="hljs-type">int</span>&amp; <span class="hljs-title">test02</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> a = <span class="hljs-number">20</span>;<br><span class="hljs-keyword">return</span> a;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//不能返回局部变量的引用</span><br><span class="hljs-type">int</span>&amp; ref = <span class="hljs-built_in">test01</span>();<br>cout &lt;&lt; <span class="hljs-string">&quot;ref = &quot;</span> &lt;&lt; ref &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;ref = &quot;</span> &lt;&lt; ref &lt;&lt; endl;<br><br><span class="hljs-comment">//如果函数做左值，那么必须返回引用</span><br><span class="hljs-type">int</span>&amp; ref2 = <span class="hljs-built_in">test02</span>();<br>cout &lt;&lt; <span class="hljs-string">&quot;ref2 = &quot;</span> &lt;&lt; ref2 &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;ref2 = &quot;</span> &lt;&lt; ref2 &lt;&lt; endl;<br><br><span class="hljs-built_in">test02</span>() = <span class="hljs-number">1000</span>;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;ref2 = &quot;</span> &lt;&lt; ref2 &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;ref2 = &quot;</span> &lt;&lt; ref2 &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-5-引用的本质"><a href="#2-5-引用的本质" class="headerlink" title="2.5 引用的本质"></a>2.5 引用的本质</h3><p>本质：<strong>引用的本质在c++内部实现是一个指针常量.</strong></p><p>讲解示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//发现是引用，转换为 int* const ref = &amp;a;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span>&amp; ref)</span></span>&#123;<br>ref = <span class="hljs-number">100</span>; <span class="hljs-comment">// ref是引用，转换为*ref = 100</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br>  <br>    <span class="hljs-comment">//自动转换为 int* const ref = &amp;a; 指针常量是指针指向不可改，也说明为什么引用不可更改</span><br><span class="hljs-type">int</span>&amp; ref = a; <br>ref = <span class="hljs-number">20</span>; <span class="hljs-comment">//内部发现ref是引用，自动帮我们转换为: *ref = 20;</span><br>  <br>cout &lt;&lt; <span class="hljs-string">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;ref:&quot;</span> &lt;&lt; ref &lt;&lt; endl;<br>  <br><span class="hljs-built_in">func</span>(a);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>结论：C++推荐用引用技术，因为语法方便，引用本质是指针常量，但是所有的指针操作编译器都帮我们做了</p><h3 id="2-6-常量引用"><a href="#2-6-常量引用" class="headerlink" title="2.6 常量引用"></a>2.6 常量引用</h3><p><strong>作用：</strong>常量引用主要用来修饰形参，防止误操作</p><p>在函数形参列表中，可以加&#x3D;&#x3D;const修饰形参&#x3D;&#x3D;，防止形参改变实参</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//引用使用的场景，通常用来修饰形参</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showValue</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span>&amp; v)</span> </span>&#123;<br><span class="hljs-comment">//v += 10;</span><br>cout &lt;&lt; v &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//int&amp; ref = 10;  引用本身需要一个合法的内存空间，因此这行错误</span><br><span class="hljs-comment">//加入const就可以了，编译器优化代码，int temp = 10; const int&amp; ref = temp;</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span>&amp; ref = <span class="hljs-number">10</span>;<br><br><span class="hljs-comment">//ref = 100;  //加入const后不可以修改变量</span><br>cout &lt;&lt; ref &lt;&lt; endl;<br><br><span class="hljs-comment">//函数中利用常量引用防止误操作修改实参</span><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">showValue</span>(a);<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-函数提高"><a href="#3-函数提高" class="headerlink" title="3 函数提高"></a>3 函数提高</h2><h3 id="3-1-函数默认参数"><a href="#3-1-函数默认参数" class="headerlink" title="3.1 函数默认参数"></a>3.1 函数默认参数</h3><p>在C++中，函数的形参列表中的形参是可以有默认值的。</p><p>语法：<code> 返回值类型  函数名 （参数= 默认值）&#123;&#125;</code></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b = <span class="hljs-number">10</span>, <span class="hljs-type">int</span> c = <span class="hljs-number">10</span>)</span> </span>&#123;<br><span class="hljs-keyword">return</span> a + b + c;<br>&#125;<br><br><span class="hljs-comment">//1. 如果某个位置参数有默认值，那么从这个位置往后，从左向右，必须都要有默认值</span><br><span class="hljs-comment">//2. 如果函数声明有默认值，函数实现的时候就不能有默认参数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">func2</span><span class="hljs-params">(<span class="hljs-type">int</span> a = <span class="hljs-number">10</span>, <span class="hljs-type">int</span> b = <span class="hljs-number">10</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">func2</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br><span class="hljs-keyword">return</span> a + b;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;ret = &quot;</span> &lt;&lt; <span class="hljs-built_in">func</span>(<span class="hljs-number">20</span>, <span class="hljs-number">20</span>) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;ret = &quot;</span> &lt;&lt; <span class="hljs-built_in">func</span>(<span class="hljs-number">100</span>) &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-函数占位参数"><a href="#3-2-函数占位参数" class="headerlink" title="3.2 函数占位参数"></a>3.2 函数占位参数</h3><p>C++中函数的形参列表里可以有占位参数，用来做占位，调用函数时必须填补该位置</p><p><strong>语法：</strong> <code>返回值类型 函数名 (数据类型)&#123;&#125;</code></p><p>在现阶段函数的占位参数存在意义不大，但是后面的课程中会用到该技术</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//函数占位参数 ，占位参数也可以有默认参数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span>)</span> </span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;this is func&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">func</span>(<span class="hljs-number">10</span>,<span class="hljs-number">10</span>); <span class="hljs-comment">//占位参数必须填补</span><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-3-函数重载"><a href="#3-3-函数重载" class="headerlink" title="3.3 函数重载"></a>3.3 函数重载</h3><h4 id="3-3-1-函数重载概述"><a href="#3-3-1-函数重载概述" class="headerlink" title="3.3.1 函数重载概述"></a>3.3.1 函数重载概述</h4><p><strong>作用：</strong>函数名可以相同，提高复用性</p><p><strong>函数重载满足条件：</strong></p><ul><li>同一个作用域下</li><li>函数名称相同</li><li>函数参数<strong>类型不同</strong>  或者 <strong>个数不同</strong> 或者 <strong>顺序不同</strong></li></ul><p><strong>注意:</strong>  函数的返回值不可以作为函数重载的条件</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//函数重载需要函数都在同一个作用域下</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;func 的调用！&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;func (int a) 的调用！&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">double</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;func (double a)的调用！&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span> a ,<span class="hljs-type">double</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;func (int a ,double b) 的调用！&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">double</span> a ,<span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;func (double a ,int b)的调用！&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">//函数返回值不可以作为函数重载条件</span><br><span class="hljs-comment">//int func(double a, int b)</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//cout &lt;&lt; &quot;func (double a ,int b)的调用！&quot; &lt;&lt; endl;</span><br><span class="hljs-comment">//&#125;</span><br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">func</span>();<br><span class="hljs-built_in">func</span>(<span class="hljs-number">10</span>);<br><span class="hljs-built_in">func</span>(<span class="hljs-number">3.14</span>);<br><span class="hljs-built_in">func</span>(<span class="hljs-number">10</span>,<span class="hljs-number">3.14</span>);<br><span class="hljs-built_in">func</span>(<span class="hljs-number">3.14</span> , <span class="hljs-number">10</span>);<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-3-2-函数重载注意事项"><a href="#3-3-2-函数重载注意事项" class="headerlink" title="3.3.2 函数重载注意事项"></a>3.3.2 函数重载注意事项</h4><ul><li>引用作为重载条件</li><li>函数重载碰到函数默认参数</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//函数重载注意事项</span><br><span class="hljs-comment">//1、引用作为重载条件</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;a)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;func (int &amp;a) 调用 &quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span> &amp;a)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;func (const int &amp;a) 调用 &quot;</span> &lt;&lt; endl;<br>&#125;<br><br><br><span class="hljs-comment">//2、函数重载碰到函数默认参数</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func2</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b = <span class="hljs-number">10</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;func2(int a, int b = 10) 调用&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func2</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;func2(int a) 调用&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">func</span>(a); <span class="hljs-comment">//调用无const</span><br><span class="hljs-built_in">func</span>(<span class="hljs-number">10</span>);<span class="hljs-comment">//调用有const</span><br><br><br><span class="hljs-comment">//func2(10); //碰到默认参数产生歧义，需要避免</span><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-类和对象"><a href="#4-类和对象" class="headerlink" title="4 类和对象"></a><strong>4</strong> 类和对象</h2><p>C++面向对象的三大特性为：&#x3D;&#x3D;封装、继承、多态&#x3D;&#x3D;</p><p>C++认为&#x3D;&#x3D;万事万物都皆为对象&#x3D;&#x3D;，对象上有其属性和行为</p><p><strong>例如：</strong></p><pre><code class="hljs">人可以作为对象，属性有姓名、年龄、身高、体重...，行为有走、跑、跳、吃饭、唱歌...车也可以作为对象，属性有轮胎、方向盘、车灯...,行为有载人、放音乐、放空调...具有相同性质的==对象==，我们可以抽象称为==类==，人属于人类，车属于车类</code></pre><h3 id="4-1-封装"><a href="#4-1-封装" class="headerlink" title="4.1 封装"></a>4.1 封装</h3><h4 id="4-1-1-封装的意义"><a href="#4-1-1-封装的意义" class="headerlink" title="4.1.1  封装的意义"></a>4.1.1  封装的意义</h4><p>封装是C++面向对象三大特性之一</p><p>封装的意义：</p><ul><li>将属性和行为作为一个整体，表现生活中的事物</li><li>将属性和行为加以权限控制</li></ul><p><strong>封装意义一：</strong></p><pre><code class="hljs">在设计类的时候，属性和行为写在一起，表现事物</code></pre><p><strong>语法：</strong> <code>class 类名&#123;   访问权限： 属性  / 行为  &#125;;</code></p><p><strong>示例1：</strong>设计一个圆类，求圆的周长</p><p><strong>示例代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//圆周率</span><br><span class="hljs-type">const</span> <span class="hljs-type">double</span> PI = <span class="hljs-number">3.14</span>;<br><br><span class="hljs-comment">//1、封装的意义</span><br><span class="hljs-comment">//将属性和行为作为一个整体，用来表现生活中的事物</span><br><br><span class="hljs-comment">//封装一个圆类，求圆的周长</span><br><span class="hljs-comment">//class代表设计一个类，后面跟着的是类名</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span><br>&#123;<br><span class="hljs-keyword">public</span>:  <span class="hljs-comment">//访问权限  公共的权限</span><br><br><span class="hljs-comment">//属性</span><br><span class="hljs-type">int</span> m_r;<span class="hljs-comment">//半径</span><br><br><span class="hljs-comment">//行为</span><br><span class="hljs-comment">//获取到圆的周长</span><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">calculateZC</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//2 * pi  * r</span><br><span class="hljs-comment">//获取圆的周长</span><br><span class="hljs-keyword">return</span>  <span class="hljs-number">2</span> * PI * m_r;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//通过圆类，创建圆的对象</span><br><span class="hljs-comment">// c1就是一个具体的圆</span><br>Circle c1;<br>c1.m_r = <span class="hljs-number">10</span>; <span class="hljs-comment">//给圆对象的半径 进行赋值操作</span><br><br><span class="hljs-comment">//2 * pi * 10 = = 62.8</span><br>cout &lt;&lt; <span class="hljs-string">&quot;圆的周长为： &quot;</span> &lt;&lt; c1.<span class="hljs-built_in">calculateZC</span>() &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>示例2：</strong>设计一个学生类，属性有姓名和学号，可以给姓名和学号赋值，可以显示学生的姓名和学号</p><p><strong>示例2代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//学生类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(string name)</span> </span>&#123;<br>m_name = name;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setID</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> </span>&#123;<br>m_id = id;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showStudent</span><span class="hljs-params">()</span> </span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;name:&quot;</span> &lt;&lt; m_name &lt;&lt; <span class="hljs-string">&quot; ID:&quot;</span> &lt;&lt; m_id &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">public</span>:<br>string m_name;<br><span class="hljs-type">int</span> m_id;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>Student stu;<br>stu.<span class="hljs-built_in">setName</span>(<span class="hljs-string">&quot;德玛西亚&quot;</span>);<br>stu.<span class="hljs-built_in">setID</span>(<span class="hljs-number">250</span>);<br>stu.<span class="hljs-built_in">showStudent</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>封装意义二：</strong></p><p>类在设计时，可以把属性和行为放在不同的权限下，加以控制</p><p>访问权限有三种：</p><ol><li>public        公共权限</li><li>protected 保护权限</li><li>private      私有权限</li></ol><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//三种权限</span><br><span class="hljs-comment">//公共权限  public     类内可以访问  类外可以访问</span><br><span class="hljs-comment">//保护权限  protected  类内可以访问  类外不可以访问</span><br><span class="hljs-comment">//私有权限  private    类内可以访问  类外不可以访问</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span><br>&#123;<br><span class="hljs-comment">//姓名  公共权限</span><br><span class="hljs-keyword">public</span>:<br>string m_Name;<br><br><span class="hljs-comment">//汽车  保护权限</span><br><span class="hljs-keyword">protected</span>:<br>string m_Car;<br><br><span class="hljs-comment">//银行卡密码  私有权限</span><br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> m_Password;<br><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>m_Name = <span class="hljs-string">&quot;张三&quot;</span>;<br>m_Car = <span class="hljs-string">&quot;拖拉机&quot;</span>;<br>m_Password = <span class="hljs-number">123456</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>Person p;<br>p.m_Name = <span class="hljs-string">&quot;李四&quot;</span>;<br><span class="hljs-comment">//p.m_Car = &quot;奔驰&quot;;  //保护权限类外访问不到</span><br><span class="hljs-comment">//p.m_Password = 123; //私有权限类外访问不到</span><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-1-2-struct和class区别"><a href="#4-1-2-struct和class区别" class="headerlink" title="4.1.2 struct和class区别"></a>4.1.2 struct和class区别</h4><p>在C++中 struct和class唯一的<strong>区别</strong>就在于 <strong>默认的访问权限不同</strong></p><p>区别：</p><ul><li>struct 默认权限为公共</li><li>class   默认权限为私有</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">C1</span><br>&#123;<br><span class="hljs-type">int</span>  m_A; <span class="hljs-comment">//默认是私有权限</span><br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">C2</span><br>&#123;<br><span class="hljs-type">int</span> m_A;  <span class="hljs-comment">//默认是公共权限</span><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>C1 c1;<br>c1.m_A = <span class="hljs-number">10</span>; <span class="hljs-comment">//错误，访问权限是私有</span><br><br>C2 c2;<br>c2.m_A = <span class="hljs-number">10</span>; <span class="hljs-comment">//正确，访问权限是公共</span><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-1-3-成员属性设置为私有"><a href="#4-1-3-成员属性设置为私有" class="headerlink" title="4.1.3 成员属性设置为私有"></a>4.1.3 成员属性设置为私有</h4><p><strong>优点1：</strong>将所有成员属性设置为私有，可以自己控制读写权限</p><p><strong>优点2：</strong>对于写权限，我们可以检测数据的有效性</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span>:<br><br><span class="hljs-comment">//姓名设置可读可写</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(string name)</span> </span>&#123;<br>m_Name = name;<br>&#125;<br><span class="hljs-function">string <span class="hljs-title">getName</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> m_Name;<br>&#125;<br><br><br><span class="hljs-comment">//获取年龄 </span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> m_Age;<br>&#125;<br><span class="hljs-comment">//设置年龄</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (age &lt; <span class="hljs-number">0</span> || age &gt; <span class="hljs-number">150</span>) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;你个老妖精!&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>m_Age = age;<br>&#125;<br><br><span class="hljs-comment">//情人设置为只写</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setLover</span><span class="hljs-params">(string lover)</span> </span>&#123;<br>m_Lover = lover;<br>&#125;<br><br><span class="hljs-keyword">private</span>:<br>string m_Name; <span class="hljs-comment">//可读可写  姓名</span><br><br><span class="hljs-type">int</span> m_Age; <span class="hljs-comment">//只读  年龄</span><br><br>string m_Lover; <span class="hljs-comment">//只写  情人</span><br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>Person p;<br><span class="hljs-comment">//姓名设置</span><br>p.<span class="hljs-built_in">setName</span>(<span class="hljs-string">&quot;张三&quot;</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;姓名： &quot;</span> &lt;&lt; p.<span class="hljs-built_in">getName</span>() &lt;&lt; endl;<br><br><span class="hljs-comment">//年龄设置</span><br>p.<span class="hljs-built_in">setAge</span>(<span class="hljs-number">50</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;年龄： &quot;</span> &lt;&lt; p.<span class="hljs-built_in">getAge</span>() &lt;&lt; endl;<br><br><span class="hljs-comment">//情人设置</span><br>p.<span class="hljs-built_in">setLover</span>(<span class="hljs-string">&quot;苍井&quot;</span>);<br><span class="hljs-comment">//cout &lt;&lt; &quot;情人： &quot; &lt;&lt; p.m_Lover &lt;&lt; endl;  //只写属性，不可以读取</span><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习案例1：设计立方体类</strong></p><p>设计立方体类(Cube)</p><p>求出立方体的面积和体积</p><p>分别用全局函数和成员函数判断两个立方体是否相等。</p><p><img src="/assets/1545533548532.png" alt="1545533548532"></p><p><strong>练习案例2：点和圆的关系</strong></p><p>设计一个圆形类（Circle），和一个点类（Point），计算点和圆的关系。</p><p><img src="/assets/1545533829184.png" alt="1545533829184"></p><h3 id="4-2-对象的初始化和清理"><a href="#4-2-对象的初始化和清理" class="headerlink" title="4.2 对象的初始化和清理"></a>4.2 对象的初始化和清理</h3><ul><li>生活中我们买的电子产品都基本会有出厂设置，在某一天我们不用时候也会删除一些自己信息数据保证安全</li><li>C++中的面向对象来源于生活，每个对象也都会有初始设置以及 对象销毁前的清理数据的设置。</li></ul><h4 id="4-2-1-构造函数和析构函数"><a href="#4-2-1-构造函数和析构函数" class="headerlink" title="4.2.1 构造函数和析构函数"></a>4.2.1 构造函数和析构函数</h4><p>对象的<strong>初始化和清理</strong>也是两个非常重要的安全问题</p><pre><code class="hljs">一个对象或者变量没有初始状态，对其使用后果是未知同样的使用完一个对象或变量，没有及时清理，也会造成一定的安全问题</code></pre><p>c++利用了<strong>构造函数</strong>和<strong>析构函数</strong>解决上述问题，这两个函数将会被编译器自动调用，完成对象初始化和清理工作。</p><p>对象的初始化和清理工作是编译器强制要我们做的事情，因此如果<strong>我们不提供构造和析构，编译器会提供</strong></p><p><strong>编译器提供的构造函数和析构函数是空实现。</strong></p><ul><li>构造函数：主要作用在于创建对象时为对象的成员属性赋值，构造函数由编译器自动调用，无须手动调用。</li><li>析构函数：主要作用在于对象<strong>销毁前</strong>系统自动调用，执行一些清理工作。</li></ul><p><strong>构造函数语法：</strong><code>类名()&#123;&#125;</code></p><ol><li>构造函数，没有返回值也不写void</li><li>函数名称与类名相同</li><li>构造函数可以有参数，因此可以发生重载</li><li>程序在调用对象时候会自动调用构造，无须手动调用,而且只会调用一次</li></ol><p><strong>析构函数语法：</strong> <code>~类名()&#123;&#125;</code></p><ol><li>析构函数，没有返回值也不写void</li><li>函数名称与类名相同,在名称前加上符号  ~</li><li>析构函数不可以有参数，因此不可以发生重载</li><li>程序在对象销毁前会自动调用析构，无须手动调用,而且只会调用一次</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//构造函数</span><br><span class="hljs-built_in">Person</span>()<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Person的构造函数调用&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-comment">//析构函数</span><br>~<span class="hljs-built_in">Person</span>()<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Person的析构函数调用&quot;</span> &lt;&lt; endl;<br>&#125;<br><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Person p;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-2-2-构造函数的分类及调用"><a href="#4-2-2-构造函数的分类及调用" class="headerlink" title="4.2.2 构造函数的分类及调用"></a>4.2.2 构造函数的分类及调用</h4><p>两种分类方式：</p><pre><code class="hljs">按参数分为： 有参构造和无参构造按类型分为： 普通构造和拷贝构造</code></pre><p>三种调用方式：</p><pre><code class="hljs">括号法显示法隐式转换法</code></pre><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//1、构造函数分类</span><br><span class="hljs-comment">// 按照参数分类分为 有参和无参构造   无参又称为默认构造函数</span><br><span class="hljs-comment">// 按照类型分类分为 普通构造和拷贝构造</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//无参（默认）构造函数</span><br><span class="hljs-built_in">Person</span>() &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;无参构造函数!&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-comment">//有参构造函数</span><br><span class="hljs-built_in">Person</span>(<span class="hljs-type">int</span> a) &#123;<br>age = a;<br>cout &lt;&lt; <span class="hljs-string">&quot;有参构造函数!&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-comment">//拷贝构造函数</span><br><span class="hljs-built_in">Person</span>(<span class="hljs-type">const</span> Person&amp; p) &#123;<br>age = p.age;<br>cout &lt;&lt; <span class="hljs-string">&quot;拷贝构造函数!&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-comment">//析构函数</span><br>~<span class="hljs-built_in">Person</span>() &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;析构函数!&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> age;<br>&#125;;<br><br><span class="hljs-comment">//2、构造函数的调用</span><br><span class="hljs-comment">//调用无参构造函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br>Person p; <span class="hljs-comment">//调用无参构造函数</span><br>&#125;<br><br><span class="hljs-comment">//调用有参的构造函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//2.1  括号法，常用</span><br><span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<br><span class="hljs-comment">//注意1：调用无参构造函数不能加括号，如果加了编译器认为这是一个函数声明</span><br><span class="hljs-comment">//Person p2();</span><br><br><span class="hljs-comment">//2.2 显式法</span><br>Person p2 = <span class="hljs-built_in">Person</span>(<span class="hljs-number">10</span>); <br>Person p3 = <span class="hljs-built_in">Person</span>(p2);<br><span class="hljs-comment">//Person(10)单独写就是匿名对象  当前行结束之后，马上析构</span><br><br><span class="hljs-comment">//2.3 隐式转换法</span><br>Person p4 = <span class="hljs-number">10</span>; <span class="hljs-comment">// Person p4 = Person(10); </span><br>Person p5 = p4; <span class="hljs-comment">// Person p5 = Person(p4); </span><br><br><span class="hljs-comment">//注意2：不能利用 拷贝构造函数 初始化匿名对象 编译器认为是对象声明</span><br><span class="hljs-comment">//Person p5(p4);</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><span class="hljs-comment">//test02();</span><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-2-3-拷贝构造函数调用时机"><a href="#4-2-3-拷贝构造函数调用时机" class="headerlink" title="4.2.3 拷贝构造函数调用时机"></a>4.2.3 拷贝构造函数调用时机</h4><p>C++中拷贝构造函数调用时机通常有三种情况</p><ul><li>使用一个已经创建完毕的对象来初始化一个新对象</li><li>值传递的方式给函数参数传值</li><li>以值方式返回局部对象</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Person</span>() &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;无参构造函数!&quot;</span> &lt;&lt; endl;<br>mAge = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-built_in">Person</span>(<span class="hljs-type">int</span> age) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;有参构造函数!&quot;</span> &lt;&lt; endl;<br>mAge = age;<br>&#125;<br><span class="hljs-built_in">Person</span>(<span class="hljs-type">const</span> Person&amp; p) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;拷贝构造函数!&quot;</span> &lt;&lt; endl;<br>mAge = p.mAge;<br>&#125;<br><span class="hljs-comment">//析构函数在释放内存之前调用</span><br>~<span class="hljs-built_in">Person</span>() &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;析构函数!&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> mAge;<br>&#125;;<br><br><span class="hljs-comment">//1. 使用一个已经创建完毕的对象来初始化一个新对象</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-function">Person <span class="hljs-title">man</span><span class="hljs-params">(<span class="hljs-number">100</span>)</span></span>; <span class="hljs-comment">//p对象已经创建完毕</span><br><span class="hljs-function">Person <span class="hljs-title">newman</span><span class="hljs-params">(man)</span></span>; <span class="hljs-comment">//调用拷贝构造函数</span><br>Person newman2 = man; <span class="hljs-comment">//拷贝构造</span><br><br><span class="hljs-comment">//Person newman3;</span><br><span class="hljs-comment">//newman3 = man; //不是调用拷贝构造函数，赋值操作</span><br>&#125;<br><br><span class="hljs-comment">//2. 值传递的方式给函数参数传值</span><br><span class="hljs-comment">//相当于Person p1 = p;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">doWork</span><span class="hljs-params">(Person p1)</span> </span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span> </span>&#123;<br>Person p; <span class="hljs-comment">//无参构造函数</span><br><span class="hljs-built_in">doWork</span>(p);<br>&#125;<br><br><span class="hljs-comment">//3. 以值方式返回局部对象</span><br><span class="hljs-function">Person <span class="hljs-title">doWork2</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Person p1;<br>cout &lt;&lt; (<span class="hljs-type">int</span> *)&amp;p1 &lt;&lt; endl;<br><span class="hljs-keyword">return</span> p1;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test03</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Person p = <span class="hljs-built_in">doWork2</span>();<br>cout &lt;&lt; (<span class="hljs-type">int</span> *)&amp;p &lt;&lt; endl;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//test01();</span><br><span class="hljs-comment">//test02();</span><br><span class="hljs-built_in">test03</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-2-4-构造函数调用规则"><a href="#4-2-4-构造函数调用规则" class="headerlink" title="4.2.4 构造函数调用规则"></a>4.2.4 构造函数调用规则</h4><p>默认情况下，c++编译器至少给一个类添加3个函数</p><p>1．默认构造函数(无参，函数体为空)</p><p>2．默认析构函数(无参，函数体为空)</p><p>3．默认拷贝构造函数，对属性进行值拷贝</p><p>构造函数调用规则如下：</p><ul><li>如果用户定义有参构造函数，c++不在提供默认无参构造，但是会提供默认拷贝构造</li><li>如果用户定义拷贝构造函数，c++不会再提供其他构造函数</li></ul><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//无参（默认）构造函数</span><br><span class="hljs-built_in">Person</span>() &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;无参构造函数!&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-comment">//有参构造函数</span><br><span class="hljs-built_in">Person</span>(<span class="hljs-type">int</span> a) &#123;<br>age = a;<br>cout &lt;&lt; <span class="hljs-string">&quot;有参构造函数!&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-comment">//拷贝构造函数</span><br><span class="hljs-built_in">Person</span>(<span class="hljs-type">const</span> Person&amp; p) &#123;<br>age = p.age;<br>cout &lt;&lt; <span class="hljs-string">&quot;拷贝构造函数!&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-comment">//析构函数</span><br>~<span class="hljs-built_in">Person</span>() &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;析构函数!&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> age;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-number">18</span>)</span></span>;<br><span class="hljs-comment">//如果不写拷贝构造，编译器会自动添加拷贝构造，并且做浅拷贝操作</span><br><span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(p1)</span></span>;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;p2的年龄为： &quot;</span> &lt;&lt; p2.age &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//如果用户提供有参构造，编译器不会提供默认构造，会提供拷贝构造</span><br>Person p1; <span class="hljs-comment">//此时如果用户自己没有提供默认构造，会出错</span><br><span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>; <span class="hljs-comment">//用户提供的有参</span><br><span class="hljs-function">Person <span class="hljs-title">p3</span><span class="hljs-params">(p2)</span></span>; <span class="hljs-comment">//此时如果用户没有提供拷贝构造，编译器会提供</span><br><br><span class="hljs-comment">//如果用户提供拷贝构造，编译器不会提供其他构造函数</span><br>Person p4; <span class="hljs-comment">//此时如果用户自己没有提供默认构造，会出错</span><br><span class="hljs-function">Person <span class="hljs-title">p5</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>; <span class="hljs-comment">//此时如果用户自己没有提供有参，会出错</span><br><span class="hljs-function">Person <span class="hljs-title">p6</span><span class="hljs-params">(p5)</span></span>; <span class="hljs-comment">//用户自己提供拷贝构造</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-2-5-深拷贝与浅拷贝"><a href="#4-2-5-深拷贝与浅拷贝" class="headerlink" title="4.2.5 深拷贝与浅拷贝"></a>4.2.5 深拷贝与浅拷贝</h4><p>深浅拷贝是面试经典问题，也是常见的一个坑</p><p>浅拷贝：简单的赋值拷贝操作</p><p>深拷贝：在堆区重新申请空间，进行拷贝操作</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//无参（默认）构造函数</span><br><span class="hljs-built_in">Person</span>() &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;无参构造函数!&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-comment">//有参构造函数</span><br><span class="hljs-built_in">Person</span>(<span class="hljs-type">int</span> age ,<span class="hljs-type">int</span> height) &#123;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;有参构造函数!&quot;</span> &lt;&lt; endl;<br><br>m_age = age;<br>m_height = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(height);<br><br>&#125;<br><span class="hljs-comment">//拷贝构造函数  </span><br><span class="hljs-built_in">Person</span>(<span class="hljs-type">const</span> Person&amp; p) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;拷贝构造函数!&quot;</span> &lt;&lt; endl;<br><span class="hljs-comment">//如果不利用深拷贝在堆区创建新内存，会导致浅拷贝带来的重复释放堆区问题</span><br>m_age = p.m_age;<br>m_height = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(*p.m_height);<br><br>&#125;<br><br><span class="hljs-comment">//析构函数</span><br>~<span class="hljs-built_in">Person</span>() &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;析构函数!&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">if</span> (m_height != <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">delete</span> m_height;<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> m_age;<br><span class="hljs-type">int</span>* m_height;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-number">18</span>, <span class="hljs-number">180</span>)</span></span>;<br><br><span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(p1)</span></span>;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;p1的年龄： &quot;</span> &lt;&lt; p1.m_age &lt;&lt; <span class="hljs-string">&quot; 身高： &quot;</span> &lt;&lt; *p1.m_height &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;p2的年龄： &quot;</span> &lt;&lt; p2.m_age &lt;&lt; <span class="hljs-string">&quot; 身高： &quot;</span> &lt;&lt; *p2.m_height &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结：如果属性有在堆区开辟的，一定要自己提供拷贝构造函数，防止浅拷贝带来的问题</p></blockquote><h4 id="4-2-6-初始化列表"><a href="#4-2-6-初始化列表" class="headerlink" title="4.2.6 初始化列表"></a>4.2.6 初始化列表</h4><p><strong>作用：</strong></p><p>C++提供了初始化列表语法，用来初始化属性</p><p><strong>语法：</strong><code>构造函数()：属性1(值1),属性2（值2）... &#123;&#125;</code></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span>:<br><br><span class="hljs-comment">////传统方式初始化</span><br><span class="hljs-comment">//Person(int a, int b, int c) &#123;</span><br><span class="hljs-comment">//m_A = a;</span><br><span class="hljs-comment">//m_B = b;</span><br><span class="hljs-comment">//m_C = c;</span><br><span class="hljs-comment">//&#125;</span><br><br><span class="hljs-comment">//初始化列表方式初始化</span><br><span class="hljs-built_in">Person</span>(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c) :<span class="hljs-built_in">m_A</span>(a), <span class="hljs-built_in">m_B</span>(b), <span class="hljs-built_in">m_C</span>(c) &#123;&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PrintPerson</span><span class="hljs-params">()</span> </span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;mA:&quot;</span> &lt;&lt; m_A &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;mB:&quot;</span> &lt;&lt; m_B &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;mC:&quot;</span> &lt;&lt; m_C &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> m_A;<br><span class="hljs-type">int</span> m_B;<br><span class="hljs-type">int</span> m_C;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-function">Person <span class="hljs-title">p</span><span class="hljs-params">(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)</span></span>;<br>p.<span class="hljs-built_in">PrintPerson</span>();<br><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-2-7-类对象作为类成员"><a href="#4-2-7-类对象作为类成员" class="headerlink" title="4.2.7 类对象作为类成员"></a>4.2.7 类对象作为类成员</h4><p>C++类中的成员可以是另一个类的对象，我们称该成员为 对象成员</p><p>例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span><br>&#123;<br>    A a；<br>&#125;<br></code></pre></td></tr></table></figure><p>B类中有对象A作为成员，A为对象成员</p><p>那么当创建B对象时，A与B的构造和析构的顺序是谁先谁后？</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Phone</span>(string name)<br>&#123;<br>m_PhoneName = name;<br>cout &lt;&lt; <span class="hljs-string">&quot;Phone构造&quot;</span> &lt;&lt; endl;<br>&#125;<br><br>~<span class="hljs-built_in">Phone</span>()<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Phone析构&quot;</span> &lt;&lt; endl;<br>&#125;<br><br>string m_PhoneName;<br><br>&#125;;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><br><span class="hljs-comment">//初始化列表可以告诉编译器调用哪一个构造函数</span><br><span class="hljs-built_in">Person</span>(string name, string pName) :<span class="hljs-built_in">m_Name</span>(name), <span class="hljs-built_in">m_Phone</span>(pName)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Person构造&quot;</span> &lt;&lt; endl;<br>&#125;<br><br>~<span class="hljs-built_in">Person</span>()<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Person析构&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">playGame</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; m_Name &lt;&lt; <span class="hljs-string">&quot; 使用&quot;</span> &lt;&lt; m_Phone.m_PhoneName &lt;&lt; <span class="hljs-string">&quot; 牌手机! &quot;</span> &lt;&lt; endl;<br>&#125;<br><br>string m_Name;<br>Phone m_Phone;<br><br>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//当类中成员是其他类对象时，我们称该成员为 对象成员</span><br><span class="hljs-comment">//构造的顺序是 ：先调用对象成员的构造，再调用本类构造</span><br><span class="hljs-comment">//析构顺序与构造相反</span><br><span class="hljs-function">Person <span class="hljs-title">p</span><span class="hljs-params">(<span class="hljs-string">&quot;张三&quot;</span> , <span class="hljs-string">&quot;苹果X&quot;</span>)</span></span>;<br>p.<span class="hljs-built_in">playGame</span>();<br><br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-2-8-静态成员"><a href="#4-2-8-静态成员" class="headerlink" title="4.2.8 静态成员"></a>4.2.8 静态成员</h4><p>静态成员就是在成员变量和成员函数前加上关键字static，称为静态成员</p><p>静态成员分为：</p><ul><li>静态成员变量<ul><li>所有对象共享同一份数据</li><li>在编译阶段分配内存</li><li>类内声明，类外初始化</li></ul></li><li>静态成员函数<ul><li>所有对象共享同一个函数</li><li>静态成员函数只能访问静态成员变量</li></ul></li></ul><p><strong>示例1 ：</strong>静态成员变量</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span><br>&#123;<br><br><span class="hljs-keyword">public</span>:<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> m_A; <span class="hljs-comment">//静态成员变量</span><br><br><span class="hljs-comment">//静态成员变量特点：</span><br><span class="hljs-comment">//1 在编译阶段分配内存</span><br><span class="hljs-comment">//2 类内声明，类外初始化</span><br><span class="hljs-comment">//3 所有对象共享同一份数据</span><br><br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> m_B; <span class="hljs-comment">//静态成员变量也是有访问权限的</span><br>&#125;;<br><span class="hljs-type">int</span> Person::m_A = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> Person::m_B = <span class="hljs-number">10</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//静态成员变量两种访问方式</span><br><br><span class="hljs-comment">//1、通过对象</span><br>Person p1;<br>p1.m_A = <span class="hljs-number">100</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;p1.m_A = &quot;</span> &lt;&lt; p1.m_A &lt;&lt; endl;<br><br>Person p2;<br>p2.m_A = <span class="hljs-number">200</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;p1.m_A = &quot;</span> &lt;&lt; p1.m_A &lt;&lt; endl; <span class="hljs-comment">//共享同一份数据</span><br>cout &lt;&lt; <span class="hljs-string">&quot;p2.m_A = &quot;</span> &lt;&lt; p2.m_A &lt;&lt; endl;<br><br><span class="hljs-comment">//2、通过类名</span><br>cout &lt;&lt; <span class="hljs-string">&quot;m_A = &quot;</span> &lt;&lt; Person::m_A &lt;&lt; endl;<br><br><br><span class="hljs-comment">//cout &lt;&lt; &quot;m_B = &quot; &lt;&lt; Person::m_B &lt;&lt; endl; //私有权限访问不到</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>示例2：</strong>静态成员函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span><br>&#123;<br><br><span class="hljs-keyword">public</span>:<br><br><span class="hljs-comment">//静态成员函数特点：</span><br><span class="hljs-comment">//1 程序共享一个函数</span><br><span class="hljs-comment">//2 静态成员函数只能访问静态成员变量</span><br><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;func调用&quot;</span> &lt;&lt; endl;<br>m_A = <span class="hljs-number">100</span>;<br><span class="hljs-comment">//m_B = 100; //错误，不可以访问非静态成员变量</span><br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> m_A; <span class="hljs-comment">//静态成员变量</span><br><span class="hljs-type">int</span> m_B; <span class="hljs-comment">// </span><br><span class="hljs-keyword">private</span>:<br><br><span class="hljs-comment">//静态成员函数也是有访问权限的</span><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">func2</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;func2调用&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><span class="hljs-type">int</span> Person::m_A = <span class="hljs-number">10</span>;<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//静态成员变量两种访问方式</span><br><br><span class="hljs-comment">//1、通过对象</span><br>Person p1;<br>p1.<span class="hljs-built_in">func</span>();<br><br><span class="hljs-comment">//2、通过类名</span><br>Person::<span class="hljs-built_in">func</span>();<br><br><br><span class="hljs-comment">//Person::func2(); //私有权限访问不到</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-3-C-对象模型和this指针"><a href="#4-3-C-对象模型和this指针" class="headerlink" title="4.3 C++对象模型和this指针"></a>4.3 C++对象模型和this指针</h3><h4 id="4-3-1-成员变量和成员函数分开存储"><a href="#4-3-1-成员变量和成员函数分开存储" class="headerlink" title="4.3.1 成员变量和成员函数分开存储"></a>4.3.1 成员变量和成员函数分开存储</h4><p>在C++中，类内的成员变量和成员函数分开存储</p><p>只有非静态成员变量才属于类的对象上</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Person</span>() &#123;<br>mA = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//非静态成员变量占对象空间</span><br><span class="hljs-type">int</span> mA;<br><span class="hljs-comment">//静态成员变量不占对象空间</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> mB; <br><span class="hljs-comment">//函数也不占对象空间，所有函数共享一个函数实例</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span> </span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;mA:&quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;mA &lt;&lt; endl;<br>&#125;<br><span class="hljs-comment">//静态成员函数也不占对象空间</span><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">sfunc</span><span class="hljs-params">()</span> </span>&#123;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>cout &lt;&lt; <span class="hljs-built_in">sizeof</span>(Person) &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-3-2-this指针概念"><a href="#4-3-2-this指针概念" class="headerlink" title="4.3.2 this指针概念"></a>4.3.2 this指针概念</h4><p>通过4.3.1我们知道在C++中成员变量和成员函数是分开存储的</p><p>每一个非静态成员函数只会诞生一份函数实例，也就是说多个同类型的对象会共用一块代码</p><p>那么问题是：这一块代码是如何区分那个对象调用自己的呢？</p><p>c++通过提供特殊的对象指针，this指针，解决上述问题。<strong>this指针指向被调用的成员函数所属的对象</strong></p><p>this指针是隐含每一个非静态成员函数内的一种指针</p><p>this指针不需要定义，直接使用即可</p><p>this指针的用途：</p><ul><li>当形参和成员变量同名时，可用this指针来区分</li><li>在类的非静态成员函数中返回对象本身，可使用return *this</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><br><span class="hljs-built_in">Person</span>(<span class="hljs-type">int</span> age)<br>&#123;<br><span class="hljs-comment">//1、当形参和成员变量同名时，可用this指针来区分</span><br><span class="hljs-keyword">this</span>-&gt;age = age;<br>&#125;<br><br><span class="hljs-function">Person&amp; <span class="hljs-title">PersonAddPerson</span><span class="hljs-params">(Person p)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">this</span>-&gt;age += p.age;<br><span class="hljs-comment">//返回对象本身</span><br><span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br><br><span class="hljs-type">int</span> age;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;p1.age = &quot;</span> &lt;&lt; p1.age &lt;&lt; endl;<br><br><span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<br>p2.<span class="hljs-built_in">PersonAddPerson</span>(p1).<span class="hljs-built_in">PersonAddPerson</span>(p1).<span class="hljs-built_in">PersonAddPerson</span>(p1);<br>cout &lt;&lt; <span class="hljs-string">&quot;p2.age = &quot;</span> &lt;&lt; p2.age &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-3-3-空指针访问成员函数"><a href="#4-3-3-空指针访问成员函数" class="headerlink" title="4.3.3 空指针访问成员函数"></a>4.3.3 空指针访问成员函数</h4><p>C++中空指针也是可以调用成员函数的，但是也要注意有没有用到this指针</p><p>如果用到this指针，需要加以判断保证代码的健壮性</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//空指针访问成员函数</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span>:<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ShowClassName</span><span class="hljs-params">()</span> </span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;我是Person类!&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ShowPerson</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>cout &lt;&lt; mAge &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> mAge;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Person * p = <span class="hljs-literal">NULL</span>;<br>p-&gt;<span class="hljs-built_in">ShowClassName</span>(); <span class="hljs-comment">//空指针，可以调用成员函数</span><br>p-&gt;<span class="hljs-built_in">ShowPerson</span>();  <span class="hljs-comment">//但是如果成员函数中用到了this指针，就不可以了</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-3-4-const修饰成员函数"><a href="#4-3-4-const修饰成员函数" class="headerlink" title="4.3.4 const修饰成员函数"></a>4.3.4 const修饰成员函数</h4><p><strong>常函数：</strong></p><ul><li>成员函数后加const后我们称为这个函数为<strong>常函数</strong></li><li>常函数内不可以修改成员属性</li><li>成员属性声明时加关键字mutable后，在常函数中依然可以修改</li></ul><p><strong>常对象：</strong></p><ul><li>声明对象前加const称该对象为常对象</li><li>常对象只能调用常函数</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Person</span>() &#123;<br>m_A = <span class="hljs-number">0</span>;<br>m_B = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//this指针的本质是一个指针常量，指针的指向不可修改</span><br><span class="hljs-comment">//如果想让指针指向的值也不可以修改，需要声明常函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ShowPerson</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br><span class="hljs-comment">//const Type* const pointer;</span><br><span class="hljs-comment">//this = NULL; //不能修改指针的指向 Person* const this;</span><br><span class="hljs-comment">//this-&gt;mA = 100; //但是this指针指向的对象的数据是可以修改的</span><br><br><span class="hljs-comment">//const修饰成员函数，表示指针指向的内存空间的数据不能修改，除了mutable修饰的变量</span><br><span class="hljs-keyword">this</span>-&gt;m_B = <span class="hljs-number">100</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">MyFunc</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br><span class="hljs-comment">//mA = 10000;</span><br>&#125;<br><br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> m_A;<br><span class="hljs-keyword">mutable</span> <span class="hljs-type">int</span> m_B; <span class="hljs-comment">//可修改 可变的</span><br>&#125;;<br><br><br><span class="hljs-comment">//const修饰对象  常对象</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">const</span> Person person; <span class="hljs-comment">//常量对象  </span><br>cout &lt;&lt; person.m_A &lt;&lt; endl;<br><span class="hljs-comment">//person.mA = 100; //常对象不能修改成员变量的值,但是可以访问</span><br>person.m_B = <span class="hljs-number">100</span>; <span class="hljs-comment">//但是常对象可以修改mutable修饰成员变量</span><br><br><span class="hljs-comment">//常对象访问成员函数</span><br>person.<span class="hljs-built_in">MyFunc</span>(); <span class="hljs-comment">//常对象不能调用const的函数</span><br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-4-友元"><a href="#4-4-友元" class="headerlink" title="4.4 友元"></a>4.4 友元</h3><p>生活中你的家有客厅(Public)，有你的卧室(Private)</p><p>客厅所有来的客人都可以进去，但是你的卧室是私有的，也就是说只有你能进去</p><p>但是呢，你也可以允许你的好闺蜜好基友进去。</p><p>在程序里，有些私有属性 也想让类外特殊的一些函数或者类进行访问，就需要用到友元的技术</p><p>友元的目的就是让一个函数或者类 访问另一个类中私有成员</p><p>友元的关键字为  &#x3D;&#x3D;friend&#x3D;&#x3D;</p><p>友元的三种实现</p><ul><li>全局函数做友元</li><li>类做友元</li><li>成员函数做友元</li></ul><h4 id="4-4-1-全局函数做友元"><a href="#4-4-1-全局函数做友元" class="headerlink" title="4.4.1 全局函数做友元"></a>4.4.1 全局函数做友元</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Building</span><br>&#123;<br><span class="hljs-comment">//告诉编译器 goodGay全局函数 是 Building类的好朋友，可以访问类中的私有内容</span><br><span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-type">void</span> <span class="hljs-title">goodGay</span><span class="hljs-params">(Building * building)</span></span>;<br><br><span class="hljs-keyword">public</span>:<br><br><span class="hljs-built_in">Building</span>()<br>&#123;<br><span class="hljs-keyword">this</span>-&gt;m_SittingRoom = <span class="hljs-string">&quot;客厅&quot;</span>;<br><span class="hljs-keyword">this</span>-&gt;m_BedRoom = <span class="hljs-string">&quot;卧室&quot;</span>;<br>&#125;<br><br><br><span class="hljs-keyword">public</span>:<br>string m_SittingRoom; <span class="hljs-comment">//客厅</span><br><br><span class="hljs-keyword">private</span>:<br>string m_BedRoom; <span class="hljs-comment">//卧室</span><br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">goodGay</span><span class="hljs-params">(Building * building)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;好基友正在访问： &quot;</span> &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;好基友正在访问： &quot;</span> &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Building b;<br><span class="hljs-built_in">goodGay</span>(&amp;b);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-4-2-类做友元"><a href="#4-4-2-类做友元" class="headerlink" title="4.4.2 类做友元"></a>4.4.2 类做友元</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Building</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">goodGay</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><br><span class="hljs-built_in">goodGay</span>();<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">visit</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-keyword">private</span>:<br>Building *building;<br>&#125;;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Building</span><br>&#123;<br><span class="hljs-comment">//告诉编译器 goodGay类是Building类的好朋友，可以访问到Building类中私有内容</span><br><span class="hljs-keyword">friend</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">goodGay</span>;<br><br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Building</span>();<br><br><span class="hljs-keyword">public</span>:<br>string m_SittingRoom; <span class="hljs-comment">//客厅</span><br><span class="hljs-keyword">private</span>:<br>string m_BedRoom;<span class="hljs-comment">//卧室</span><br>&#125;;<br><br>Building::<span class="hljs-built_in">Building</span>()<br>&#123;<br><span class="hljs-keyword">this</span>-&gt;m_SittingRoom = <span class="hljs-string">&quot;客厅&quot;</span>;<br><span class="hljs-keyword">this</span>-&gt;m_BedRoom = <span class="hljs-string">&quot;卧室&quot;</span>;<br>&#125;<br><br>goodGay::<span class="hljs-built_in">goodGay</span>()<br>&#123;<br>building = <span class="hljs-keyword">new</span> Building;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">goodGay::visit</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>goodGay gg;<br>gg.<span class="hljs-built_in">visit</span>();<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-4-3-成员函数做友元"><a href="#4-4-3-成员函数做友元" class="headerlink" title="4.4.3 成员函数做友元"></a>4.4.3 成员函数做友元</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs C++"><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Building</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">goodGay</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><br><span class="hljs-built_in">goodGay</span>();<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">visit</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//只让visit函数作为Building的好朋友，可以发访问Building中私有内容</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">visit2</span><span class="hljs-params">()</span></span>; <br><br><span class="hljs-keyword">private</span>:<br>Building *building;<br>&#125;;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Building</span><br>&#123;<br><span class="hljs-comment">//告诉编译器  goodGay类中的visit成员函数 是Building好朋友，可以访问私有内容</span><br><span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-type">void</span> <span class="hljs-title">goodGay::visit</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Building</span>();<br><br><span class="hljs-keyword">public</span>:<br>string m_SittingRoom; <span class="hljs-comment">//客厅</span><br><span class="hljs-keyword">private</span>:<br>string m_BedRoom;<span class="hljs-comment">//卧室</span><br>&#125;;<br><br>Building::<span class="hljs-built_in">Building</span>()<br>&#123;<br><span class="hljs-keyword">this</span>-&gt;m_SittingRoom = <span class="hljs-string">&quot;客厅&quot;</span>;<br><span class="hljs-keyword">this</span>-&gt;m_BedRoom = <span class="hljs-string">&quot;卧室&quot;</span>;<br>&#125;<br><br>goodGay::<span class="hljs-built_in">goodGay</span>()<br>&#123;<br>building = <span class="hljs-keyword">new</span> Building;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">goodGay::visit</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">goodGay::visit2</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;<br><span class="hljs-comment">//cout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>goodGay  gg;<br>gg.<span class="hljs-built_in">visit</span>();<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>  <br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-5-运算符重载"><a href="#4-5-运算符重载" class="headerlink" title="4.5 运算符重载"></a>4.5 运算符重载</h3><p>运算符重载概念：对已有的运算符重新进行定义，赋予其另一种功能，以适应不同的数据类型</p><p>运算符重载的分类</p><ol><li>重载为成员函数</li></ol><blockquote><p><code>oprd1 U oprd2;</code>重载把U重载为<code>oprd1</code>所属类的函数，调用时相当于<code>oprd1.operator U(oprd2);</code>因此形参类型为<code>oprd2</code>所属类型</p><p><code>U oprd;</code>重载为<code>oprd</code>所属类的函数，调用时相当于<code>oprd.operator U();</code>无形参</p><p><code>oprd U;</code>重载为<code>oprd</code>所属类的函数，调用时相当于<code>oprd.operator U();</code>要有一个<code>int</code>形参（该形参无形参名，只是为了区分前置和后置区别）</p></blockquote><ol start="2"><li>重载为非成员函数</li></ol><p>如果要访问类内私有变量，可以将操作符重载函数声明为类的友元</p><blockquote><p><code>oprd1 U oprd2;</code>重载为非成员函数，相当于调用<code>operator U(oprd1. oprd2);</code>因此形参有两个，类型分别是<code>oprd1，oprd2</code>所属类</p><p><code>U oprd;</code> 调用时相当于调用<code>operator U(oprd);</code>形参类型为<code>oprd</code>所属类型。</p><p><code>oprd U;</code>调用时相当于<code>operator U(oprd);</code>形参类型为<code>oprd</code>所属类型，但是要有一个<code>int</code>形参，功能同上</p></blockquote><p>运算符重载的区别</p><p>一般来说，重载为成员函数要更方便，但是有不得不重载为非成员函数的情况。</p><blockquote><ol><li>重载的操作符第一个操作数不是可以更改的类型，如“&lt;&lt;”操作符第一个操作数为ostream类型，无法向其中添加成员函数</li><li>非成员函数重载支持更灵活的类型转换</li></ol></blockquote><h4 id="4-5-1-加号运算符重载"><a href="#4-5-1-加号运算符重载" class="headerlink" title="4.5.1 加号运算符重载"></a>4.5.1 加号运算符重载</h4><p>作用：实现两个自定义数据类型相加的运算</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Person</span>() &#123;&#125;;<br><span class="hljs-built_in">Person</span>(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)<br>&#123;<br><span class="hljs-keyword">this</span>-&gt;m_A = a;<br><span class="hljs-keyword">this</span>-&gt;m_B = b;<br>&#125;<br><span class="hljs-comment">//成员函数实现 + 号运算符重载</span><br>Person <span class="hljs-keyword">operator</span>+(<span class="hljs-type">const</span> Person&amp; p) &#123;<br>Person temp;<br>temp.m_A = <span class="hljs-keyword">this</span>-&gt;m_A + p.m_A;<br>temp.m_B = <span class="hljs-keyword">this</span>-&gt;m_B + p.m_B;<br><span class="hljs-keyword">return</span> temp;<br>&#125;<br><br><br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> m_A;<br><span class="hljs-type">int</span> m_B;<br>&#125;;<br><br><span class="hljs-comment">//全局函数实现 + 号运算符重载</span><br><span class="hljs-comment">//Person operator+(const Person&amp; p1, const Person&amp; p2) &#123;</span><br><span class="hljs-comment">//Person temp(0, 0);</span><br><span class="hljs-comment">//temp.m_A = p1.m_A + p2.m_A;</span><br><span class="hljs-comment">//temp.m_B = p1.m_B + p2.m_B;</span><br><span class="hljs-comment">//return temp;</span><br><span class="hljs-comment">//&#125;</span><br><br><span class="hljs-comment">//运算符重载 可以发生函数重载 </span><br>Person <span class="hljs-keyword">operator</span>+(<span class="hljs-type">const</span> Person&amp; p2, <span class="hljs-type">int</span> val)  <br>&#123;<br>Person temp;<br>temp.m_A = p2.m_A + val;<br>temp.m_B = p2.m_B + val;<br><span class="hljs-keyword">return</span> temp;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-number">20</span>, <span class="hljs-number">20</span>)</span></span>;<br><br><span class="hljs-comment">//成员函数方式</span><br>Person p3 = p2 + p1;  <span class="hljs-comment">//相当于 p2.operaor+(p1)</span><br>cout &lt;&lt; <span class="hljs-string">&quot;mA:&quot;</span> &lt;&lt; p3.m_A &lt;&lt; <span class="hljs-string">&quot; mB:&quot;</span> &lt;&lt; p3.m_B &lt;&lt; endl;<br><br><br>Person p4 = p3 + <span class="hljs-number">10</span>; <span class="hljs-comment">//相当于 operator+(p3,10)</span><br>cout &lt;&lt; <span class="hljs-string">&quot;mA:&quot;</span> &lt;&lt; p4.m_A &lt;&lt; <span class="hljs-string">&quot; mB:&quot;</span> &lt;&lt; p4.m_B &lt;&lt; endl;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结1：对于内置的数据类型的表达式的的运算符是不可能改变的</p></blockquote><blockquote><p>总结2：不要滥用运算符重载</p></blockquote><h4 id="4-5-2-左移运算符重载"><a href="#4-5-2-左移运算符重载" class="headerlink" title="4.5.2 左移运算符重载"></a>4.5.2 左移运算符重载</h4><p>作用：可以输出自定义数据类型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">friend</span> ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(ostream&amp; out, Person&amp; p);<br><br><span class="hljs-keyword">public</span>:<br><br><span class="hljs-built_in">Person</span>(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)<br>&#123;<br><span class="hljs-keyword">this</span>-&gt;m_A = a;<br><span class="hljs-keyword">this</span>-&gt;m_B = b;<br>&#125;<br><br><span class="hljs-comment">//成员函数 实现不了  p &lt;&lt; cout 不是我们想要的效果</span><br><span class="hljs-comment">//void operator&lt;&lt;(Person&amp; p)&#123;</span><br><span class="hljs-comment">//&#125;</span><br><br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> m_A;<br><span class="hljs-type">int</span> m_B;<br>&#125;;<br><br><span class="hljs-comment">//全局函数实现左移重载</span><br><span class="hljs-comment">//ostream对象只能有一个</span><br>ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(ostream&amp; out, Person&amp; p) &#123;<br>out &lt;&lt; <span class="hljs-string">&quot;a:&quot;</span> &lt;&lt; p.m_A &lt;&lt; <span class="hljs-string">&quot; b:&quot;</span> &lt;&lt; p.m_B;<br><span class="hljs-keyword">return</span> out;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>)</span></span>;<br><br>cout &lt;&lt; p1 &lt;&lt; <span class="hljs-string">&quot;hello world&quot;</span> &lt;&lt; endl; <span class="hljs-comment">//链式编程</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结：重载左移运算符配合友元可以实现输出自定义数据类型</p></blockquote><h4 id="4-5-3-递增运算符重载"><a href="#4-5-3-递增运算符重载" class="headerlink" title="4.5.3 递增运算符重载"></a>4.5.3 递增运算符重载</h4><p>作用： 通过重载递增运算符，实现自己的整型数据</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs C++"><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyInteger</span> &#123;<br><br><span class="hljs-keyword">friend</span> ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(ostream&amp; out, MyInteger myint);<br><br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">MyInteger</span>() &#123;<br>m_Num = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//前置++</span><br>MyInteger&amp; <span class="hljs-keyword">operator</span>++() &#123;<br><span class="hljs-comment">//先++</span><br>m_Num++;<br><span class="hljs-comment">//再返回</span><br><span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br><br><span class="hljs-comment">//后置++</span><br>MyInteger <span class="hljs-keyword">operator</span>++(<span class="hljs-type">int</span>) &#123;<br><span class="hljs-comment">//先返回</span><br>MyInteger temp = *<span class="hljs-keyword">this</span>; <span class="hljs-comment">//记录当前本身的值，然后让本身的值加1，但是返回的是以前的值，达到先返回后++；</span><br>m_Num++;<br><span class="hljs-keyword">return</span> temp;<br>&#125;<br><br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> m_Num;<br>&#125;;<br><br><br>ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt;(ostream&amp; out, MyInteger myint) &#123;<br>out &lt;&lt; myint.m_Num;<br><span class="hljs-keyword">return</span> out;<br>&#125;<br><br><br><span class="hljs-comment">//前置++ 先++ 再返回</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br>MyInteger myInt;<br>cout &lt;&lt; ++myInt &lt;&lt; endl;<br>cout &lt;&lt; myInt &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">//后置++ 先返回 再++</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span> </span>&#123;<br><br>MyInteger myInt;<br>cout &lt;&lt; myInt++ &lt;&lt; endl;<br>cout &lt;&lt; myInt &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><span class="hljs-comment">//test02();</span><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结： 前置递增返回引用，后置递增返回值</p></blockquote><h4 id="4-5-4-赋值运算符重载"><a href="#4-5-4-赋值运算符重载" class="headerlink" title="4.5.4 赋值运算符重载"></a>4.5.4 赋值运算符重载</h4><p>c++编译器至少给一个类添加4个函数</p><ol><li>默认构造函数(无参，函数体为空)</li><li>默认析构函数(无参，函数体为空)</li><li>默认拷贝构造函数，对属性进行值拷贝</li><li>赋值运算符 operator&#x3D;, 对属性进行值拷贝</li></ol><p>如果类中有属性指向堆区，做赋值操作时也会出现深浅拷贝问题</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><br><span class="hljs-built_in">Person</span>(<span class="hljs-type">int</span> age)<br>&#123;<br><span class="hljs-comment">//将年龄数据开辟到堆区</span><br>m_Age = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(age);<br>&#125;<br><br><span class="hljs-comment">//重载赋值运算符 </span><br>Person&amp; <span class="hljs-keyword">operator</span>=(Person &amp;p)<br>&#123;<br><span class="hljs-keyword">if</span> (m_Age != <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">delete</span> m_Age;<br>m_Age = <span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-comment">//编译器提供的代码是浅拷贝</span><br><span class="hljs-comment">//m_Age = p.m_Age;</span><br><br><span class="hljs-comment">//提供深拷贝 解决浅拷贝的问题</span><br>m_Age = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(*p.m_Age);<br><br><span class="hljs-comment">//返回自身</span><br><span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br><br><br>~<span class="hljs-built_in">Person</span>()<br>&#123;<br><span class="hljs-keyword">if</span> (m_Age != <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">delete</span> m_Age;<br>m_Age = <span class="hljs-literal">NULL</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//年龄的指针</span><br><span class="hljs-type">int</span> *m_Age;<br><br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-number">18</span>)</span></span>;<br><br><span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-number">20</span>)</span></span>;<br><br><span class="hljs-function">Person <span class="hljs-title">p3</span><span class="hljs-params">(<span class="hljs-number">30</span>)</span></span>;<br><br>p3 = p2 = p1; <span class="hljs-comment">//赋值操作</span><br><br>cout &lt;&lt; <span class="hljs-string">&quot;p1的年龄为：&quot;</span> &lt;&lt; *p1.m_Age &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;p2的年龄为：&quot;</span> &lt;&lt; *p2.m_Age &lt;&lt; endl;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;p3的年龄为：&quot;</span> &lt;&lt; *p3.m_Age &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-comment">//int a = 10;</span><br><span class="hljs-comment">//int b = 20;</span><br><span class="hljs-comment">//int c = 30;</span><br><br><span class="hljs-comment">//c = b = a;</span><br><span class="hljs-comment">//cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;</span><br><span class="hljs-comment">//cout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl;</span><br><span class="hljs-comment">//cout &lt;&lt; &quot;c = &quot; &lt;&lt; c &lt;&lt; endl;</span><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-5-5-关系运算符重载"><a href="#4-5-5-关系运算符重载" class="headerlink" title="4.5.5 关系运算符重载"></a>4.5.5 关系运算符重载</h4><p><strong>作用：</strong>重载关系运算符，可以让两个自定义类型对象进行对比操作</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Person</span>(string name, <span class="hljs-type">int</span> age)<br>&#123;<br><span class="hljs-keyword">this</span>-&gt;m_Name = name;<br><span class="hljs-keyword">this</span>-&gt;m_Age = age;<br>&#125;;<br><br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>==(Person &amp; p)<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;m_Name == p.m_Name &amp;&amp; <span class="hljs-keyword">this</span>-&gt;m_Age == p.m_Age)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>!=(Person &amp; p)<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;m_Name == p.m_Name &amp;&amp; <span class="hljs-keyword">this</span>-&gt;m_Age == p.m_Age)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><br>string m_Name;<br><span class="hljs-type">int</span> m_Age;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//int a = 0;</span><br><span class="hljs-comment">//int b = 0;</span><br><br><span class="hljs-function">Person <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-string">&quot;孙悟空&quot;</span>, <span class="hljs-number">18</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">b</span><span class="hljs-params">(<span class="hljs-string">&quot;孙悟空&quot;</span>, <span class="hljs-number">18</span>)</span></span>;<br><br><span class="hljs-keyword">if</span> (a == b)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;a和b相等&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;a和b不相等&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-keyword">if</span> (a != b)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;a和b不相等&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;a和b相等&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-5-6-函数调用运算符重载"><a href="#4-5-6-函数调用运算符重载" class="headerlink" title="4.5.6 函数调用运算符重载"></a>4.5.6 函数调用运算符重载</h4><ul><li>函数调用运算符 ()  也可以重载</li><li>由于重载后使用的方式非常像函数的调用，因此称为仿函数</li><li>仿函数没有固定写法，非常灵活</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyPrint</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(string text)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; text &lt;&lt; endl;<br>&#125;<br><br>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//重载的（）操作符 也称为仿函数</span><br>MyPrint myFunc;<br><span class="hljs-built_in">myFunc</span>(<span class="hljs-string">&quot;hello world&quot;</span>);<br>&#125;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAdd</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> v1, <span class="hljs-type">int</span> v2)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> v1 + v2;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>MyAdd add;<br><span class="hljs-type">int</span> ret = <span class="hljs-built_in">add</span>(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;ret = &quot;</span> &lt;&lt; ret &lt;&lt; endl;<br><br><span class="hljs-comment">//匿名对象调用  </span><br>cout &lt;&lt; <span class="hljs-string">&quot;MyAdd()(100,100) = &quot;</span> &lt;&lt; <span class="hljs-built_in">MyAdd</span>()(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>) &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><span class="hljs-built_in">test02</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-6-继承"><a href="#4-6-继承" class="headerlink" title="4.6  继承"></a>4.6  继承</h3><p><strong>继承是面向对象三大特性之一</strong></p><p>有些类与类之间存在特殊的关系，例如下图中：</p><p><img src="/assets/1544861202252.png" alt="1544861202252"></p><p>我们发现，定义这些类时，下级别的成员除了拥有上一级的共性，还有自己的特性。</p><p>这个时候我们就可以考虑利用继承的技术，减少重复代码</p><h4 id="4-6-1-继承的基本语法"><a href="#4-6-1-继承的基本语法" class="headerlink" title="4.6.1 继承的基本语法"></a>4.6.1 继承的基本语法</h4><p>例如我们看到很多网站中，都有公共的头部，公共的底部，甚至公共的左侧列表，只有中心内容不同</p><p>接下来我们分别利用普通写法和继承的写法来实现网页中的内容，看一下继承存在的意义以及好处</p><p><strong>普通实现：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//Java页面</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Java</span> <br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">header</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;首页、公开课、登录、注册...（公共头部）&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">footer</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;帮助中心、交流合作、站内地图...(公共底部)&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">left</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Java,Python,C++...(公共分类列表)&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">content</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;JAVA学科视频&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><span class="hljs-comment">//Python页面</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Python</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">header</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;首页、公开课、登录、注册...（公共头部）&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">footer</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;帮助中心、交流合作、站内地图...(公共底部)&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">left</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Java,Python,C++...(公共分类列表)&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">content</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Python学科视频&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><span class="hljs-comment">//C++页面</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CPP</span> <br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">header</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;首页、公开课、登录、注册...（公共头部）&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">footer</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;帮助中心、交流合作、站内地图...(公共底部)&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">left</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Java,Python,C++...(公共分类列表)&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">content</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;C++学科视频&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Java页面</span><br>cout &lt;&lt; <span class="hljs-string">&quot;Java下载视频页面如下： &quot;</span> &lt;&lt; endl;<br>Java ja;<br>ja.<span class="hljs-built_in">header</span>();<br>ja.<span class="hljs-built_in">footer</span>();<br>ja.<span class="hljs-built_in">left</span>();<br>ja.<span class="hljs-built_in">content</span>();<br>cout &lt;&lt; <span class="hljs-string">&quot;--------------------&quot;</span> &lt;&lt; endl;<br><br><span class="hljs-comment">//Python页面</span><br>cout &lt;&lt; <span class="hljs-string">&quot;Python下载视频页面如下： &quot;</span> &lt;&lt; endl;<br>Python py;<br>py.<span class="hljs-built_in">header</span>();<br>py.<span class="hljs-built_in">footer</span>();<br>py.<span class="hljs-built_in">left</span>();<br>py.<span class="hljs-built_in">content</span>();<br>cout &lt;&lt; <span class="hljs-string">&quot;--------------------&quot;</span> &lt;&lt; endl;<br><br><span class="hljs-comment">//C++页面</span><br>cout &lt;&lt; <span class="hljs-string">&quot;C++下载视频页面如下： &quot;</span> &lt;&lt; endl;<br>CPP cp;<br>cp.<span class="hljs-built_in">header</span>();<br>cp.<span class="hljs-built_in">footer</span>();<br>cp.<span class="hljs-built_in">left</span>();<br>cp.<span class="hljs-built_in">content</span>();<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>继承实现：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//公共页面</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BasePage</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">header</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;首页、公开课、登录、注册...（公共头部）&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">footer</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;帮助中心、交流合作、站内地图...(公共底部)&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">left</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Java,Python,C++...(公共分类列表)&quot;</span> &lt;&lt; endl;<br>&#125;<br><br>&#125;;<br><br><span class="hljs-comment">//Java页面</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Java</span> : <span class="hljs-keyword">public</span> BasePage<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">content</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;JAVA学科视频&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><span class="hljs-comment">//Python页面</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Python</span> : <span class="hljs-keyword">public</span> BasePage<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">content</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Python学科视频&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><span class="hljs-comment">//C++页面</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CPP</span> : <span class="hljs-keyword">public</span> BasePage<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">content</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;C++学科视频&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Java页面</span><br>cout &lt;&lt; <span class="hljs-string">&quot;Java下载视频页面如下： &quot;</span> &lt;&lt; endl;<br>Java ja;<br>ja.<span class="hljs-built_in">header</span>();<br>ja.<span class="hljs-built_in">footer</span>();<br>ja.<span class="hljs-built_in">left</span>();<br>ja.<span class="hljs-built_in">content</span>();<br>cout &lt;&lt; <span class="hljs-string">&quot;--------------------&quot;</span> &lt;&lt; endl;<br><br><span class="hljs-comment">//Python页面</span><br>cout &lt;&lt; <span class="hljs-string">&quot;Python下载视频页面如下： &quot;</span> &lt;&lt; endl;<br>Python py;<br>py.<span class="hljs-built_in">header</span>();<br>py.<span class="hljs-built_in">footer</span>();<br>py.<span class="hljs-built_in">left</span>();<br>py.<span class="hljs-built_in">content</span>();<br>cout &lt;&lt; <span class="hljs-string">&quot;--------------------&quot;</span> &lt;&lt; endl;<br><br><span class="hljs-comment">//C++页面</span><br>cout &lt;&lt; <span class="hljs-string">&quot;C++下载视频页面如下： &quot;</span> &lt;&lt; endl;<br>CPP cp;<br>cp.<span class="hljs-built_in">header</span>();<br>cp.<span class="hljs-built_in">footer</span>();<br>cp.<span class="hljs-built_in">left</span>();<br>cp.<span class="hljs-built_in">content</span>();<br><br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>总结：</strong></p><p>继承的好处：&#x3D;&#x3D;可以减少重复的代码&#x3D;&#x3D;</p><p>class A : public B;</p><p>A 类称为子类 或 派生类</p><p>B 类称为父类 或 基类</p><p><strong>派生类中的成员，包含两大部分</strong>：</p><p>一类是从基类继承过来的，一类是自己增加的成员。</p><p>从基类继承过过来的表现其共性，而新增的成员体现了其个性。</p><h4 id="4-6-2-继承方式"><a href="#4-6-2-继承方式" class="headerlink" title="4.6.2 继承方式"></a>4.6.2 继承方式</h4><p>继承的语法：<code>class 子类 : 继承方式  父类</code></p><p><strong>继承方式一共有三种：</strong></p><ul><li>公共继承</li><li>保护继承</li><li>私有继承</li></ul><p><img src="/assets/clip_image002.png" alt="img"></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base1</span><br>&#123;<br><span class="hljs-keyword">public</span>: <br><span class="hljs-type">int</span> m_A;<br><span class="hljs-keyword">protected</span>:<br><span class="hljs-type">int</span> m_B;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> m_C;<br>&#125;;<br><br><span class="hljs-comment">//公共继承</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son1</span> :<span class="hljs-keyword">public</span> Base1<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>m_A; <span class="hljs-comment">//可访问 public权限</span><br>m_B; <span class="hljs-comment">//可访问 protected权限</span><br><span class="hljs-comment">//m_C; //不可访问</span><br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">myClass</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Son1 s1;<br>s1.m_A; <span class="hljs-comment">//其他类只能访问到公共权限</span><br>&#125;<br><br><span class="hljs-comment">//保护继承</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base2</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> m_A;<br><span class="hljs-keyword">protected</span>:<br><span class="hljs-type">int</span> m_B;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> m_C;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son2</span>:<span class="hljs-keyword">protected</span> Base2<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>m_A; <span class="hljs-comment">//可访问 protected权限</span><br>m_B; <span class="hljs-comment">//可访问 protected权限</span><br><span class="hljs-comment">//m_C; //不可访问</span><br>&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">myClass2</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Son2 s;<br><span class="hljs-comment">//s.m_A; //不可访问</span><br>&#125;<br><br><span class="hljs-comment">//私有继承</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base3</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> m_A;<br><span class="hljs-keyword">protected</span>:<br><span class="hljs-type">int</span> m_B;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> m_C;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son3</span>:<span class="hljs-keyword">private</span> Base3<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>m_A; <span class="hljs-comment">//可访问 private权限</span><br>m_B; <span class="hljs-comment">//可访问 private权限</span><br><span class="hljs-comment">//m_C; //不可访问</span><br>&#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GrandSon3</span> :<span class="hljs-keyword">public</span> Son3<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Son3是私有继承，所以继承Son3的属性在GrandSon3中都无法访问到</span><br><span class="hljs-comment">//m_A;</span><br><span class="hljs-comment">//m_B;</span><br><span class="hljs-comment">//m_C;</span><br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="4-6-3-继承中的对象模型"><a href="#4-6-3-继承中的对象模型" class="headerlink" title="4.6.3 继承中的对象模型"></a>4.6.3 继承中的对象模型</h4><p><strong>问题：</strong>从父类继承过来的成员，哪些属于子类对象中？</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> m_A;<br><span class="hljs-keyword">protected</span>:<br><span class="hljs-type">int</span> m_B;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> m_C; <span class="hljs-comment">//私有成员只是被隐藏了，但是还是会继承下去</span><br>&#125;;<br><br><span class="hljs-comment">//公共继承</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> :<span class="hljs-keyword">public</span> Base<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> m_D;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;sizeof Son = &quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(Son) &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>利用工具查看：</p><p><img src="/assets/1545881904150.png" alt="1545881904150"></p><p>打开工具窗口后，定位到当前CPP文件的盘符</p><p>然后输入： cl &#x2F;d1 reportSingleClassLayout查看的类名   所属文件名</p><p>效果如下图：</p><p><img src="/assets/1545882158050.png" alt="1545882158050"></p><blockquote><p>结论： 父类中私有成员也是被子类继承下去了，只是由编译器给隐藏后访问不到</p></blockquote><h4 id="4-6-4-继承中构造和析构顺序"><a href="#4-6-4-继承中构造和析构顺序" class="headerlink" title="4.6.4 继承中构造和析构顺序"></a>4.6.4 继承中构造和析构顺序</h4><p>子类继承父类后，当创建子类对象，也会调用父类的构造函数</p><p>问题：父类和子类的构造和析构顺序是谁先谁后？</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span> <br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Base</span>()<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Base构造函数!&quot;</span> &lt;&lt; endl;<br>&#125;<br>~<span class="hljs-built_in">Base</span>()<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Base析构函数!&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> : <span class="hljs-keyword">public</span> Base<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Son</span>()<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Son构造函数!&quot;</span> &lt;&lt; endl;<br>&#125;<br>~<span class="hljs-built_in">Son</span>()<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Son析构函数!&quot;</span> &lt;&lt; endl;<br>&#125;<br><br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反</span><br>Son s;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结：继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反</p></blockquote><h4 id="4-6-5-继承同名成员处理方式"><a href="#4-6-5-继承同名成员处理方式" class="headerlink" title="4.6.5 继承同名成员处理方式"></a>4.6.5 继承同名成员处理方式</h4><p>问题：当子类与父类出现同名的成员，如何通过子类对象，访问到子类或父类中同名的数据呢？</p><ul><li>访问子类同名成员   直接访问即可</li><li>访问父类同名成员   需要加作用域</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Base</span>()<br>&#123;<br>m_A = <span class="hljs-number">100</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Base - func()调用&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Base - func(int a)调用&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> m_A;<br>&#125;;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> : <span class="hljs-keyword">public</span> Base &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Son</span>()<br>&#123;<br>m_A = <span class="hljs-number">200</span>;<br>&#125;<br><br><span class="hljs-comment">//当子类与父类拥有同名的成员函数，子类会隐藏父类中所有版本的同名成员函数</span><br><span class="hljs-comment">//如果想访问父类中被隐藏的同名成员函数，需要加父类的作用域</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Son - func()调用&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> m_A;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Son s;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;Son下的m_A = &quot;</span> &lt;&lt; s.m_A &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;Base下的m_A = &quot;</span> &lt;&lt; s.Base::m_A &lt;&lt; endl;<br><br>s.<span class="hljs-built_in">func</span>();<br>s.Base::<span class="hljs-built_in">func</span>();<br>s.Base::<span class="hljs-built_in">func</span>(<span class="hljs-number">10</span>);<br><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> EXIT_SUCCESS;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ol><li>子类对象可以直接访问到子类中同名成员</li><li>子类对象加作用域可以访问到父类同名成员</li><li>当子类与父类拥有同名的成员函数，子类会隐藏父类中同名成员函数，加作用域可以访问到父类中同名函数</li></ol><h4 id="4-6-6-继承同名静态成员处理方式"><a href="#4-6-6-继承同名静态成员处理方式" class="headerlink" title="4.6.6 继承同名静态成员处理方式"></a>4.6.6 继承同名静态成员处理方式</h4><p>问题：继承中同名的静态成员在子类对象上如何进行访问？</p><p>静态成员和非静态成员出现同名，处理方式一致</p><ul><li>访问子类同名成员   直接访问即可</li><li>访问父类同名成员   需要加作用域</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Base - static void func()&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Base - static void func(int a)&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> m_A;<br>&#125;;<br><br><span class="hljs-type">int</span> Base::m_A = <span class="hljs-number">100</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> : <span class="hljs-keyword">public</span> Base &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Son - static void func()&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> m_A;<br>&#125;;<br><br><span class="hljs-type">int</span> Son::m_A = <span class="hljs-number">200</span>;<br><br><span class="hljs-comment">//同名成员属性</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//通过对象访问</span><br>cout &lt;&lt; <span class="hljs-string">&quot;通过对象访问： &quot;</span> &lt;&lt; endl;<br>Son s;<br>cout &lt;&lt; <span class="hljs-string">&quot;Son  下 m_A = &quot;</span> &lt;&lt; s.m_A &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;Base 下 m_A = &quot;</span> &lt;&lt; s.Base::m_A &lt;&lt; endl;<br><br><span class="hljs-comment">//通过类名访问</span><br>cout &lt;&lt; <span class="hljs-string">&quot;通过类名访问： &quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;Son  下 m_A = &quot;</span> &lt;&lt; Son::m_A &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;Base 下 m_A = &quot;</span> &lt;&lt; Son::Base::m_A &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">//同名成员函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//通过对象访问</span><br>cout &lt;&lt; <span class="hljs-string">&quot;通过对象访问： &quot;</span> &lt;&lt; endl;<br>Son s;<br>s.<span class="hljs-built_in">func</span>();<br>s.Base::<span class="hljs-built_in">func</span>();<br><br>cout &lt;&lt; <span class="hljs-string">&quot;通过类名访问： &quot;</span> &lt;&lt; endl;<br>Son::<span class="hljs-built_in">func</span>();<br>Son::Base::<span class="hljs-built_in">func</span>();<br><span class="hljs-comment">//出现同名，子类会隐藏掉父类中所有同名成员函数，需要加作作用域访问</span><br>Son::Base::<span class="hljs-built_in">func</span>(<span class="hljs-number">100</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//test01();</span><br><span class="hljs-built_in">test02</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结：同名静态成员处理方式和非静态处理方式一样，只不过有两种访问的方式（通过对象 和 通过类名）</p></blockquote><h4 id="4-6-7-多继承语法"><a href="#4-6-7-多继承语法" class="headerlink" title="4.6.7 多继承语法"></a>4.6.7 多继承语法</h4><p>C++允许<strong>一个类继承多个类</strong></p><p>语法：<code> class 子类 ：继承方式 父类1 ， 继承方式 父类2...</code></p><p>多继承可能会引发父类中有同名成员出现，需要加作用域区分</p><p><strong>C++实际开发中不建议用多继承</strong></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base1</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Base1</span>()<br>&#123;<br>m_A = <span class="hljs-number">100</span>;<br>&#125;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> m_A;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base2</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Base2</span>()<br>&#123;<br>m_A = <span class="hljs-number">200</span>;  <span class="hljs-comment">//开始是m_B 不会出问题，但是改为mA就会出现不明确</span><br>&#125;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> m_A;<br>&#125;;<br><br><span class="hljs-comment">//语法：class 子类：继承方式 父类1 ，继承方式 父类2 </span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> : <span class="hljs-keyword">public</span> Base2, <span class="hljs-keyword">public</span> Base1 <br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Son</span>()<br>&#123;<br>m_C = <span class="hljs-number">300</span>;<br>m_D = <span class="hljs-number">400</span>;<br>&#125;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> m_C;<br><span class="hljs-type">int</span> m_D;<br>&#125;;<br><br><br><span class="hljs-comment">//多继承容易产生成员同名的情况</span><br><span class="hljs-comment">//通过使用类名作用域可以区分调用哪一个基类的成员</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Son s;<br>cout &lt;&lt; <span class="hljs-string">&quot;sizeof Son = &quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(s) &lt;&lt; endl;<br>cout &lt;&lt; s.Base1::m_A &lt;&lt; endl;<br>cout &lt;&lt; s.Base2::m_A &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结： 多继承中如果父类中出现了同名情况，子类使用时候要加作用域</p></blockquote><h4 id="4-6-8-菱形继承"><a href="#4-6-8-菱形继承" class="headerlink" title="4.6.8 菱形继承"></a>4.6.8 菱形继承</h4><p><strong>菱形继承概念：</strong></p><pre><code class="hljs">两个派生类继承同一个基类又有某个类同时继承者两个派生类这种继承被称为菱形继承，或者钻石继承</code></pre><p><strong>典型的菱形继承案例：</strong></p><p><img src="/assets/clip_image002.jpg" alt="IMG_256"></p><p><strong>菱形继承问题：</strong></p><ol><li>羊继承了动物的数据，驼同样继承了动物的数据，当草泥马使用数据时，就会产生二义性。</li><li>草泥马继承自动物的数据继承了两份，其实我们应该清楚，这份数据我们只需要一份就可以。</li></ol><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> m_Age;<br>&#125;;<br><br><span class="hljs-comment">//继承前加virtual关键字后，变为虚继承</span><br><span class="hljs-comment">//此时公共的父类Animal称为虚基类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sheep</span> : <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">public</span> Animal &#123;&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tuo</span>   : <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">public</span> Animal &#123;&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SheepTuo</span> : <span class="hljs-keyword">public</span> Sheep, <span class="hljs-keyword">public</span> Tuo &#123;&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>SheepTuo st;<br>st.Sheep::m_Age = <span class="hljs-number">100</span>;<br>st.Tuo::m_Age = <span class="hljs-number">200</span>;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;st.Sheep::m_Age = &quot;</span> &lt;&lt; st.Sheep::m_Age &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;st.Tuo::m_Age = &quot;</span> &lt;&lt;  st.Tuo::m_Age &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;st.m_Age = &quot;</span> &lt;&lt; st.m_Age &lt;&lt; endl;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>菱形继承带来的主要问题是子类继承两份相同的数据，导致资源浪费以及毫无意义</li><li>利用虚继承可以解决菱形继承问题</li></ul><h3 id="4-7-多态"><a href="#4-7-多态" class="headerlink" title="4.7  多态"></a>4.7  多态</h3><h4 id="4-7-1-多态的基本概念"><a href="#4-7-1-多态的基本概念" class="headerlink" title="4.7.1 多态的基本概念"></a>4.7.1 多态的基本概念</h4><p><strong>多态是C++面向对象三大特性之一</strong></p><p>多态分为两类</p><ul><li>静态多态: 函数重载 和 运算符重载属于静态多态，复用函数名</li><li>动态多态: 派生类和虚函数实现运行时多态</li></ul><p>静态多态和动态多态区别：</p><ul><li>静态多态的函数地址早绑定  -  编译阶段确定函数地址</li><li>动态多态的函数地址晚绑定  -  运行阶段确定函数地址</li></ul><p>下面通过案例进行讲解多态</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//Speak函数就是虚函数</span><br><span class="hljs-comment">//函数前面加上virtual关键字，变成虚函数，那么编译器在编译的时候就不能确定函数调用了。</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">speak</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;动物在说话&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> :<span class="hljs-keyword">public</span> Animal<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">speak</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;小猫在说话&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> :<span class="hljs-keyword">public</span> Animal<br>&#123;<br><span class="hljs-keyword">public</span>:<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">speak</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;小狗在说话&quot;</span> &lt;&lt; endl;<br>&#125;<br><br>&#125;;<br><span class="hljs-comment">//我们希望传入什么对象，那么就调用什么对象的函数</span><br><span class="hljs-comment">//如果函数地址在编译阶段就能确定，那么静态联编</span><br><span class="hljs-comment">//如果函数地址在运行阶段才能确定，就是动态联编</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DoSpeak</span><span class="hljs-params">(Animal &amp; animal)</span></span><br><span class="hljs-function"></span>&#123;<br>animal.<span class="hljs-built_in">speak</span>();<br>&#125;<br><span class="hljs-comment">//</span><br><span class="hljs-comment">//多态满足条件： </span><br><span class="hljs-comment">//1、有继承关系</span><br><span class="hljs-comment">//2、子类重写父类中的虚函数</span><br><span class="hljs-comment">//多态使用：</span><br><span class="hljs-comment">//父类指针或引用指向子类对象</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Cat cat;<br><span class="hljs-built_in">DoSpeak</span>(cat);<br><br><br>Dog dog;<br><span class="hljs-built_in">DoSpeak</span>(dog);<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><p>多态满足条件</p><ul><li>有继承关系</li><li>子类重写父类中的虚函数</li></ul><p>多态使用条件</p><ul><li>父类指针或引用指向子类对象</li></ul><p>重写：函数返回值类型  函数名 参数列表 完全一致称为重写</p><h4 id="4-7-2-多态案例一-计算器类"><a href="#4-7-2-多态案例一-计算器类" class="headerlink" title="4.7.2 多态案例一-计算器类"></a>4.7.2 多态案例一-计算器类</h4><p>案例描述：</p><p>分别利用普通写法和多态技术，设计实现两个操作数进行运算的计算器类</p><p>多态的优点：</p><ul><li>代码组织结构清晰</li><li>可读性强</li><li>利于前期和后期的扩展以及维护</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//普通实现</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Calculator</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getResult</span><span class="hljs-params">(string oper)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (oper == <span class="hljs-string">&quot;+&quot;</span>) &#123;<br><span class="hljs-keyword">return</span> m_Num1 + m_Num2;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (oper == <span class="hljs-string">&quot;-&quot;</span>) &#123;<br><span class="hljs-keyword">return</span> m_Num1 - m_Num2;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (oper == <span class="hljs-string">&quot;*&quot;</span>) &#123;<br><span class="hljs-keyword">return</span> m_Num1 * m_Num2;<br>&#125;<br><span class="hljs-comment">//如果要提供新的运算，需要修改源码</span><br>&#125;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> m_Num1;<br><span class="hljs-type">int</span> m_Num2;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//普通实现测试</span><br>Calculator c;<br>c.m_Num1 = <span class="hljs-number">10</span>;<br>c.m_Num2 = <span class="hljs-number">10</span>;<br>cout &lt;&lt; c.m_Num1 &lt;&lt; <span class="hljs-string">&quot; + &quot;</span> &lt;&lt; c.m_Num2 &lt;&lt; <span class="hljs-string">&quot; = &quot;</span> &lt;&lt; c.<span class="hljs-built_in">getResult</span>(<span class="hljs-string">&quot;+&quot;</span>) &lt;&lt; endl;<br><br>cout &lt;&lt; c.m_Num1 &lt;&lt; <span class="hljs-string">&quot; - &quot;</span> &lt;&lt; c.m_Num2 &lt;&lt; <span class="hljs-string">&quot; = &quot;</span> &lt;&lt; c.<span class="hljs-built_in">getResult</span>(<span class="hljs-string">&quot;-&quot;</span>) &lt;&lt; endl;<br><br>cout &lt;&lt; c.m_Num1 &lt;&lt; <span class="hljs-string">&quot; * &quot;</span> &lt;&lt; c.m_Num2 &lt;&lt; <span class="hljs-string">&quot; = &quot;</span> &lt;&lt; c.<span class="hljs-built_in">getResult</span>(<span class="hljs-string">&quot;*&quot;</span>) &lt;&lt; endl;<br>&#125;<br><br><br><br><span class="hljs-comment">//多态实现</span><br><span class="hljs-comment">//抽象计算器类</span><br><span class="hljs-comment">//多态优点：代码组织结构清晰，可读性强，利于前期和后期的扩展以及维护</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractCalculator</span><br>&#123;<br><span class="hljs-keyword">public</span> :<br><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">int</span> <span class="hljs-title">getResult</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">int</span> m_Num1;<br><span class="hljs-type">int</span> m_Num2;<br>&#125;;<br><br><span class="hljs-comment">//加法计算器</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AddCalculator</span> :<span class="hljs-keyword">public</span> AbstractCalculator<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getResult</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> m_Num1 + m_Num2;<br>&#125;<br>&#125;;<br><br><span class="hljs-comment">//减法计算器</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SubCalculator</span> :<span class="hljs-keyword">public</span> AbstractCalculator<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getResult</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> m_Num1 - m_Num2;<br>&#125;<br>&#125;;<br><br><span class="hljs-comment">//乘法计算器</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MulCalculator</span> :<span class="hljs-keyword">public</span> AbstractCalculator<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getResult</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> m_Num1 * m_Num2;<br>&#125;<br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//创建加法计算器</span><br>AbstractCalculator *abc = <span class="hljs-keyword">new</span> AddCalculator;<br>abc-&gt;m_Num1 = <span class="hljs-number">10</span>;<br>abc-&gt;m_Num2 = <span class="hljs-number">10</span>;<br>cout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; <span class="hljs-string">&quot; + &quot;</span> &lt;&lt; abc-&gt;m_Num2 &lt;&lt; <span class="hljs-string">&quot; = &quot;</span> &lt;&lt; abc-&gt;<span class="hljs-built_in">getResult</span>() &lt;&lt; endl;<br><span class="hljs-keyword">delete</span> abc;  <span class="hljs-comment">//用完了记得销毁</span><br><br><span class="hljs-comment">//创建减法计算器</span><br>abc = <span class="hljs-keyword">new</span> SubCalculator;<br>abc-&gt;m_Num1 = <span class="hljs-number">10</span>;<br>abc-&gt;m_Num2 = <span class="hljs-number">10</span>;<br>cout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; <span class="hljs-string">&quot; - &quot;</span> &lt;&lt; abc-&gt;m_Num2 &lt;&lt; <span class="hljs-string">&quot; = &quot;</span> &lt;&lt; abc-&gt;<span class="hljs-built_in">getResult</span>() &lt;&lt; endl;<br><span class="hljs-keyword">delete</span> abc;  <br><br><span class="hljs-comment">//创建乘法计算器</span><br>abc = <span class="hljs-keyword">new</span> MulCalculator;<br>abc-&gt;m_Num1 = <span class="hljs-number">10</span>;<br>abc-&gt;m_Num2 = <span class="hljs-number">10</span>;<br>cout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; <span class="hljs-string">&quot; * &quot;</span> &lt;&lt; abc-&gt;m_Num2 &lt;&lt; <span class="hljs-string">&quot; = &quot;</span> &lt;&lt; abc-&gt;<span class="hljs-built_in">getResult</span>() &lt;&lt; endl;<br><span class="hljs-keyword">delete</span> abc;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//test01();</span><br><br><span class="hljs-built_in">test02</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结：C++开发提倡利用多态设计程序架构，因为多态优点很多</p></blockquote><h4 id="4-7-3-纯虚函数和抽象类"><a href="#4-7-3-纯虚函数和抽象类" class="headerlink" title="4.7.3 纯虚函数和抽象类"></a>4.7.3 纯虚函数和抽象类</h4><p>在多态中，通常父类中虚函数的实现是毫无意义的，主要都是调用子类重写的内容</p><p>因此可以将虚函数改为<strong>纯虚函数</strong></p><p>纯虚函数语法：<code>virtual 返回值类型 函数名 （参数列表）= 0 ;</code></p><p>当类中有了纯虚函数，这个类也称为&#x3D;&#x3D;抽象类&#x3D;&#x3D;</p><p><strong>抽象类特点</strong>：</p><ul><li>无法实例化对象</li><li>子类必须重写抽象类中的纯虚函数，否则也属于抽象类</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//纯虚函数</span><br><span class="hljs-comment">//类中只要有一个纯虚函数就称为抽象类</span><br><span class="hljs-comment">//抽象类无法实例化对象</span><br><span class="hljs-comment">//子类必须重写父类中的纯虚函数，否则也属于抽象类</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> :<span class="hljs-keyword">public</span> Base<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;func调用&quot;</span> &lt;&lt; endl;<br>&#125;;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Base * base = <span class="hljs-literal">NULL</span>;<br><span class="hljs-comment">//base = new Base; // 错误，抽象类无法实例化对象</span><br>base = <span class="hljs-keyword">new</span> Son;<br>base-&gt;<span class="hljs-built_in">func</span>();<br><span class="hljs-keyword">delete</span> base;<span class="hljs-comment">//记得销毁</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-7-4-多态案例二-制作饮品"><a href="#4-7-4-多态案例二-制作饮品" class="headerlink" title="4.7.4 多态案例二-制作饮品"></a>4.7.4 多态案例二-制作饮品</h4><p><strong>案例描述：</strong></p><p>制作饮品的大致流程为：煮水 -  冲泡 - 倒入杯中 - 加入辅料</p><p>利用多态技术实现本案例，提供抽象制作饮品基类，提供子类制作咖啡和茶叶</p><p><img src="/assets/1545985945198.png" alt="1545985945198"></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//抽象制作饮品</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractDrinking</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//烧水</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">Boil</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br><span class="hljs-comment">//冲泡</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">Brew</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br><span class="hljs-comment">//倒入杯中</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">PourInCup</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br><span class="hljs-comment">//加入辅料</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">PutSomething</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br><span class="hljs-comment">//规定流程</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">MakeDrink</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">Boil</span>();<br><span class="hljs-built_in">Brew</span>();<br><span class="hljs-built_in">PourInCup</span>();<br><span class="hljs-built_in">PutSomething</span>();<br>&#125;<br>&#125;;<br><br><span class="hljs-comment">//制作咖啡</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Coffee</span> : <span class="hljs-keyword">public</span> AbstractDrinking &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//烧水</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">Boil</span><span class="hljs-params">()</span> </span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;煮农夫山泉!&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-comment">//冲泡</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">Brew</span><span class="hljs-params">()</span> </span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;冲泡咖啡!&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-comment">//倒入杯中</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">PourInCup</span><span class="hljs-params">()</span> </span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;将咖啡倒入杯中!&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-comment">//加入辅料</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">PutSomething</span><span class="hljs-params">()</span> </span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;加入牛奶!&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-comment">//制作茶水</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tea</span> : <span class="hljs-keyword">public</span> AbstractDrinking &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//烧水</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">Boil</span><span class="hljs-params">()</span> </span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;煮自来水!&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-comment">//冲泡</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">Brew</span><span class="hljs-params">()</span> </span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;冲泡茶叶!&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-comment">//倒入杯中</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">PourInCup</span><span class="hljs-params">()</span> </span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;将茶水倒入杯中!&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-comment">//加入辅料</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">PutSomething</span><span class="hljs-params">()</span> </span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;加入枸杞!&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-comment">//业务函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DoWork</span><span class="hljs-params">(AbstractDrinking* drink)</span> </span>&#123;<br>drink-&gt;<span class="hljs-built_in">MakeDrink</span>();<br><span class="hljs-keyword">delete</span> drink;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">DoWork</span>(<span class="hljs-keyword">new</span> Coffee);<br>cout &lt;&lt; <span class="hljs-string">&quot;--------------&quot;</span> &lt;&lt; endl;<br><span class="hljs-built_in">DoWork</span>(<span class="hljs-keyword">new</span> Tea);<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-7-5-虚析构和纯虚析构"><a href="#4-7-5-虚析构和纯虚析构" class="headerlink" title="4.7.5 虚析构和纯虚析构"></a>4.7.5 虚析构和纯虚析构</h4><p>多态使用时，如果子类中有属性开辟到堆区，那么父类指针在释放时无法调用到子类的析构代码</p><p>解决方式：将父类中的析构函数改为<strong>虚析构</strong>或者<strong>纯虚析构</strong></p><p>虚析构和纯虚析构共性：</p><ul><li>可以解决父类指针释放子类对象</li><li>都需要有具体的函数实现</li></ul><p>虚析构和纯虚析构区别：</p><ul><li>如果是纯虚析构，该类属于抽象类，无法实例化对象</li></ul><p>虚析构语法：</p><p><code>virtual ~类名()&#123;&#125;</code></p><p>纯虚析构语法：</p><p><code> virtual ~类名() = 0;</code></p><p><code>类名::~类名()&#123;&#125;</code></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br><span class="hljs-keyword">public</span>:<br><br><span class="hljs-built_in">Animal</span>()<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Animal 构造函数调用！&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">Speak</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">//析构函数加上virtual关键字，变成虚析构函数</span><br><span class="hljs-comment">//virtual ~Animal()</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//cout &lt;&lt; &quot;Animal虚析构函数调用！&quot; &lt;&lt; endl;</span><br><span class="hljs-comment">//&#125;</span><br><br><br><span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">Animal</span>() = <span class="hljs-number">0</span>;<br>&#125;;<br><br>Animal::~<span class="hljs-built_in">Animal</span>()<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Animal 纯虚析构函数调用！&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">//和包含普通纯虚函数的类一样，包含了纯虚析构函数的类也是一个抽象类。不能够被实例化。</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> : <span class="hljs-keyword">public</span> Animal &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Cat</span>(string name)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Cat构造函数调用！&quot;</span> &lt;&lt; endl;<br>m_Name = <span class="hljs-keyword">new</span> <span class="hljs-built_in">string</span>(name);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">Speak</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; *m_Name &lt;&lt;  <span class="hljs-string">&quot;小猫在说话!&quot;</span> &lt;&lt; endl;<br>&#125;<br>~<span class="hljs-built_in">Cat</span>()<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Cat析构函数调用!&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;m_Name != <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-keyword">delete</span> m_Name;<br>m_Name = <span class="hljs-literal">NULL</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span>:<br>string *m_Name;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Animal *animal = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Cat</span>(<span class="hljs-string">&quot;Tom&quot;</span>);<br>animal-&gt;<span class="hljs-built_in">Speak</span>();<br><br><span class="hljs-comment">//通过父类指针去释放，会导致子类对象可能清理不干净，造成内存泄漏</span><br><span class="hljs-comment">//怎么解决？给基类增加一个虚析构函数</span><br><span class="hljs-comment">//虚析构函数就是用来解决通过父类指针释放子类对象</span><br><span class="hljs-keyword">delete</span> animal;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><pre><code class="hljs">1. 虚析构或纯虚析构就是用来解决通过父类指针释放子类对象2. 如果子类中没有堆区数据，可以不写为虚析构或纯虚析构3. 拥有纯虚析构函数的类也属于抽象类</code></pre><h4 id="4-7-6-多态案例三-电脑组装"><a href="#4-7-6-多态案例三-电脑组装" class="headerlink" title="4.7.6 多态案例三-电脑组装"></a>4.7.6 多态案例三-电脑组装</h4><p><strong>案例描述：</strong></p><p>电脑主要组成部件为 CPU（用于计算），显卡（用于显示），内存条（用于存储）</p><p>将每个零件封装出抽象基类，并且提供不同的厂商生产不同的零件，例如Intel厂商和Lenovo厂商</p><p>创建电脑类提供让电脑工作的函数，并且调用每个零件工作的接口</p><p>测试时组装三台不同的电脑进行工作</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//抽象CPU类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CPU</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//抽象的计算函数</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">calculate</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-comment">//抽象显卡类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">VideoCard</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//抽象的显示函数</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-comment">//抽象内存条类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Memory</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//抽象的存储函数</span><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">storage</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-comment">//电脑类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Computer</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Computer</span>(CPU * cpu, VideoCard * vc, Memory * mem)<br>&#123;<br>m_cpu = cpu;<br>m_vc = vc;<br>m_mem = mem;<br>&#125;<br><br><span class="hljs-comment">//提供工作的函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">work</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//让零件工作起来，调用接口</span><br>m_cpu-&gt;<span class="hljs-built_in">calculate</span>();<br><br>m_vc-&gt;<span class="hljs-built_in">display</span>();<br><br>m_mem-&gt;<span class="hljs-built_in">storage</span>();<br>&#125;<br><br><span class="hljs-comment">//提供析构函数 释放3个电脑零件</span><br>~<span class="hljs-built_in">Computer</span>()<br>&#123;<br><br><span class="hljs-comment">//释放CPU零件</span><br><span class="hljs-keyword">if</span> (m_cpu != <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">delete</span> m_cpu;<br>m_cpu = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-comment">//释放显卡零件</span><br><span class="hljs-keyword">if</span> (m_vc != <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">delete</span> m_vc;<br>m_vc = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-comment">//释放内存条零件</span><br><span class="hljs-keyword">if</span> (m_mem != <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">delete</span> m_mem;<br>m_mem = <span class="hljs-literal">NULL</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">private</span>:<br><br>CPU * m_cpu; <span class="hljs-comment">//CPU的零件指针</span><br>VideoCard * m_vc; <span class="hljs-comment">//显卡零件指针</span><br>Memory * m_mem; <span class="hljs-comment">//内存条零件指针</span><br>&#125;;<br><br><span class="hljs-comment">//具体厂商</span><br><span class="hljs-comment">//Intel厂商</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">IntelCPU</span> :<span class="hljs-keyword">public</span> CPU<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">calculate</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Intel的CPU开始计算了！&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">IntelVideoCard</span> :<span class="hljs-keyword">public</span> VideoCard<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Intel的显卡开始显示了！&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">IntelMemory</span> :<span class="hljs-keyword">public</span> Memory<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">storage</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Intel的内存条开始存储了！&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-comment">//Lenovo厂商</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LenovoCPU</span> :<span class="hljs-keyword">public</span> CPU<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">calculate</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Lenovo的CPU开始计算了！&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LenovoVideoCard</span> :<span class="hljs-keyword">public</span> VideoCard<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Lenovo的显卡开始显示了！&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LenovoMemory</span> :<span class="hljs-keyword">public</span> Memory<br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">storage</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Lenovo的内存条开始存储了！&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//第一台电脑零件</span><br>CPU * intelCpu = <span class="hljs-keyword">new</span> IntelCPU;<br>VideoCard * intelCard = <span class="hljs-keyword">new</span> IntelVideoCard;<br>Memory * intelMem = <span class="hljs-keyword">new</span> IntelMemory;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;第一台电脑开始工作：&quot;</span> &lt;&lt; endl;<br><span class="hljs-comment">//创建第一台电脑</span><br>Computer * computer1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Computer</span>(intelCpu, intelCard, intelMem);<br>computer1-&gt;<span class="hljs-built_in">work</span>();<br><span class="hljs-keyword">delete</span> computer1;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;-----------------------&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;第二台电脑开始工作：&quot;</span> &lt;&lt; endl;<br><span class="hljs-comment">//第二台电脑组装</span><br>Computer * computer2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Computer</span>(<span class="hljs-keyword">new</span> LenovoCPU, <span class="hljs-keyword">new</span> LenovoVideoCard, <span class="hljs-keyword">new</span> LenovoMemory);;<br>computer2-&gt;<span class="hljs-built_in">work</span>();<br><span class="hljs-keyword">delete</span> computer2;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;-----------------------&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;第三台电脑开始工作：&quot;</span> &lt;&lt; endl;<br><span class="hljs-comment">//第三台电脑组装</span><br>Computer * computer3 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Computer</span>(<span class="hljs-keyword">new</span> LenovoCPU, <span class="hljs-keyword">new</span> IntelVideoCard, <span class="hljs-keyword">new</span> LenovoMemory);;<br>computer3-&gt;<span class="hljs-built_in">work</span>();<br><span class="hljs-keyword">delete</span> computer3;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-文件操作"><a href="#5-文件操作" class="headerlink" title="5 文件操作"></a>5 文件操作</h2><p>程序运行时产生的数据都属于临时数据，程序一旦运行结束都会被释放</p><p>通过<strong>文件可以将数据持久化</strong></p><p>C++中对文件操作需要包含头文件 &#x3D;&#x3D;&lt; fstream &gt;&#x3D;&#x3D;</p><p>文件类型分为两种：</p><ol><li><strong>文本文件</strong>     -  文件以文本的<strong>ASCII码</strong>形式存储在计算机中</li><li><strong>二进制文件</strong> -  文件以文本的<strong>二进制</strong>形式存储在计算机中，用户一般不能直接读懂它们</li></ol><p>操作文件的三大类:</p><ol><li>ofstream：写操作</li><li>ifstream： 读操作</li><li>fstream ： 读写操作</li></ol><h3 id="5-1文本文件"><a href="#5-1文本文件" class="headerlink" title="5.1文本文件"></a>5.1文本文件</h3><h4 id="5-1-1写文件"><a href="#5-1-1写文件" class="headerlink" title="5.1.1写文件"></a>5.1.1写文件</h4><p>   写文件步骤如下：</p><ol><li><p>包含头文件</p><p>#include &lt;fstream&gt;</p></li><li><p>创建流对象</p><p>ofstream ofs;</p></li><li><p>打开文件</p><p>ofs.open(“文件路径”,打开方式);</p></li><li><p>写数据</p><p>ofs &lt;&lt; “写入的数据”;</p></li><li><p>关闭文件</p><p>ofs.close();</p></li></ol><p>文件打开方式：</p><table><thead><tr><th>打开方式</th><th>解释</th></tr></thead><tbody><tr><td>ios::in</td><td>为读文件而打开文件</td></tr><tr><td>ios::out</td><td>为写文件而打开文件</td></tr><tr><td>ios::ate</td><td>初始位置：文件尾</td></tr><tr><td>ios::app</td><td>追加方式写文件</td></tr><tr><td>ios::trunc</td><td>如果文件存在先删除，再创建</td></tr><tr><td>ios::binary</td><td>二进制方式</td></tr></tbody></table><p><strong>注意：</strong> 文件打开方式可以配合使用，利用|操作符</p><p><strong>例如：</strong>用二进制方式写文件 <code>ios::binary |  ios:: out</code></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fstream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>ofstream ofs;<br>ofs.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, ios::out);<br><br>ofs &lt;&lt; <span class="hljs-string">&quot;姓名：张三&quot;</span> &lt;&lt; endl;<br>ofs &lt;&lt; <span class="hljs-string">&quot;性别：男&quot;</span> &lt;&lt; endl;<br>ofs &lt;&lt; <span class="hljs-string">&quot;年龄：18&quot;</span> &lt;&lt; endl;<br><br>ofs.<span class="hljs-built_in">close</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>文件操作必须包含头文件 fstream</li><li>读文件可以利用 ofstream  ，或者fstream类</li><li>打开文件时候需要指定操作文件的路径，以及打开方式</li><li>利用&lt;&lt;可以向文件中写数据</li><li>操作完毕，要关闭文件</li></ul><h4 id="5-1-2读文件"><a href="#5-1-2读文件" class="headerlink" title="5.1.2读文件"></a>5.1.2读文件</h4><p>读文件与写文件步骤相似，但是读取方式相对于比较多</p><p>读文件步骤如下：</p><ol><li><p>包含头文件</p><p>#include &lt;fstream&gt;</p></li><li><p>创建流对象</p><p>ifstream ifs;</p></li><li><p>打开文件并判断文件是否打开成功</p><p>ifs.open(“文件路径”,打开方式);</p></li><li><p>读数据</p><p>四种方式读取</p></li><li><p>关闭文件</p><p>ifs.close();</p></li></ol><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>ifstream ifs;<br>ifs.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, ios::in);<br><br><span class="hljs-keyword">if</span> (!ifs.<span class="hljs-built_in">is_open</span>())<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;文件打开失败&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">//第一种方式</span><br><span class="hljs-comment">//char buf[1024] = &#123; 0 &#125;;</span><br><span class="hljs-comment">//while (ifs &gt;&gt; buf)</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//cout &lt;&lt; buf &lt;&lt; endl;</span><br><span class="hljs-comment">//&#125;</span><br><br><span class="hljs-comment">//第二种</span><br><span class="hljs-comment">//char buf[1024] = &#123; 0 &#125;;</span><br><span class="hljs-comment">//while (ifs.getline(buf,sizeof(buf)))</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//cout &lt;&lt; buf &lt;&lt; endl;</span><br><span class="hljs-comment">//&#125;</span><br><br><span class="hljs-comment">//第三种</span><br><span class="hljs-comment">//string buf;</span><br><span class="hljs-comment">//while (getline(ifs, buf))</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//cout &lt;&lt; buf &lt;&lt; endl;</span><br><span class="hljs-comment">//&#125;</span><br><br><span class="hljs-type">char</span> c;<br><span class="hljs-keyword">while</span> ((c = ifs.<span class="hljs-built_in">get</span>()) != EOF)<br>&#123;<br>cout &lt;&lt; c;<br>&#125;<br><br>ifs.<span class="hljs-built_in">close</span>();<br><br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>读文件可以利用 ifstream  ，或者fstream类</li><li>利用is_open函数可以判断文件是否打开成功</li><li>close 关闭文件</li></ul><h3 id="5-2-二进制文件"><a href="#5-2-二进制文件" class="headerlink" title="5.2 二进制文件"></a>5.2 二进制文件</h3><p>以二进制的方式对文件进行读写操作</p><p>打开方式要指定为 &#x3D;&#x3D;ios::binary&#x3D;&#x3D;</p><h4 id="5-2-1-写文件"><a href="#5-2-1-写文件" class="headerlink" title="5.2.1 写文件"></a>5.2.1 写文件</h4><p>二进制方式写文件主要利用流对象调用成员函数write</p><p>函数原型 ：<code>ostream&amp; write(const char * buffer,int len);</code></p><p>参数解释：字符指针buffer指向内存中一段存储空间。len是读写的字节数</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">char</span> m_Name[<span class="hljs-number">64</span>];<br><span class="hljs-type">int</span> m_Age;<br>&#125;;<br><br><span class="hljs-comment">//二进制文件  写文件</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//1、包含头文件</span><br><br><span class="hljs-comment">//2、创建输出流对象</span><br><span class="hljs-function">ofstream <span class="hljs-title">ofs</span><span class="hljs-params">(<span class="hljs-string">&quot;person.txt&quot;</span>, ios::out | ios::binary)</span></span>;<br><br><span class="hljs-comment">//3、打开文件</span><br><span class="hljs-comment">//ofs.open(&quot;person.txt&quot;, ios::out | ios::binary);</span><br><br>Person p = &#123;<span class="hljs-string">&quot;张三&quot;</span>  , <span class="hljs-number">18</span>&#125;;<br><br><span class="hljs-comment">//4、写文件</span><br>ofs.<span class="hljs-built_in">write</span>((<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)&amp;p, <span class="hljs-built_in">sizeof</span>(p));<br><br><span class="hljs-comment">//5、关闭文件</span><br>ofs.<span class="hljs-built_in">close</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>文件输出流对象 可以通过write函数，以二进制方式写数据</li></ul><h4 id="5-2-2-读文件"><a href="#5-2-2-读文件" class="headerlink" title="5.2.2 读文件"></a>5.2.2 读文件</h4><p>二进制方式读文件主要利用流对象调用成员函数read</p><p>函数原型：<code>istream&amp; read(char *buffer,int len);</code></p><p>参数解释：字符指针buffer指向内存中一段存储空间。len是读写的字节数</p><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">char</span> m_Name[<span class="hljs-number">64</span>];<br><span class="hljs-type">int</span> m_Age;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function">ifstream <span class="hljs-title">ifs</span><span class="hljs-params">(<span class="hljs-string">&quot;person.txt&quot;</span>, ios::in | ios::binary)</span></span>;<br><span class="hljs-keyword">if</span> (!ifs.<span class="hljs-built_in">is_open</span>())<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;文件打开失败&quot;</span> &lt;&lt; endl;<br>&#125;<br><br>Person p;<br>ifs.<span class="hljs-built_in">read</span>((<span class="hljs-type">char</span> *)&amp;p, <span class="hljs-built_in">sizeof</span>(p));<br><br>cout &lt;&lt; <span class="hljs-string">&quot;姓名： &quot;</span> &lt;&lt; p.m_Name &lt;&lt; <span class="hljs-string">&quot; 年龄： &quot;</span> &lt;&lt; p.m_Age &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">test01</span>();<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>文件输入流对象 可以通过read函数，以二进制方式读数据</li></ul><h2 id="6-泛型程序设计-STL"><a href="#6-泛型程序设计-STL" class="headerlink" title="6 泛型程序设计 &amp; STL"></a>6 泛型程序设计 &amp; STL</h2><p>用概念来描述泛型程序设计作为参数的数据结构所具有的功能。具备一个概念所需要的所需要的功能的数据类型叫做这一概念的一个模型。例如：<code>int</code>类型就是 <code>sortable</code>的一个模型。对于两个不同的概念A、B，如果A所需的功能也是B所需的功能（B的模型一定是A的模型），那么B是A的子概念。</p><p>STL标准模板库，四个组件：容器、迭代器、函数对象、算法。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span><span class="hljs-comment">//输入输出流</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span><span class="hljs-comment">//容器</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iterator&gt;</span><span class="hljs-comment">//迭代器</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span><span class="hljs-comment">//算法</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;functional&gt;</span><span class="hljs-comment">//函数对象</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5</span>;<br>vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">s</span>(N);<span class="hljs-comment">//容器</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>cin &gt;&gt; s[i];<br>&#125;<br>transform<span class="hljs-comment">/*算法*/</span>(s.<span class="hljs-built_in">begin</span>()<span class="hljs-comment">/*迭代器*/</span>, s.<span class="hljs-built_in">end</span>()<span class="hljs-comment">/*迭代器*/</span>, <br>              <span class="hljs-built_in">ostream_iterator</span>&lt;<span class="hljs-type">int</span>&gt;(cout, <span class="hljs-string">&quot; &quot;</span>)<span class="hljs-comment">/*输出迭代器*/</span>, <span class="hljs-built_in">negate</span>&lt;<span class="hljs-type">int</span>&gt;()<span class="hljs-comment">/*函数对象*/</span>);<br>cout &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-1迭代器"><a href="#6-1迭代器" class="headerlink" title="6.1迭代器"></a>6.1迭代器</h3><p>指针是一种迭代器，但迭代器不只是指针。</p><h4 id="6-1-1输入流迭代器和输出流迭代器"><a href="#6-1-1输入流迭代器和输出流迭代器" class="headerlink" title="6.1.1输入流迭代器和输出流迭代器"></a>6.1.1输入流迭代器和输出流迭代器</h4><p>最基本的迭代器。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">square</span><span class="hljs-params">(<span class="hljs-type">double</span> x)</span> </span>&#123;<br><span class="hljs-keyword">return</span> x * x;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//标准输入若干个实数，输出其平方。</span><br><span class="hljs-built_in">transform</span>(<span class="hljs-built_in">istream_iterator</span>&lt;<span class="hljs-type">double</span>&gt;(cin), <span class="hljs-built_in">istream_iterator</span>&lt;<span class="hljs-type">double</span>&gt;(),<span class="hljs-comment">//istream_iterator(istream&amp; in);类原型</span><br><span class="hljs-built_in">ostream_iterator</span>&lt;<span class="hljs-type">double</span>&gt;(cout, <span class="hljs-string">&quot;\t&quot;</span>), square);<br>cout &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>该程序需要使用Ctrl + C停止输入。</p><h4 id="6-1-2迭代器分类"><a href="#6-1-2迭代器分类" class="headerlink" title="6.1.2迭代器分类"></a>6.1.2迭代器分类</h4><pre><code class=" mermaid">flowchart TD输入迭代器--&gt;前向迭代器输出迭代器--&gt;前向迭代器前向迭代器--&gt;双向迭代器双向迭代器--&gt;随机访问迭代器</code></pre><h4 id="6-1-3迭代器区间"><a href="#6-1-3迭代器区间" class="headerlink" title="6.1.3迭代器区间"></a>6.1.3迭代器区间</h4><p><code>p1</code>和 <code>p2</code>两个迭代器的区间为 <code>[p1, p2)</code>，注意区间的合法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iterator&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> T,<span class="hljs-keyword">class</span> InputIterator<span class="hljs-comment">/*概念*/</span>,<span class="hljs-keyword">class</span> OutputIterator<span class="hljs-comment">/*概念*/</span>&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mySort</span><span class="hljs-params">(InputIterator first, InputIterator last,OutputIterator result)</span> </span>&#123;<span class="hljs-comment">//输入迭代器first和last，表示输入范围,输出迭代器result，表示输出结果的位置</span><br>vector&lt;T&gt;s;<br><span class="hljs-keyword">for</span> (; first != last; ++first) &#123;<br>s.<span class="hljs-built_in">push_back</span>(*first);<br>&#125;<br><span class="hljs-built_in">sort</span>(s.<span class="hljs-built_in">begin</span>(), s.<span class="hljs-built_in">end</span>());<br><span class="hljs-built_in">copy</span>(s.<span class="hljs-built_in">begin</span>(), s.<span class="hljs-built_in">end</span>(), result);<span class="hljs-comment">//两个新算法，sort和copy</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">double</span> a[<span class="hljs-number">5</span>] = &#123; <span class="hljs-number">1.2</span>,<span class="hljs-number">2.4</span>,<span class="hljs-number">0.8</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span> &#125;;<br><span class="hljs-built_in">mySort</span>&lt;<span class="hljs-type">double</span>&gt;(a, a + <span class="hljs-number">5</span>, <span class="hljs-built_in">ostream_iterator</span>&lt;<span class="hljs-type">double</span>&gt;(cout, <span class="hljs-string">&quot; &quot;</span>));<br>cout &lt;&lt; endl;<br><span class="hljs-built_in">mySort</span>&lt;<span class="hljs-type">int</span>&gt;(<span class="hljs-built_in">istream_iterator</span>&lt;<span class="hljs-type">int</span>&gt;(cin), <span class="hljs-built_in">istream_iterator</span>&lt;<span class="hljs-type">int</span>&gt;(),<br><span class="hljs-built_in">ostream_iterator</span>&lt;<span class="hljs-type">int</span>&gt;(cout, <span class="hljs-string">&quot; &quot;</span>));<br>cout &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-1-4迭代器的辅助函数"><a href="#6-1-4迭代器的辅助函数" class="headerlink" title="6.1.4迭代器的辅助函数"></a>6.1.4迭代器的辅助函数</h4><p>两个辅助函数模板advance,distance，为所有迭代器提供前进或后退多个元素的元素，以及计算两个迭代器之间的距离的功能。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*函数原型*/</span><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> InputIterator, <span class="hljs-keyword">class</span> Distance&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">advance</span><span class="hljs-params">(InputIterator&amp; iter, Distance n)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> InputIterator&gt;</span><br><span class="hljs-function"><span class="hljs-type">unsigned</span> <span class="hljs-title">distance</span><span class="hljs-params">(InputIterator first, InputIterator last)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="6-2容器"><a href="#6-2容器" class="headerlink" title="6.2容器"></a>6.2容器</h3><p>按照元素的的组织方式：</p><pre><code class=" mermaid">flowchart TB容器--&gt;顺序容器容器--&gt;关联容器</code></pre><p>按照与容器容器相关联的迭代器类型分类：</p><pre><code class=" mermaid">flowchart TB容器--&gt;可逆容器可逆容器--&gt;随机访问容器</code></pre><p>STL个容器头文件和所属概念：</p><table><thead><tr><th align="center">容器</th><th align="center">中文名</th><th align="center">头文件</th><th align="center">所属概念</th></tr></thead><tbody><tr><td align="center">vector</td><td align="center">向量</td><td align="center"><vector></td><td align="center">随机访问容器，顺序容器</td></tr><tr><td align="center">deque</td><td align="center">双端队列</td><td align="center"><deque></td><td align="center">随机访问容器，顺序容器</td></tr><tr><td align="center">list</td><td align="center">列表</td><td align="center"><list></td><td align="center">可逆容器，顺序容器</td></tr><tr><td align="center">set</td><td align="center">集合</td><td align="center"><set></td><td align="center">可逆容器，关联容器</td></tr><tr><td align="center">multiset</td><td align="center">多重集合</td><td align="center"><set></td><td align="center">可逆容器，关联容器</td></tr><tr><td align="center">map</td><td align="center">映射</td><td align="center"><map></td><td align="center">可逆容器，关联容器</td></tr><tr><td align="center">multimap</td><td align="center">多重映射</td><td align="center"><map></td><td align="center">可逆容器，关联容器</td></tr></tbody></table><h4 id="6-2-1容器的基本功能与分类"><a href="#6-2-1容器的基本功能与分类" class="headerlink" title="6.2.1容器的基本功能与分类"></a>6.2.1容器的基本功能与分类</h4><ul><li>构造函数</li><li>赋值函数</li><li>元素的插入</li><li>元素的删除</li><li>改变容器的大小</li><li>首位元素的直接访问</li><li>在容器尾部插入、删除元素</li><li>在容器头部插入元素、删除元素</li></ul><h4 id="6-2-2顺序容器"><a href="#6-2-2顺序容器" class="headerlink" title="6.2.2顺序容器"></a>6.2.2顺序容器</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;list&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;deque&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printContainer</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* msg, <span class="hljs-type">const</span> T&amp; s)</span> </span>&#123;<br>cout &lt;&lt; msg &lt;&lt; <span class="hljs-string">&quot;:&quot;</span>;<br><span class="hljs-built_in">copy</span>(s.<span class="hljs-built_in">begin</span>(), s.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">ostream_iterator</span>&lt;<span class="hljs-type">int</span>&gt;(cout, <span class="hljs-string">&quot; &quot;</span>));<br>cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>deque&lt;<span class="hljs-type">int</span>&gt;s;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br><span class="hljs-type">int</span> x;<br>cin &gt;&gt; x;<br>s.<span class="hljs-built_in">push_front</span>(x);<br>&#125;<br><br><span class="hljs-built_in">printContainer</span>(<span class="hljs-string">&quot;deque at first&quot;</span>, s);<br><br>list&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">l</span>(s.<span class="hljs-built_in">rbegin</span>(), s.<span class="hljs-built_in">rend</span>());<br><span class="hljs-built_in">printContainer</span>(<span class="hljs-string">&quot;list at first&quot;</span>, l);<br><br>list&lt;<span class="hljs-type">int</span>&gt;::iterator iter = l.<span class="hljs-built_in">begin</span>();<br><span class="hljs-keyword">while</span> (iter != l.<span class="hljs-built_in">end</span>()) &#123;<br><span class="hljs-type">int</span> v = *iter;<br>iter = l.<span class="hljs-built_in">erase</span>(iter);<br>l.<span class="hljs-built_in">insert</span>(++iter, v);<br>&#125;<br><span class="hljs-built_in">printContainer</span>(<span class="hljs-string">&quot;list at last&quot;</span>, l);<br><br>s.<span class="hljs-built_in">assign</span>(l.<span class="hljs-built_in">begin</span>(), l.<span class="hljs-built_in">end</span>());<br><span class="hljs-built_in">printContainer</span>(<span class="hljs-string">&quot;deque at last&quot;</span>, s);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;deque&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iterator&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>istream_iterator&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">i1</span>(cin), i2;<br>vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">s1</span>(i1, i2);<span class="hljs-comment">//向量容器</span><br><span class="hljs-built_in">sort</span>(s1.<span class="hljs-built_in">begin</span>(), s1.<span class="hljs-built_in">end</span>());<span class="hljs-comment">//算法，输入向量容器范围的迭代器</span><br>deque&lt;<span class="hljs-type">int</span>&gt;s2;<span class="hljs-comment">//双端队列容器</span><br><span class="hljs-keyword">for</span> (vector&lt;<span class="hljs-type">int</span>&gt;::iterator iter = s1.<span class="hljs-built_in">begin</span>(); iter != s1.<span class="hljs-built_in">end</span>(); ++iter) &#123;<br><span class="hljs-keyword">if</span> (*iter % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>s2.<span class="hljs-built_in">push_back</span>(*iter);<span class="hljs-comment">//如果是偶数，插入队列尾部</span><br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>s2.<span class="hljs-built_in">push_front</span>(*iter);<span class="hljs-comment">//如果是奇数，插入队列头部</span><br>&#125;<br>&#125;<br><span class="hljs-built_in">copy</span>(s2.<span class="hljs-built_in">begin</span>(), s2.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">ostream_iterator</span>&lt;<span class="hljs-type">int</span>&gt;(cout, <span class="hljs-string">&quot; &quot;</span>));<span class="hljs-comment">//copy算法，将队列复制到输出迭代器输出</span><br>cout &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-2-3关联容器"><a href="#6-2-3关联容器" class="headerlink" title="6.2.3关联容器"></a>6.2.3关联容器</h4><p>可以高效的根据键查找容器中的一个元素。</p><pre><code class=" mermaid">flowchart TB关联容器--&gt;单重关联容器关联容器--&gt;双重关联容器</code></pre><pre><code class=" mermaid">flowchart TB关联容器--&gt;简单关联容器关联容器--&gt;二元关联容器</code></pre><p>关联容器的键必须能够使用”&lt;”比较大小，如果是常用类型以外，需要重载”&lt;”操作符。</p><ul><li><p>构造函数</p></li><li><p>元素插入</p><ul><li><p><code>s.insert(t)</code></p><ul><li>单重关联容器</li><li>多重关联容器</li></ul></li><li><p><code>s.insert(p1, t)</code></p><ul><li>单重关联容器</li><li>多重关联容器</li></ul></li><li><p><code>s.insert(q1, q2)</code>：按顺序对区间内的每个元素x分别执行<code>s.insert(x)</code></p></li></ul></li><li></li></ul><h3 id="6-3函数对象"><a href="#6-3函数对象" class="headerlink" title="6.3函数对象"></a>6.3函数对象</h3><p>行为类似于函数的对象。包括普通的函数和任何重载了()的类的对象，都可以当作函数对象传给算法使用。</p><h4 id="6-3-1函数对象的基本概念与分类"><a href="#6-3-1函数对象的基本概念与分类" class="headerlink" title="6.3.1函数对象的基本概念与分类"></a>6.3.1函数对象的基本概念与分类</h4><p>函数对象返回操作结果或产生一个数，谓词返回bool</p><pre><code class=" mermaid">graph TBA[函数对象]--&gt;B[产生器]A--&gt;C[一元函数对象]A--&gt;D[二元函数对象]C--&gt;E[一元谓词]D--&gt;F[二元谓词]</code></pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//普通函数定义函数对象</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;numeric&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">mult</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br><span class="hljs-keyword">return</span> x * y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> a[] = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span> &#125;;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-built_in">sizeof</span>(a) / <span class="hljs-built_in">sizeof</span>(a[<span class="hljs-number">0</span>]);<br>cout &lt;&lt; <span class="hljs-built_in">accumulate</span>(a, a + N, <span class="hljs-number">1</span>, mult) &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//类的对象定义函数对象</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;numeric&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MultClass</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span><span class="hljs-type">const</span> </span>&#123;<br><span class="hljs-keyword">return</span> x * y;<br>&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> a[] = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span> &#125;;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-built_in">sizeof</span>(a) / <span class="hljs-built_in">sizeof</span>(a[<span class="hljs-number">0</span>]);<br>cout &lt;&lt; <span class="hljs-built_in">accumulate</span>(a, a + N, <span class="hljs-number">1</span>, <span class="hljs-built_in">MultClass</span>()) &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>STL中二元函数对象</p><table><thead><tr><th align="center">STL对象</th><th align="center">类型</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center"><code>plus&lt;T&gt;</code></td><td align="center">算术</td><td align="center">输入两个T类型数据x,y，返回<code>x+y</code></td></tr><tr><td align="center"><code>minus&lt;T&gt;</code></td><td align="center">算术</td><td align="center">……，<code>x-y</code></td></tr><tr><td align="center"><code>multiplies&lt;T&gt;</code></td><td align="center">算术</td><td align="center">……，x*y&#96;</td></tr><tr><td align="center"><code>divides&lt;T&gt;</code></td><td align="center">算术</td><td align="center">……，<code>x/y</code></td></tr><tr><td align="center"><code>modulus&lt;T&gt;</code></td><td align="center">算术</td><td align="center">……，<code>x%y</code></td></tr><tr><td align="center"><code>negate&lt;T&gt;</code></td><td align="center">算术</td><td align="center">……，<code>-x</code></td></tr></tbody></table><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//调用STL中函数对象</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;numeric&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> a[] = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span> &#125;;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-built_in">sizeof</span>(a) / <span class="hljs-built_in">sizeof</span>(a[<span class="hljs-number">0</span>]);<br>cout &lt;&lt; <span class="hljs-built_in">accumulate</span>(a, a + N, <span class="hljs-number">1</span>, <span class="hljs-built_in">multiplies</span>&lt;<span class="hljs-type">int</span>&gt;());<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>STL中谓词函数对象</p><table><thead><tr><th align="center">STL函数对象</th><th align="center">类型</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center"><code>equal_to&lt;T&gt;</code></td><td align="center">关系</td><td align="center">输入两个类型为T的操作数x,y，返回x&#x3D;&#x3D;y</td></tr><tr><td align="center"><code>not_equal_to&lt;T&gt;</code></td><td align="center">关系</td><td align="center">……，x!&#x3D;y&#96;</td></tr><tr><td align="center"><code>greater&lt;T&gt;</code></td><td align="center">关系</td><td align="center">……，<code>x&gt;y</code></td></tr><tr><td align="center"><code>less&lt;T&gt;</code></td><td align="center">关系</td><td align="center">……，x&lt;y&#96;</td></tr><tr><td align="center"><code>greater_equal&lt;T&gt;</code></td><td align="center">关系</td><td align="center">……，x&gt;&#x3D;y&#96;</td></tr><tr><td align="center"><code>less_equal&lt;T&gt;</code></td><td align="center">关系</td><td align="center">……，<code>x&lt;=y</code></td></tr><tr><td align="center"><code>logical_and&lt;T&gt;</code></td><td align="center">逻辑</td><td align="center">……，x&amp;&amp;y&#96;</td></tr><tr><td align="center"><code>logical_or&lt;T&gt;</code></td><td align="center">逻辑</td><td align="center">……，x||y&#96;</td></tr><tr><td align="center"><code>logical_not&lt;T&gt;</code></td><td align="center">逻辑</td><td align="center">……，!x&#96;</td></tr></tbody></table><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//利用STL中二元谓词函数对象</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;functional&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> intArr[] = &#123; <span class="hljs-number">30</span>,<span class="hljs-number">90</span>,<span class="hljs-number">10</span>,<span class="hljs-number">40</span>,<span class="hljs-number">70</span>,<span class="hljs-number">50</span>,<span class="hljs-number">20</span>,<span class="hljs-number">80</span> &#125;;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-built_in">sizeof</span>(intArr) / <span class="hljs-built_in">sizeof</span>(intArr[<span class="hljs-number">0</span>]);<br>vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">a</span>(intArr, intArr + N);<br><span class="hljs-built_in">copy</span>(a.<span class="hljs-built_in">begin</span>(), a.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">ostream_iterator</span>&lt;<span class="hljs-type">int</span>&gt;(cout, <span class="hljs-string">&quot; &quot;</span>));<br>cout &lt;&lt; endl;<br><span class="hljs-built_in">sort</span>(a.<span class="hljs-built_in">begin</span>(), a.<span class="hljs-built_in">end</span>(),<span class="hljs-built_in">greater</span>&lt;<span class="hljs-type">int</span>&gt;());<br><span class="hljs-built_in">copy</span>(a.<span class="hljs-built_in">begin</span>(), a.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">ostream_iterator</span>&lt;<span class="hljs-type">int</span>&gt;(cout ,<span class="hljs-string">&quot; &quot;</span>));<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-3-2函数适配器"><a href="#6-3-2函数适配器" class="headerlink" title="6.3.2函数适配器"></a>6.3.2函数适配器</h4><table><thead><tr><th align="center">STL函数适配器</th><th align="center">类型</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">binder1st</td><td align="center">绑定适配器</td><td align="center">将数值绑定到二元函数的第一个参数，适配成一元函数</td></tr><tr><td align="center">binder2nd</td><td align="center">绑定适配器</td><td align="center">……二……</td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><p>为了简化，还有函数适配器辅助函数</p><table><thead><tr><th align="center">适配器辅助函数</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">bind1st</td><td align="center"></td></tr><tr><td align="center">bind2nd</td><td align="center"></td></tr><tr><td align="center">not1</td><td align="center"></td></tr><tr><td align="center">not2</td><td align="center"></td></tr><tr><td align="center">ptr_fun</td><td align="center"></td></tr><tr><td align="center">mem_fun</td><td align="center"></td></tr><tr><td align="center">mem_fun_ref</td><td align="center"></td></tr></tbody></table><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//bind2nd产生binder2nd函数适配器</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;functional&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> intArr[] = &#123; <span class="hljs-number">30</span>,<span class="hljs-number">90</span>,<span class="hljs-number">10</span>,<span class="hljs-number">40</span>,<span class="hljs-number">70</span>,<span class="hljs-number">50</span>,<span class="hljs-number">20</span>,<span class="hljs-number">80</span> &#125;;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-built_in">sizeof</span>(intArr) / <span class="hljs-built_in">sizeof</span>(intArr[<span class="hljs-number">0</span>]);<br>vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">a</span>(intArr, intArr + N);<br>vector&lt;<span class="hljs-type">int</span>&gt;::iterator p = <span class="hljs-built_in">find_if</span>(a.<span class="hljs-built_in">begin</span>(), a.<span class="hljs-built_in">end</span>(), <br><span class="hljs-built_in">bind2nd</span>(<span class="hljs-built_in">greater</span>&lt;<span class="hljs-type">int</span>&gt;(), <span class="hljs-number">40</span>));<br><span class="hljs-keyword">if</span> (p == a.<span class="hljs-built_in">end</span>()) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;0&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>cout &lt;&lt; *p &lt;&lt; endl;<br> &#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br></code></pre></td></tr></table></figure><h3 id="6-4算法"><a href="#6-4算法" class="headerlink" title="6.4算法"></a>6.4算法</h3><h4 id="6-4-1STL算法基础"><a href="#6-4-1STL算法基础" class="headerlink" title="6.4.1STL算法基础"></a>6.4.1STL算法基础</h4><h4 id="6-4-2不可变序算法"><a href="#6-4-2不可变序算法" class="headerlink" title="6.4.2不可变序算法"></a>6.4.2不可变序算法</h4><h4 id="6-4-3可变序列算法"><a href="#6-4-3可变序列算法" class="headerlink" title="6.4.3可变序列算法"></a>6.4.3可变序列算法</h4><h4 id="6-4-4排序和搜索算法"><a href="#6-4-4排序和搜索算法" class="headerlink" title="6.4.4排序和搜索算法"></a>6.4.4排序和搜索算法</h4><h4 id="6-4-5数值算法"><a href="#6-4-5数值算法" class="headerlink" title="6.4.5数值算法"></a>6.4.5数值算法</h4>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Design Patterns</title>
    <link href="/2025/02/22/design_patterns/"/>
    <url>/2025/02/22/design_patterns/</url>
    
    <content type="html"><![CDATA[<h1 id="Design-Patterns"><a href="#Design-Patterns" class="headerlink" title="Design Patterns"></a>Design Patterns</h1><blockquote><p>补充一点跟设计模式不相关的cpp多态知识。</p><ul><li><p>overload是函数重载，表示一个函数的对于输入不同参数时的不同表现。</p></li><li><p>override是函数重写，多用于重写父类的虚函数。</p></li><li><p>overwrite是函数的覆盖，直接使用与父类同名的函数名，在调用函数时就会直接使用子类的函数（子类对父类的覆盖）。</p></li><li><p><code>virtual void add();</code>虚函数，在子类中实现，子类声明该函数时为<code>void add() override;</code>实现时可以不加override。<code>void Derived::add()&#123;&#125;</code>。</p></li><li><p><code>virtual void add() = 0;</code>纯虚函数是一种特殊的虚函数。在类的定义中，纯虚函数没有函数体，它的声明结尾处使用&#x3D; 0来标识。含有纯虚函数的类是抽象类。抽象类不能被实例化，它的主要作用是为派生类提供一个接口规范，派生类必须重写（override）纯虚函数来实现具体的功能。纯虚函数，子类实现时同理。(现在我才明白cpp老师当时问的那个问题”抽象类不能实例化,能不能有非虚函数和变量?”,我当时回答是不可以,答案是可以,今天才知道这个问题是什么意思。)<br>虚类要有一个虚析构函数。</p></li></ul></blockquote><h2 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h2><!-- - 1.识别应用中会变化的方面，并将其和不变的方面分离。> 也可以认为是**把会变化的部分取出并封装，以后可以只修改或扩展这个部分，而不会影响其他部分**- 2.针对接口编程，而不是针对实现。> 使用接口来表示每一个行为，行为的每一个实现将实现其中的接口> 例如Duck的嘎嘎叫行为，可以做一个QuackBehavior类，在Duck类中添加一个QuackBehavior实例，后续实现这个类接口而不是直接使用Duck类来实现行为。- 3.优先使用组合而不是继承。>Duck不继承会嘎嘎叫的类，而是使用QuackBehavior来组合成一个Duck类- 4.尽量做到交互的对象之间的松耦合设计。- 5.类应该对扩展开放，但对修改关闭。- 6.**依赖倒置原则：**依赖抽象，不依赖具体类。> - 变量不应该持有到具体类的引用。> - 类不应该派生自具体类。> - 方法不应该覆盖其任何基类的已实现方法。- 7.最少知识原则：只和你的密友谈话。 --><ol><li><strong>依赖倒置原则</strong>：高层次的代码（稳定）不应该依赖低层次的代码（变化）、抽象的代码不应该依赖具体的代码。</li><li><strong>开放封闭原则</strong>：类模块应该开放扩展的，而其原先的代码尽量封闭不可改变。</li><li><strong>单一职责原则</strong>：一个类应该仅有一个变化的原因，该变化隐含了它的职责，职责太多时会导致扩展时对代码东拉西扯，造成混乱。</li><li><strong>替换原则</strong>：子类必须能够替换它的基类（IS-A），继承可以表达类型抽象。</li><li><strong>接口隔离原则</strong>：接口应该小而完备，不该强迫用户使用多余的方法。</li><li><strong>优先使用组合而不是继承</strong>：继承通常会让子类和父类的耦合度增加、组合的方式只要求组件具备良好定义的接口。</li><li><strong>封装变化点</strong>：</li><li><strong>针对接口编程</strong>，而不是针对实现编程。</li></ol><h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><p><strong>策略模式</strong>定义了一个算法族，分别分装起来，是的他们之间可以互相变换。策略让算法的变化独立于使用它的客户。</p><p>一般情况下，比如我们的A类有好几个计算a这一量的策略，如果要在A类中实现这么多不同的行为，选择算法就需要很多if-else，不满足复用性，当需要增加策略时需要修改源代码，违背（开放封闭原则）。</p><p>使用策略模式就可以将策略抽象出来S类抽象类，然后A类中放一个S类的指针，之后通过向该类传入不同的S类的子类（即具体的实现），实现不同的行为，同时增加策略时不需要修改A类（通过使用另外的文件实现S的子类策略也可以做到不修改已有的策略和S类增加策略）。</p><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><p><strong>观察者模式</strong>定义对象之间的一对多依赖，这样，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新。</p><p>Subject类三个vitual 函数添加删除和通知（<code>RegisterObserver(Observer o)</code>、<code>MoveObserver(Observer o)</code>、<code>NotifyObserver(Observer o)</code>），函数。</p><p>Subject子类有一个<strong>Observer类型</strong>的动态数组，存储观察者，构造函数会初始化该数组，实现父类的三个虚函数，有一个获取到更新（<code>MeasurementChanged()</code>）就调用通知函数，然后通知函数调用各个Observe类的<code>Update()</code>函数。</p><p><strong>Observe类</strong>一个vitual Update(&#x2F;&#x2F;args)函数。</p><p>Observer子类实现Update函数。</p><p>DisplayElement类，为了 方便不同Observe实现不同显示方法，可以设置一个DisplayElement类（里面只有一个virtual Display()函数），继承Observer和DisplayElement的子类需要实现自己的Update和Display函数。</p><p>因为不同组件所需数据不同，所以可以将Observer类的Update函数设置为不传参的虚函数，同时子类创建时属性要添加一个Subject子类类型的变量，当Subject子类调用Observer子类Updata函数时，因为子类实现Update函数不同而可以根据需要来使用Subject子类的数据（因为有传入的Subject类）。</p><p>观察者模式解决了什么问题？<br>解决了与<strong>依赖倒置原则</strong>冲突，例如A类的变化需要通知B类，一般的处理是将A类中添加一个B类的类成员，在A类的变化时调用该类的函数，但是这样会导致A类和B类之间的耦合度增加。（即A类编译必须依赖于B类的存在）。</p><p>而观察则模式通过将通知这一变化抽象出来一个Subject类，A类继承S类，S类有一个动态数组来存放需要通知的类，（添加、移除被通知者的函数），还有一个Notify函数，同时有一个B类抽象出一个被通知的类Observer，Observer有一个Update函数，每个B类都可以自主实现不同的Update函数。<br>以上完成后，Notify调用各个Observer的Update函数，实现了观察者模式。</p><h2 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h2><p><strong>装饰者模式</strong>动态地将额外责任附加到对象上，对于扩展功能，装饰者提供子类化之外的弹性替代方案。</p><blockquote><p>简单来说就是一个类A，之后针对类A退出了新品BC（继承自A），如何对A扩展呢？可以另外使用a（继承自A），a是从A中抽象出来扩展A的类，a中有一个属性类是A，之后对A的扩展就可以继承自a，减少对A代码的修改。如图</p></blockquote><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><h3 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h3><p><strong>工厂方法模式</strong>定义了一个创建对象的接口，但由子类决定要实例化哪个类。工厂方法让类把实例化推迟到子类。</p><p>商店类</p><p>抽象类是<code>PizzaStore</code>（<code>OrderPizza(string type);//该函数会创建pizza，然后调用CreatPizza(type)</code>  ） 、（ <code>vitual CreatPizza();</code>）<br>继承该类的两个子类位<code>NYPizzaStore</code>、<code>ChicagoPizzaStore</code>会实现<code>CreatPizza()</code>函数。<strong>两个子类的<code>CreatPizza</code>函数会通过<code>type</code>来<code>new</code>一个对应的pizza（<code>NY_cheese_pizza</code>）</strong>。</p><p>产品类</p><p>抽象类是Pizza（有属性：<code>name, dough,sauce,vector toppings</code>行为：<code>Prepare();Bake();Cut();Box();GetName()</code>）<br>继承该类的多个子类NYStyleCheesePizza、NYStylePepperonPizza、ChicagoStyleCheesePizza等，子类的构造函数会对属性修改，以及对父类行为的覆盖。</p><p>总的流程线为，先创建商店（两个子类的实例），然后使用子类的OrderPizza()函数传入type，两个子类商店的OrderPizza()函数会调用CreatPizza()函数，通过该函数来实现动态生成不同Pizza。</p><p>也就是说PizzaStore()这个商店类的OrderPizza()方法并不能实现自动根据你的地区来决定你做出的是哪一种Pizza，而是你选择了不同的不同的地区的商店，Order就会根据你选择的不同来生成不同的Pizza()。</p><p>用代码来看就是，我们创建Pizza对象时，直接就选择了地区<code>Pizza pizza = NYPizzaStore.OrderPizza(&quot;Cheese&quot;);</code>。</p><h3 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h3><p>例如一个原料生产抽象工厂A，A有各种原料的生产行为，但是A的行为都是抽象的，然后根据不同地区创建不同的B、C继承自A，BC实现具体的生产行为。</p><p>对于本题，如何将原料工厂应用到Pizza？可以给Pizza类一个B&#x2F;C的属性类，之后修改Prepare()函数，将该函数使用的原料都使用B&#x2F;C方法生产的原料。</p><blockquote><p>工厂方法和抽象工厂的区别在于，工厂方法是一个类一个工厂，而抽象工厂是一个工厂生产多个产品。<br>　比如，Pizza类有一个属性类是原料工厂，之后在Prepare()函数中使用该工厂生产的原料。</p></blockquote><h2 id="单件模式"><a href="#单件模式" class="headerlink" title="单件模式"></a>单件模式</h2><p>简单来说，单间模式就是一个只能实例化一次的类。</p><p>具体实现方法就是将类的构造函数声明为private，然后实现一个静态的公开方法，在这个方法中实现这个类的实例，这样还不够，还需要这个方法中避免创建多个实例，例如</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Class Singleton&#123;<br><span class="hljs-keyword">private</span>: <br>    <span class="hljs-type">static</span> Singleton unique_instance_;<br>    <span class="hljs-built_in">Singleton</span>();<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">static</span> Singleton <span class="hljs-title">GetInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(unique_instance_ == <span class="hljs-literal">nullptr</span>)&#123;<br>            unique_instance == <span class="hljs-keyword">new</span> <span class="hljs-built_in">Singleton</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> unique_instance_;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>比较难的点就是处理多线程情况，例如，在多线程中，可能会有多个线程同时调用GetInstance()函数，那么就会创建多个实例。（此处按下不表，请听下回分解）</p><h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><p><strong>命令模式</strong>把请求封装为对象，以便使用不同的请求、队列或者日志请求来参数化其他对象，并支持可撤销的操作。</p><p>就是每个对应的类的不同行为创建为一个命令类。例如Light的on()和off()行为创建一个LightOnCommand类和LightOffCommand类。</p><h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><p>适配器模式将一个类的接口转换为客户期望的另一个接口。适配器让原本接口不兼容的类可以合作。<br>比如缺鸭子对象，用火鸡冒充，那么就要继承于鸭子，类中有一个火鸡对象</p><h2 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h2><p>外观模式为子系统中的一组接口提供了一个统一的接口。外观定义了一个更为高级的接口，使得子系统更容易使用。</p><p>对于一组类，可以创建一个外观类，在该外观类中实现一个函数，该函数会调用其一组属性类的函数。</p><p>例如一个遥控器，遥控器可以控制电灯、风扇、音响等设备，那么可以创建一个遥控器类(该类由电灯、风扇、音响这几个类作为属性)，在该类中实现一个影音模式的函数，该函数会调用其一组属性类的函数。</p><h2 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h2><p>我感觉这个模式就是在父类中定义一个函数，然后子类继承父类，子类实现父类的函数。类图和策略模式一样，但是策略模式是让父类的函数可以实现不同的功能，而模板方法模式是让父类的函数实现相同的功能。</p><h2 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h2><p>迭代器模式提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露其内部的表示。</p><h2 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h2><p>组合模式允许你将对象组合成树形结构来表现“整体-部分”的层次结构。组合能让客户以一致的方式处理个别对象以及对象组合。</p><ul><li>Component组件： 组合模式的“根节点”，定义组合中所有对象的通用接口，可以是抽象类或接口。该类中定义了子类的共性内容。</li><li>Leaf叶子：实现了Component接口的叶子节点，表示组合中的叶子对象，叶子节点没有子节点。</li><li>Composite合成： 作用是存储子部件，并且在Composite中实现了对子部件的相关操作，比如添加、删除、获取子组件等。</li></ul><p>其实Leaf和Composite层次相同，都是一个总的Composite的子节点，不过因为Leaf和Composite重载函数的实现不同，从而实现不同的功能，却不更改其接口。</p><h2 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h2><p>状态模式允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的类。<br>描述状态模式的图有点像数字逻辑中触发器。</p><h2 id="代理模式（等到学完网络通信再说）"><a href="#代理模式（等到学完网络通信再说）" class="headerlink" title="代理模式（等到学完网络通信再说）"></a>代理模式（等到学完网络通信再说）</h2><h2 id="模型-视图-控制器"><a href="#模型-视图-控制器" class="headerlink" title="模型-视图-控制器"></a>模型-视图-控制器</h2><p>这是一个复合模式。<br>具体实现是在一个窗口中，有一个视图，一个模型，一个控制器。但是，视图和模型之间是没有直接联系的，而是通过控制器来联系的。而控制器可以和模型和视图联系起来。</p><pre><code class=" mermaid">graph TD    A[模型] --&gt; B[控制器]    B --&gt; C[视图]    C --&gt; B    B --&gt; A</code></pre>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二分算法</title>
    <link href="/2025/02/22/%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2/"/>
    <url>/2025/02/22/%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2/</url>
    
    <content type="html"><![CDATA[<p>一分为二，化繁为简</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ol><li>预处理–数组有序，不是有序则 先排序</li><li>二分查找–将数组一分为二</li><li>后处理–剩余一半数组中查找可行的范围</li></ol><h1 id="三个模板"><a href="#三个模板" class="headerlink" title="三个模板"></a>三个模板</h1><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/07/29/template_diagram.png" alt="三个模板"></p><h2 id="模板一"><a href="#模板一" class="headerlink" title="模板一"></a>模板一</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 二分查找 --- [left, right]</span><br><span class="hljs-comment">// 数组已经是有序的了!</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">binarySerach1</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (nums == null || nums.length == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>, right = nums.length - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>        <span class="hljs-comment">// 防止溢出 等同于(left + right)/2</span><br>        <span class="hljs-type">int</span> mid = left + (right - left) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (nums[mid] == target) &#123;<br>            <span class="hljs-keyword">return</span> mid;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &gt; target) &#123;<br>            <span class="hljs-comment">// target 在左区间，所以[left, middle - 1]，如果是right = mid，则划分后的区间重新包含了已经判断过的mid值</span><br>            right = mid - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// target 在右区间，所以[middle + 1, right]</span><br>            left = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="X的平方根"><a href="#X的平方根" class="headerlink" title="X的平方根"></a>X的平方根</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>给你一个非负整数 x ，计算并返回 x 的 算术平方根 。<br>由于返回类型是整数，结果只保留 整数部分 ，小数部分将被 舍去 。<br>注意：不允许使用任何内置指数函数和算符，例如 pow(x, 0.5) 或者 x ** 0.5 。</p><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>找x的平方根，其实就是找一个使n * n &lt;&#x3D; x 成立的最大的 n。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*[left,right]解法*/</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">MySqrt1</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>    <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>, right = x;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">while</span>(left &lt;= right)&#123;<br>        <span class="hljs-type">int</span> mid = (right - left) / <span class="hljs-number">2</span> + left;<br>        <span class="hljs-keyword">if</span>(mid * mid &lt;= x)&#123;<br>            ans = mid;<br>            left = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            right = mid - <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="模板二"><a href="#模板二" class="headerlink" title="模板二"></a>模板二</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 二分查找 --- [left, right)</span><br><span class="hljs-comment">// 数组已经是有序的了!</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">binarySearch2</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (nums == null || nums.length == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-comment">// 定义target在左闭右开的区间里，即：[left, right)</span><br>    <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>, right = nums.length;<br>    <span class="hljs-comment">// 因为left == right的时候，在[left, right)是无效的空间，所以使用 &lt;</span><br>    <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>        <span class="hljs-type">int</span> mid = left + (right - left) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (nums[mid] == target) &#123;<br>            <span class="hljs-keyword">return</span> mid;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &lt; target) &#123;<br>            <span class="hljs-comment">//  target 在右区间，在[middle + 1, right)中</span><br>            left = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// target 在左区间，在[left, middle)中</span><br>            right = mid;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 结束条件: left == right</span><br>    <span class="hljs-keyword">if</span> (left != nums.length &amp;&amp; nums[left] == target) <span class="hljs-keyword">return</span> left;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="X的平方根-1"><a href="#X的平方根-1" class="headerlink" title="X的平方根"></a>X的平方根</h3><h4 id="left-right-解法"><a href="#left-right-解法" class="headerlink" title="[left,right)解法"></a>[left,right)解法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*[left,right)解法*/</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">MaSqrt2</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>    <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>, right = x + <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">while</span>(l &lt; r)&#123;<br>        <span class="hljs-type">int</span> mid = (right - left) / <span class="hljs-number">2</span> + left;<br>        <span class="hljs-keyword">if</span>(mid * mid &lt;= x)&#123;<br>            ans = mid;<br>            left = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            right = mid;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="模板三"><a href="#模板三" class="headerlink" title="模板三"></a>模板三</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 二分查找 --- (left, right)</span><br><span class="hljs-comment">// 数组已经是有序的了!</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">binarySearch3</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (nums == null || nums.length == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><br>    <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>, right = nums.length - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (left + <span class="hljs-number">1</span> &lt; right) &#123;<br>        <span class="hljs-type">int</span> mid = left + (right - left) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (nums[mid] == target) &#123;<br>            <span class="hljs-keyword">return</span> mid;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &lt; target) &#123;<br>            <span class="hljs-comment">//  target 在右区间，在(middle, right)中</span><br>            left = mid;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// target 在左区间，在(left, middle)中</span><br>            right = mid;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// Post-processing:</span><br>    <span class="hljs-comment">// End Condition: left + 1 == right</span><br>    <span class="hljs-keyword">if</span> (nums[left] == target) <span class="hljs-keyword">return</span> left;<br>    <span class="hljs-keyword">if</span> (nums[right] == target) <span class="hljs-keyword">return</span> right;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="X的平方根-2"><a href="#X的平方根-2" class="headerlink" title="X的平方根"></a>X的平方根</h3><h4 id="left-right-解法-1"><a href="#left-right-解法-1" class="headerlink" title="(left,right)解法"></a>(left,right)解法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*(left,right)解法*/</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">MySqrt3</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>    <span class="hljs-type">int</span> left = <span class="hljs-number">-1</span>, right = x + <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">while</span>(left + <span class="hljs-number">1</span> &lt; right)&#123;<br>        <span class="hljs-type">int</span> mid = (right - left) / <span class="hljs-number">2</span> + left;<br>        <span class="hljs-keyword">if</span>(mid * mid &lt;= x)&#123;<br>            ans = mid;<br>            left = mid;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            right = mid;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><ol><li>初始边界left和right不同</li><li><code>while()</code>内判断条件不同</li><li>left和right后处理的不同</li></ol><p>首先明白我们二分搜索的区间是怎么划分的。</p><h2 id="初始化边界"><a href="#初始化边界" class="headerlink" title="初始化边界"></a>初始化边界</h2><ul><li><p>如果是[left,right]，那么<code>left = 0，right = nums.size() - 1</code>。这样刚好包含nums数组全部数组，如果<code>right = nums.size()</code>，则多包含了一个数组外的数</p></li><li><p>如果是[left,right)，那么<code>left = 0，right = nums.size()</code>。跟[]不同，<code>right = nums.size()</code>时才能刚好把数组包含，如果right &#x3D; nums.size() - 1，则会少一个右边界元素。</p></li><li><p>如果使(left,right)，那么<code>left = -1，right = nums.size()</code>。</p></li></ul><h2 id="while内判断条件"><a href="#while内判断条件" class="headerlink" title="while内判断条件"></a>while内判断条件</h2><p>不断将区间一分为二，当出现不合法的区间时中断循环。</p><ul><li>[left,right]，只需要判断条件合法即可，<code>left &lt;= right</code>情况可能出现，如果选择<code>left &lt; right</code>则少了一个循环</li><li>[left,right)，不可能出现<code>left = right</code>，因此<code>left&lt; right</code>即可决定循环是否中止</li><li>(left,right)，left 也不能使用left 与 right是否相等来中止循环，当<code>left - 1 = right</code>(此情况不存在)时就需要中止循环</li></ul><h2 id="left-right后处理"><a href="#left-right后处理" class="headerlink" title="left right后处理"></a>left right后处理</h2><p>根据区间类型看mid是否在二分后的区间内来决定后处理。<br>为方便处理，改为寻找与target相等的下标（为方便表述，mid代表下标为mid的数组值）</p><ul><li>[left,right]<ul><li><code>mid &lt; target</code>，如果<code>left = mid</code>，划分后的区间仍然包含已经进行判断过的mid，因此应该为mid + 1。</li><li><code>mid &gt; target</code>，如果<code>right = mid</code>，划分后的区间仍然包含…</li><li><code>mid = target</code>，找到结果，返回</li></ul></li><li>[left,right)<ul><li><code>mid &lt; target</code>，<code>left = mid</code>即可满足划分后的区间不包含判断过的mid（右开）</li><li><code>mid &gt; target</code>，<code>left = mid + 1</code>，同左闭</li><li><code>mid = target</code>，不会有这种情景，在left - 1 &#x3D; right循环就中止了</li></ul></li><li>(left,right)<ul><li><code>mid &lt; target</code>，<code>left = mid</code></li><li><code>mid &gt; target</code>，<code>right = mid</code></li><li><code>mid = target</code>，不会有这种情景，在left - 1 &#x3D; right循环就中止了</li></ul></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>对于不同的问题，以上三种模板其实都可以使用，不过是实现方法的不同而已。对于不同的问题选择不同的模板可以有助于代码的理解与实现。</p><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="搜索插入的位置"><a href="#搜索插入的位置" class="headerlink" title="搜索插入的位置"></a>搜索插入的位置</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">searchInsert</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>        <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(l &lt;= r)&#123;<br>            <span class="hljs-type">int</span> mid = (r - l) / <span class="hljs-number">2</span> + l;<br>            <span class="hljs-keyword">if</span>(nums[mid] &lt; target)&#123;<br>                l = mid + <span class="hljs-number">1</span>;<span class="hljs-comment">//如果mid一直小于targrt，则l会大于nums.size() - 1,即插入位置为末尾</span><br>            &#125; <br>            <span class="hljs-keyword">else</span>&#123;<br>                r = mid - <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> l;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>这个代码是抄的别人的，自己写的巨麻烦😫。</p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>该题相当于找最后一个小于<code>target</code>的下一个下标（或者说第一个大于或等于<code>target</code>的数组值的下标），<strong>随着循环进行，l代表的是最后一个小于<code>target</code>的下一个下标，而r代表的是第一个大于等于<code>target</code>的数组值的上一个下标</strong>，我们要返回的是最后一个小于<code>target</code>的下一个下标，即l。</p><p>对于题目要求的结果，我们要分析并总结出其对应的编程语言，并理解<code>left，right</code>对应的是什么。</p><h2 id="在排序数组中查找元素的第一个和最后一个位置"><a href="#在排序数组中查找元素的第一个和最后一个位置" class="headerlink" title="在排序数组中查找元素的第一个和最后一个位置"></a>在排序数组中查找元素的第一个和最后一个位置</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>给你一个按照非递减顺序排列的整数数组 <code>nums</code>，和一个目标值 <code>target</code>。请你找出给定目标值在数组中的开始位置和结束位置。如果数组中不存在目标值 <code>target</code>，返回 <code>[-1, -1]</code>。</p><h3 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h3><p>根据二分特性，随着循环进行，l代表的是最后一个小于<code>target</code>的下一个下标，而r代表的是大于等于<code>target</code>的上一个下标，而本题要求第一个和最后一个元素位置，因此可以使用两次二分，分别找第一个最后一个。</p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">searchRange</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>    <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> first = <span class="hljs-number">-1</span>, last = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">while</span> (l &lt;= r) &#123;<br>        <span class="hljs-type">int</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (nums[mid] == target) &#123;<br>            first = mid;<br>            r = mid - <span class="hljs-number">1</span>; <span class="hljs-comment">// 重点</span><br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &gt; target) &#123;<br>            r = mid - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            l = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 最后一个等于target的位置</span><br>    l = <span class="hljs-number">0</span>;<br>    r = nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (l &lt;= r) &#123;<br>        <span class="hljs-type">int</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (nums[mid] == target) &#123;<br>            last = mid;<br>            l = mid + <span class="hljs-number">1</span>; <span class="hljs-comment">// 重点</span><br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &gt; target) &#123;<br>            r = mid - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            l = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> vector&lt;<span class="hljs-type">int</span>&gt;&#123;first, last&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><p>还是要使用相等这一利器，不能为了用之前的方法而硬解。此题会有找不到的情况，可能越界，必须使用相等。<br>而上一题</p><h3 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h3><p>当找到<code>target</code>时，将<code>l</code>和<code>r</code>缩小，直到<code>nums[l]</code>和<code>nums[r]</code>都等于<code>target</code>，然后返回</p><p>当找不到<code>target</code>时，循环终止，直接返回<code>&#123; -1, -1&#125;</code></p><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">searchRange</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>        <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (l &lt;= r) &#123;<br>            <span class="hljs-type">int</span> mid = (r - l) / <span class="hljs-number">2</span> + l;<br>            <span class="hljs-keyword">if</span> (nums[mid] &lt; target) &#123;<br>                l = mid + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &gt; target) &#123;<br>                r = mid - <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">while</span> (nums[l] != target) &#123;<br>                    l++;<br>                &#125;<br>                <span class="hljs-keyword">while</span> (nums[r] != target) &#123;<br>                    r--;<br>                &#125;<br>                <span class="hljs-keyword">return</span> vector&lt;<span class="hljs-type">int</span>&gt;&#123;l,r&#125;;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-number">-1</span>,<span class="hljs-number">-1</span>&#125;;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="搜索旋转排序数组"><a href="#搜索旋转排序数组" class="headerlink" title="搜索旋转排序数组"></a>搜索旋转排序数组</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>整数数组 <code>nums</code> 按升序排列，数组中的值 <strong>互不相同</strong> 。<br>在传递给函数之前，<code>nums</code> 在预先未知的某个下标 <code>k</code>（<code>0 &lt;= k &lt; nums.length</code>）上进行了 <strong>旋转</strong>，使数组变为 <code>[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]</code>（下标 <strong>从 0 开始</strong> 计数）。例如， <code>[0,1,2,4,5,6,7]</code> 在下标 <code>3</code> 处经旋转后可能变为 <code>[4,5,6,7,0,1,2]</code> 。<br>给你 <strong>旋转后</strong> 的数组 <code>nums</code> 和一个整数 <code>target</code> ，如果 <code>nums</code> 中存在这个目标值 <code>target</code> ，则返回它的下标，否则返回 <code>-1</code> 。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><p>回想二分搜索的思想，一分为二，化繁为简！<br>本题刚拿到手可能会无从下手，想想该如何一分为二？</p><p>对于旋转后的数组，一分为二后一定有一半是有序的，另一半无序。<br>有序的那一半可以根据区间边界值判断target是否在该区间，无序的那一半同样可以根据边界值来判断（边界一定是最大的）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">search</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>    <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = nums.<span class="hljs-built_in">size</span>() <span class="hljs-number">-1</span>;<br><br>    <span class="hljs-keyword">while</span> (l &lt;= r)<br>    &#123;<br>        <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (target == nums[mid]) <span class="hljs-keyword">return</span> mid;<span class="hljs-comment">//因为后面都要进行判断，写在开始即可省略后面二分后的每次判断</span><br><br>        <span class="hljs-keyword">if</span> (nums[l] &lt;= nums[mid])<span class="hljs-comment">//先判断此次区间是否有序</span><br>        &#123;<span class="hljs-comment">//如果有序，先判断target是否在该区间</span><br>            <span class="hljs-keyword">if</span> (target &gt;= nums[l]<span class="hljs-comment">/*为什么是&gt;=*/</span> &amp;&amp; target &lt; nums[mid])<span class="hljs-comment">//因为区间是[]的，边界值同样要进行判断，而nums[m]在上面已经判断过相等情况了</span><br>                r = mid<span class="hljs-number">-1</span>;<span class="hljs-comment">//如果在就在该区间二分搜索</span><br>            <span class="hljs-keyword">else</span><br>                l = mid+<span class="hljs-number">1</span>;<span class="hljs-comment">//不在就调整区间，去到另一半无序区间搜索</span><br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<span class="hljs-comment">//如果前半部分无序，则后半部分有序，同样先进行判断target是否在该区间</span><br>            <span class="hljs-keyword">if</span> (target &gt; nums[mid] &amp;&amp; target &lt;= nums[r]<span class="hljs-comment">/*为什么是&lt;=*/</span>)<span class="hljs-comment">//同上</span><br>                l = mid +<span class="hljs-number">1</span>;<span class="hljs-comment">//如果在该区间，就二分搜索</span><br>            <span class="hljs-keyword">else</span><br>                r = mid <span class="hljs-number">-1</span>;<span class="hljs-comment">//如果不在就跳出</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><h2 id="寻找旋转排序数组中的最小值"><a href="#寻找旋转排序数组中的最小值" class="headerlink" title="寻找旋转排序数组中的最小值"></a>寻找旋转排序数组中的最小值</h2><h3 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h3><p>已知一个长度为 n 的数组，预先按照升序排列，经由 1 到 n 次 旋转 后，得到输入数组。例如，原数组 <code>nums = [0,1,2,4,5,6,7]</code> 在变化后可能得到：<br>若旋转 4 次，则可以得到<code> [4,5,6,7,0,1,2]</code><br>若旋转 7 次，则可以得到<code> [0,1,2,4,5,6,7]</code><br>注意，数组<code> [a[0], a[1], a[2], ..., a[n-1]]</code> 旋转一次 的结果为数组<code>[a[n-1], a[0], a[1], a[2], ..., a[n-2]]</code>。给你一个元素值 互不相同 的数组 <code>nums</code> ，它原来是一个升序排列的数组，并按上述情形进行了多次旋转。请你找出并返回数组中的 最小元素 。</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><p>题目转换一下思路，其实就是找到最后一个小于<code>ans</code>初始值的数（用到向上取整）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findMin</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>    <span class="hljs-type">int</span> ans = nums[<span class="hljs-number">0</span>];<br>    <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(l &lt;= r)&#123;<br>        <span class="hljs-type">int</span> m = (r - l + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span> + l;<br>        <span class="hljs-keyword">if</span>(nums[l] &lt; nums[m])&#123;<br>            <span class="hljs-keyword">if</span>(nums[l] &lt; ans)&#123;<br>                ans = nums[l];<br>            &#125;<br>            l = m + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span>(nums[m] &lt; ans)&#123;<br>                ans = nums[m];<br>            &#125;<br>            r = m - <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h3><p>向上取整在搜索最后一个满足条件时使用。</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>跨年</title>
    <link href="/2024/12/31/%E8%B7%A8%E5%B9%B4/"/>
    <url>/2024/12/31/%E8%B7%A8%E5%B9%B4/</url>
    
    <content type="html"><![CDATA[<h1 id="跨年"><a href="#跨年" class="headerlink" title="跨年"></a>跨年</h1><p>马上就到2025年了，按照那么一个量变到质变，数字加一总要庆祝一番，不然总少点味道。我自然脱不了，来此汇报2024年的总结。</p><p>这一年，总得来说过得糊糊迷迷，恍恍惚惚，总觉得时间还长，总想着等等、等等，一晃，一年已然逝去。此刻的我，坐在电脑屏幕前，刚洗完澡，用着最近刚买的吹风机吹了头发，总算免得顶着湿发过夜——开始写这么一段文字。写这段文字的为了什么呢？我是说的清的，但我总要在这里说——说不清，道不明白，好像留着点悬念，故意吊着愿意读这么一段字的人的胃口。</p><p>写到这里，我还是不知道要写些什么，按照时间线排列相册，每个月挑出一张做代表，才发现下半年过的多么无聊，上半年我能看到的是一个每天没事就拍照：一月是跟朋友假期出去玩的合照，二月过年啦跟家里人合照（就是这个年我才终于学会了擀饺子皮），一个完整削皮的苹果，一瓶我在高中在自动售卖机常喝的饮料（不好喝但是你要知道我们高中是没有超市的），五月想练书法结果坚持没多久就放弃（西海岸的美育通识我什么时候能选上啊），然后期末、暑期实践出去玩，暑假小学期狂玩两个月。最后就是西海岸这无聊的学期，实在无聊，就用年度歌单结尾了。</p><p>就这样，在地球无休止围绕太阳旋转之时，我也无休止的在地球上跳动着心脏，过了这一天，世界并不会有什么变化，甚至因为时差，全球各地这一天都不是同一天到来，但是有什么关系呢，人们并不会在知道一年只是地球围绕太阳一圈这一枯燥事实而放弃跨年的热情，到一个新的年度，我们依然会许下一个愿望，这个愿望在一年的第一天就被种下，在一整年的成长后，不管是庆幸能坚持下来，又或许是嘲笑当时许下这一愿望的自己，我们能回过头，完完整整的在一年的风吹雨打中熬过，与家人无论何时一通电话，在娱乐时无视距离与朋友游戏，一年下来平均日进一毫，就是这一年无与伦比、对你自己意义非凡的意义。</p>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/11/09/%E6%84%8F%E4%B9%89/"/>
    <url>/2024/11/09/%E6%84%8F%E4%B9%89/</url>
    
    <content type="html"><![CDATA[<h1 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h1><p>迷宫饭，长这么大看过的最又好玩的漫画，因为丰富的世界观而了解，最后为其简单而蕴含的意义而喜欢上这本漫画。</p><p>很丰富很丰富的内容，很符合我对异世界的幻想——充满着让人向往的事物，但这些东西只是表面。这个世界有不同的种族，但歧视并没有消失；这个世界有魔法，但奴隶仍然存在；这个世界有让人不死的迷宫，但进入迷宫后人的欲望会的无限。迷宫因为欲望而存在，人们因为欲望可以被迷宫实现而来到迷宫。</p><p>这本漫画的作者我认为他应该看过阿弗雷德·阿德勒的《自卑与超越》，里面的每一个人最后的欲望都或多或少与童年的经历有关，或因受到歧视而想要变成魔物，或因亲友离自己而去而想要世界所有人都很长寿。每个人进入迷宫都有自己的欲望，我很开心最后每个人都有了自己的归宿。一晃眼百年过去了。</p><p>最近，我时常落入意义的圈套，常常在想生命的意义是生命。以往最近欺骗自己的言论无法继续发力。有人说，手里拿着锤子的人，看什么都像钉子，最近我看到许多书，好像都在向我传达自己的一种意义。这本《迷宫饭》、史铁生的《病隙碎笔》、还有那部《relife》番剧，刷的短视频也是《推销员之死》这样的探寻生命意义的戏剧，连最近看过的《蛤蟆先生去看心理医生》好像也在督促着我，想让我掉入意义这一圈套。所以生命的意义到底是什么？</p><p>我想起来史铁生的那句话</p><p>“过程！对，生命的意义就在于你能创造这过程的美好与精彩，生命的价值就在于你能够镇静而又激动地欣赏这过程的美丽与悲壮。”——《我与地坛》</p><p>可这么简短一句话就概括了意义二字吗，如果意义就是过程这么简单，那么古往今来不断追求美好结局的，不惜为了目的的一切一切都是错误的吗？他们连这么简单的道理也无法悟到吗？我并不认为。</p><p>想来想去，想出答案又有什么意义呢？让自己清清楚楚的过完这一生跟迷迷糊糊的过完这一生也差距不大。意义二字好像冥冥之中在空中悬着，在每个人的头顶，没人摸得着，没人看得着，但它就是真真确确存在着。在这一点上，科学和逻辑派上了用场，既然无法证伪，那么它便有着存在的可能，不过，这样的一种存在并无意义。</p><p>想来想去，我想到了自己，我为什么要想这样一个没有意义的问题呢？写到这里，我心里或许有了答案。为了逃避，我有太多太多想要做的事情，我想打游戏，但我没有打游戏的那份动力，因为在我心里，隐隐有一个声音，天天打游戏有什么意义呢？对啊，没有意义我为什么要去打那让人分泌简单多巴胺的一堆电子数据呢？我想学习，但我也没有学习的动力，学习是有意义的吧，学习成绩好所有人都会夸奖你，所有人都羡慕你，但是所以呢？学的这些课程真的有用吗？我问过两三个工作的人，都说学校学习的内容与工作差距很大。所以我要干什么呢？</p><p>其实我明白，我实在逃避，我其实有着清晰的欲望，我有着想要干的事，但是我提不起动力，长时间的多巴胺汇报无法让我满足短时的需求。</p><p>再想想，这些无用的历程其实并非无用。有这样一个说法，修一条人走的路，其实只需要修脚印就够了，其他的都空着也能走，修的多余的都没什么用。但现实是没有人这样修路，连寸步难行的山路上都有着人肩宽的台阶。无用也有着自己的用处，没有意义也是一种意义。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/10/24/%E5%BD%92%E5%B1%9E%E6%84%9F/"/>
    <url>/2024/10/24/%E5%BD%92%E5%B1%9E%E6%84%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="归属感"><a href="#归属感" class="headerlink" title="归属感"></a>归属感</h1><p>这是我过的第二个校庆。</p><p>我不知道校庆该怎么过，痛快玩一番，好像太过兴奋，少了那一份沉稳；像往常一样，这重大的时刻好像又缺少点什么。</p><p>上高二时，是高中的70年校庆，一所几乎与祖国同寿的县级一高，如果从有学校的氛围来推断校庆日是哪一天，那你大概是永远不会猜到的——因为一点活动的声音都没有，准确来说，一点与学生相关的活动都没有，或许老师或者领导对这一伟大时刻可以围桌把酒言欢，或许学校在这一天开心，将未发的工资清算一部分。我不了解，反正这一时刻对于我们学生是一点感知都没有。</p><p>到了大学，这里与我想象的颇为不同，学校的各种校规也让学生哀声载道，学校却从来置之不理</p><p>有时候我会从学校领导的角度来看事情，假期缩短放假时间，不合理的校规，以及学校的未来规划。可惜，以我一个尚未涉世的学生思维来看，他们的举动确实是不可理解的。好比那劳动法，调休来的假期，教育局等等，聊胜于无。对于这些，我都无法理解，这些不合逻辑的事情为什么会从一步步爬上去的领导口中提出，他们肯定不是蠢人，但是为何劳动法无法落实？调休的必要性在哪里？多放的几天假期对于工作日真的很多吗？</p><pre><code class=" mermaid"></code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/10/09/%E5%8F%A3%E6%B0%B4%E9%B8%A1/"/>
    <url>/2024/10/09/%E5%8F%A3%E6%B0%B4%E9%B8%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="口水鸡"><a href="#口水鸡" class="headerlink" title="口水鸡"></a>口水鸡</h1><p>今日无事，正常上课。</p><p>昨天晚上，定好的7：10分闹钟，11：30便准备入睡，打算早起，并早点到了教室，赶在概论老师上课之前，补一补昨天晚上因为游戏而耽误的大英作业，可是人算不如天算——有意识时已经是7：50。</p><p>终于上完了大英，侥幸老师因为国庆假期饶我们一命。早早就咕咕叫的肚子，千等万等，终于等到了午饭时间，没有一点迟疑，三步并两步，两步并一步，以竞走冠军的姿态赶到餐厅，不留一会喘息，大眼一瞧，还好，口水鸡队伍前只有二三人，不卸下背包，便匆匆排上队伍，拿出手机，调出付款码，未等她询问，便迅速抢答——“一份爽口擂椒鸡，在这吃”。不需一二个呼吸，擂椒鸡便已将到你手上，随便找个位置（大多是与人拼桌，中午实在人多），坐下，卸下背上累赘，脱掉外套，脱下眼睛，摘掉耳机，将手机放到一边——是不可去翻看的，再将米饭盖到口水鸡上，搅拌完全，终于——到了开吃的环节。</p><p>一口下去，劳累和饥饿烟消云散，多巴胺冲击着大脑神经，汁水与米饭混匀，恰到好处的擂椒让鸡肉多了一层风味。鸡肉不知是如何处理的，看着像水煮鸡肉缺不柴不干；拿勺子一翻——黄瓜，果然，这份爽口大餐不能没有它的身影，夏日解渴避暑比赛，爽口多汁的黄瓜要摘得桂冠易如反掌。满足！但好像缺点什么，没错，我看向旁边这一份随餐配备的冰红茶，只一小碗，不够可以再添，碗底可见一些茶叶渣，虽然不是什么好茶叶，更不会给你用上好的冰糖，但这份冰冰凉凉，却是不可多让的。一口饮尽，或者分两三口，呼一口凉气，这项工作才算完毕。</p><p>打开手机，与下课不过才过1刻钟而已。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/10/08/%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%94%B5%E8%84%91%E6%97%A0WiFi%E7%83%AD%E7%82%B9%E6%8C%89%E9%94%AE%E4%BF%AE%E5%A4%8D%E5%8E%86%E7%A8%8B/"/>
    <url>/2024/10/08/%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%94%B5%E8%84%91%E6%97%A0WiFi%E7%83%AD%E7%82%B9%E6%8C%89%E9%94%AE%E4%BF%AE%E5%A4%8D%E5%8E%86%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="笔记本电脑无WiFi热点按键修复历程"><a href="#笔记本电脑无WiFi热点按键修复历程" class="headerlink" title="笔记本电脑无WiFi热点按键修复历程"></a>笔记本电脑无WiFi热点按键修复历程</h1><p>今天打开久违的笔记本，发现找不到WiFi按键了。有过安装网卡和驱动的经验，我敏锐感觉到应该是掉驱动了。想要安装驱动需要联网，但是驱动我又连不了网络。😅 ，又苦于没有带C2C数据线，手机下载传到电脑也被否决。</p><p>回到宿舍，才是噩梦的开始。我一共尝试了如下办法。</p><ol><li>卸载设备重启，无果</li><li>联想电脑管家修复程序，无果</li><li>多次重启，无果</li><li>安装intel对应型号网卡的驱动，我的是intel WiFi6E AX211，无法解决。</li><li>联想官网安装原厂驱动，无果</li><li>重置BIOS，无果</li><li>启用WLAN autoConfig，无果</li><li>禁用Hyper-V虚拟化，无果</li><li>腾讯电脑管家修复程序，无果</li></ol><p>此时，我面临着两条路，重装系统和拆机重装网卡。两者无疑是成本巨大。</p><p>好在，天无绝人之路，好似有天人指引，在那冥冥之中似有天意，死去的记忆开始攻击我的大脑皮层，忽然，我想起了上次使用笔记本时，偶然删除的一些.开头的隐藏文件，遂灵光乍现，打开回收站，还好还好，还好我没有经常清理回收站的习惯，回收站，启动！</p><p>不幸的是，恢复程序后仍无果。🤗</p><p>在我绝望之际，我想到了错误报告，里面是有错误代码的，上网一搜，果不其然，有仁兄相同遭遇。</p><p><a href="https://www.bilibili.com/read/cv23142191/#:~:text=%E7%BD%91%E5%8D%A1%E5%9E%8B%E5%8F%B7%EF%BC%9AIntel">Windows仍在设置此设备的类配置(代码：56)（即网卡无法使用）的详细解决方法</a></p><p>与他的方法不同，我用的是VMware workstation pro的修复程序，打开安装包文件夹，还好还好，还好我有着保存安装包的习惯，不用再花时间重新找安装包。启动，修复！</p><p>终于解决。呼~</p><p>感谢互联网，感谢党和国家，感谢开源，感谢bilibili。没有你们，今天怕是睡不着了。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>社会生存法则</title>
    <link href="/2024/09/28/%E7%A4%BE%E4%BC%9A%E7%94%9F%E5%AD%98%E6%B3%95%E5%88%99/"/>
    <url>/2024/09/28/%E7%A4%BE%E4%BC%9A%E7%94%9F%E5%AD%98%E6%B3%95%E5%88%99/</url>
    
    <content type="html"><![CDATA[<h1 id="社会生存法则"><a href="#社会生存法则" class="headerlink" title="社会生存法则"></a>社会生存法则</h1><p>最近看了很多书，原因无他，月底没流量了，被迫的。</p><p>看的很多是关于讨论职场和官场的小说，一个叫《长安的荔枝》、一个叫《组织部来了个年轻人》，还有一个不太沾边的《一个叫欧维的男人准备去死》。</p><p>无论是害李善德的一众同事，背后手眼通天救他的贵人，无论是林震一腔热血、整顿官场的信念，还是白衬衫颠倒黑白、沆瀣一气，都让我感到无比的震撼与无力。看着两本书之前我像林震那般对一切腐败和怠政义愤填膺，对不能一心一意为百姓服务的人吸血官员愤愤不平。但看完我有了些许改观。</p><p>这就是这个世界的生存法则，你不得不承认，并且你不得不遵循。《组织部来了个年轻人》是上世纪六七十年代的书，放到现在依然可以适用。结局是一个开放式结局，说林震要从今天改变这个法则。我想这个结局现在看来已然有了回答，什么都没变，官场还是那样，职场还是那样，没有说因为一个热血青年，一个愣头青改变一丝一毫。</p><p>最近在看《太白金星有点烦》，一本描绘西游背后故事的故事。在这本书里，师徒四人的每一难都是安排好的，都是妖怪按照剧本演下去的。里面的李长庚，通过自己在天庭混迹的这么多年，与观音斗智斗勇，与其他同事互相推诿，灵山和鹫峰的利害，玉帝和释迦等一众领导的责任划分，命令的模棱两可（作为手下，你得自己去悟，悟错了是你自己没有理解领导意思，做对了是领导领导有方）。说实话，看的很震撼。</p>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂谈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/09/19/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    <url>/2024/09/19/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/09/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80/"/>
    <url>/2024/09/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/09/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    <url>/2024/09/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello Git!</title>
    <link href="/2024/08/29/Hello%20Git!/"/>
    <url>/2024/08/29/Hello%20Git!/</url>
    
    <content type="html"><![CDATA[<h1 id="Hello-Git"><a href="#Hello-Git" class="headerlink" title="Hello Git!"></a>Hello Git!</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># merge conflicts</span><br><br><span class="hljs-comment"># 测试，这是在master分支</span><br><span class="hljs-comment"># 测试在readme-re的提交!</span><br><span class="hljs-comment"># 测试，解决冲突</span><br><span class="hljs-comment"># 测试解决merge冲突</span><br></code></pre></td></tr></table></figure><p>简单的常用指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">git status<span class="hljs-comment"># 查看当前文件状态</span><br>git branch<span class="hljs-comment"># 查看分支情况</span><br>git branch new-branch<span class="hljs-comment"># 创建新分支</span><br>git switch branch-name<span class="hljs-comment"># 切换到该分支</span><br>git switch -c new-branch<span class="hljs-comment"># 创建并切换到该分支</span><br>git addfilename<span class="hljs-comment"># 将文件提价到缓存区</span><br>git add -A<span class="hljs-comment"># 将所有更新的文件添加</span><br>git commit<span class="hljs-comment"># 将缓存区的文件提交到分支上</span><br>git commit -m <span class="hljs-string">&quot;a commit message&quot;</span> <span class="hljs-comment"># 同上，不过直接指定message内容为&quot;&quot;内内容</span><br></code></pre></td></tr></table></figure><h2 id="再本地提交树上移动"><a href="#再本地提交树上移动" class="headerlink" title="再本地提交树上移动"></a>再本地提交树上移动</h2><h3 id="HEAD分离"><a href="#HEAD分离" class="headerlink" title="HEAD分离"></a>HEAD分离</h3><p>HEAD一般是对当前分支的符号引用，指向你正在其基础上进行工作的提交记录。HEAD 总是指向当前分支上最近一次提交记录。大多数修改提交树的 Git 命令都是从改变 HEAD 的指向开始的。</p><p>HEAD 通常情况下是指向分支名的（如 bugFix）。在你提交时，改变了 bugFix 的状态，这一变化通过 HEAD 变得可见。</p><p><img src="/image/Hello-Git/Hello-Git-01.png" alt="Hello-Git-01"></p><p>如果运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git switch c1<span class="hljs-comment"># 将HEAD分离出来</span><br></code></pre></td></tr></table></figure><p><img src="/image/Hello-Git/Hello-Git-02.png" alt="Hello-Git-02"></p><h3 id="相对引用"><a href="#相对引用" class="headerlink" title="相对引用"></a>相对引用</h3><p>我们直接使用指定哈希值来移动，例如一次提交值为<code>fed2da64c0efc5293610bdd892f82a58e8cbc5d8</code>，可以使用git switch fed2来使HEAD指向此提交</p><p>不过，相对引用解决了这样指定的问题，可以使用<code>HEAD^</code>来表示向上移动一个提交记录，<code>HEAD~3</code>等来移动多个单位。</p><p>这个操作符可以反复在节点名称后，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git switch main^<br></code></pre></td></tr></table></figure><p><img src="/image/Hello-Git/Hello-Git-01.png" alt="Hello-Git-03"></p><p><img src="/image/Hello-Git/Hello-Git-04.png" alt="Hello-Git-04"></p><h3 id="撤销变更"><a href="#撤销变更" class="headerlink" title="撤销变更"></a>撤销变更</h3><p>git reset和git revert</p><p>git reset 通过把分支记录回退几个提交记录来实现撤销改动。你可以将这想象成“改写历史”。<code>git reset</code> 向上移动分支，原来指向的提交记录就跟从来没有提交过一样。</p><p><img src="/image/Hello-Git/Hello-Git-05.png" alt="Hello-Git-05"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git reset HEAD^<br></code></pre></td></tr></table></figure><p><img src="/image/Hello-Git/Hello-Git-06.png" alt="Hello-Git-06"></p><p>git revert 虽然在你的本地分支中使用 <code>git reset</code> 很方便，但是这种“改写历史”的方法对大家一起使用的远程分支是无效的！为了撤销更改并<strong>分享</strong>给别人，我们需要使用 <code>git revert</code>。</p><p><img src="/image/Hello-Git/Hello-Git-07.png" alt="Hello-Git-07"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git revert HEAD<br></code></pre></td></tr></table></figure><p><img src="/image/Hello-Git/Hello-Git-08.png" alt="Hello-Git-08"></p><p>可以看到多了一个新提交，这个提交就是用来撤销c2的更改的，此时c2‘的状态与c1相同。</p><h2 id="远程提交"><a href="#远程提交" class="headerlink" title="远程提交"></a>远程提交</h2><p>将一个本地仓库提交到远程，只需要</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote add origin &lt;remote-repository-url&gt;<br></code></pre></td></tr></table></figure><p>然后将自己的本地内容全部push到远程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push -u origin main  <span class="hljs-comment"># 将main推送到远程并设置跟踪分支</span><br></code></pre></td></tr></table></figure><p>之后本地就多了一个远程分支，当切换到远程分支，自动进入分离HEAD状态，这么做是出于不能直接在这些分支上进行操作的原因, 你必须在别的地方完成你的工作, （更新了远程分支之后）再用远程分享你的工作成果。</p><p>开始前，需要确认自己的本地代码库是新的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git pull origin main  <span class="hljs-comment"># 拉取远程main分支的最新更改</span><br></code></pre></td></tr></table></figure><p>这一步会将远程仓库中 <code>main</code> 分支的最新更新拉取并合并到本地 <code>main</code> 分支中。</p><h3 id="创建新分支"><a href="#创建新分支" class="headerlink" title="创建新分支"></a>创建新分支</h3><p>新功能或修复通常在新的分支上进行，以保持 <code>main</code> 分支的稳定性：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout -b feature-branch  <span class="hljs-comment"># 创建并切换到新分支</span><br></code></pre></td></tr></table></figure><p>这里 <code>feature-branch</code> 是你为新功能或修复创建的分支名称。</p><h3 id="开发和提交更改"><a href="#开发和提交更改" class="headerlink" title="开发和提交更改"></a>开发和提交更改</h3><p>在新分支上进行开发，并且在完成一定的工作后提交更改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add .  <span class="hljs-comment"># 添加所有更改</span><br>git commit -m <span class="hljs-string">&quot;Implement new feature X&quot;</span>  <span class="hljs-comment"># 提交更改</span><br></code></pre></td></tr></table></figure><h3 id="推送分支到远程仓库"><a href="#推送分支到远程仓库" class="headerlink" title="推送分支到远程仓库"></a>推送分支到远程仓库</h3><p>将你的分支推送到远程仓库，以便进行代码审查或与其他团队成员共享：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push origin feature-branch<br></code></pre></td></tr></table></figure><h3 id="创建Pull-Request-PR"><a href="#创建Pull-Request-PR" class="headerlink" title="创建Pull Request (PR)"></a>创建Pull Request (PR)</h3><ul><li>在远程仓库管理平台（如GitHub、GitLab、Bitbucket等）上，为你的 <code>feature-branch</code> 创建一个Pull Request (PR)。</li><li>代码审查：团队成员可以审查你的更改，提出建议或进行讨论。</li><li>合并：一旦PR通过审查并获得批准，它将被合并到 <code>main</code> 分支中。</li></ul><h3 id="同步本地仓库"><a href="#同步本地仓库" class="headerlink" title="同步本地仓库"></a>同步本地仓库</h3><p>合并PR后，需要将最新的 <code>main</code> 分支同步到你的本地仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout main<br>git pull origin main  <span class="hljs-comment"># 拉取最新的main分支</span><br></code></pre></td></tr></table></figure><h3 id="删除本地和远程的临时分支"><a href="#删除本地和远程的临时分支" class="headerlink" title="删除本地和远程的临时分支"></a>删除本地和远程的临时分支</h3><ul><li><p>删除本地分支</p><p>（如果不再需要）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git branch -d feature-branch<br></code></pre></td></tr></table></figure></li><li><p>删除远程分支</p><p>（通常由仓库管理员或通过平台操作完成）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push origin --delete feature-branch<br></code></pre></td></tr></table></figure></li></ul><h3 id="总结的工作流"><a href="#总结的工作流" class="headerlink" title="总结的工作流"></a>总结的工作流</h3><ol><li>**<code>git pull origin main</code>**：从远程仓库拉取最新的 <code>main</code> 分支的更新。</li><li>**<code>git checkout -b &lt;branch-name&gt;</code>**：为新功能或修复创建并切换到新分支。</li><li>**<code>git add</code> 和 <code>git commit</code>**：在新分支上开发并提交更改。</li><li>**<code>git push origin &lt;branch-name&gt;</code>**：将分支推送到远程仓库。</li><li><strong>Pull Request</strong>：创建一个PR，等待代码审查并合并到 <code>main</code>。</li><li>**<code>git pull origin main</code>**：合并后，同步本地 <code>main</code> 分支。</li><li><strong>删除分支</strong>：清理不再需要的分支。</li></ol><p>同时，远程仓库命名规范为<code>&lt;remote name&gt;/&lt;branch name&gt;</code>，不过，当你使用git clone 后，git会帮你把远程仓库设置为origin</p><p>当我们切换到远程分支后，此时git commit不会更新o&#x2F;main，只有在远程仓库对应分支更新后才会更新远程此远程分支。</p><h2 id="从远程获取更新"><a href="#从远程获取更新" class="headerlink" title="从远程获取更新"></a>从远程获取更新</h2><p>git fetch 是直接从远程回去最新更新，而本地没有</p><p><img src="/image/Hello-Git/Hello-Git-09.png" alt="Hello-Git-09"></p><p>使用git fetch后会变成</p><p><img src="/image/Hello-Git/Hello-Git-10.png" alt="Hello-Git-10"></p><ol start="3"><li><h4 id="如果远程分支是如图，而本地分支已经在此分支上提交了更新，此时需要git-fetch获取更新后再使用git-merge合并，这两条命令等同于git-pull"><a href="#如果远程分支是如图，而本地分支已经在此分支上提交了更新，此时需要git-fetch获取更新后再使用git-merge合并，这两条命令等同于git-pull" class="headerlink" title="如果远程分支是如图，而本地分支已经在此分支上提交了更新，此时需要git fetch获取更新后再使用git merge合并，这两条命令等同于git pull"></a>如果远程分支是如图，而本地分支已经在此分支上提交了更新，此时需要git fetch获取更新后再使用git merge合并，这两条命令等同于git pull</h4></li></ol><p><img src="/image/Hello-Git/Hello-Git-11.png" alt="Hello-Git-11"></p><p><img src="/image/Hello-Git/Hello-Git-12.png" alt="Hello-Git-12"></p><h2 id="将本地更新提交到远程"><a href="#将本地更新提交到远程" class="headerlink" title="将本地更新提交到远程"></a>将本地更新提交到远程</h2><p>我们在本地做出了一些更新和提交，此时可以看到o&#x2F;main分支与远程仓&#x3D;仓库同步，而main分支仍处于main状态</p><p><img src="/image/Hello-Git/Hello-Git-13.png" alt="Hello-Git-13"></p><p>使用git push后，可以看到最新的更新被同步到了远程仓库的main分支，而本地的远程分支也更新到了与main分支同步</p><p><img src="/image/Hello-Git/Hello-Git-14.png" alt="Hello-Git-14"></p><p>当我们使用git push时，可能会遇到本地在c1的基础上提交了c3，而远程仓库已经有了c2，此时使用git push会失败。</p><p><img src="/image/Hello-Git/Hello-Git-15.png" alt="Hello-Git-15"></p><p>如果我们使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git fetch<br>git rebase o/main<br><span class="hljs-comment"># 前两行等同于git pull --rebase</span><br>git push<br></code></pre></td></tr></table></figure><p>后，先获取最新更新，然后将我们的提交rebase 到最新更新上，最后再git push就可以了。</p><p>同理git merge有同样的效果，不过具体的实现过程不同</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git fetch<br>git merge o/main<br><span class="hljs-comment"># 前两行等同于git pull</span><br>git push<br></code></pre></td></tr></table></figure><p><img src="/image/Hello-Git/Hello-Git-16.png" alt="Hello-Git-16"></p><p><img src="/image/Hello-Git/Hello-Git-17.png" alt="Hello-Git-17"></p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小明和王猫</title>
    <link href="/2024/08/22/%E5%B0%8F%E6%98%8E%E5%92%8C%E7%8E%8B%E7%8C%AB/"/>
    <url>/2024/08/22/%E5%B0%8F%E6%98%8E%E5%92%8C%E7%8E%8B%E7%8C%AB/</url>
    
    <content type="html"><![CDATA[<p>少有的极其讽刺切具有教育意义的动画，包含着对现代教育的讽刺，对自我的探索，对未来的规划，该如何诚信，真正的学习是怎么样的，还有着对生与死的讨论。</p><p>小时候，我也曾像小明般想这想那，并没有人真正再教导我，父母只会说什么是我该做的，什么是不该做的，可我实在不明白。</p><p>小明是个聪明的孩子，聪明到与实际太远。没有人教导，却还能够在胜过张伟后仍有谦虚的心。我肯定不能做到，我是个浅薄的人，藏不住事，老实说就是比较傻，啥事都写脸上。我实在羡慕小明的自理，也实在羡慕张伟能这么喜欢学习。</p><p>作为一部家庭教育的动漫，却主要以小孩子的视角，大量写出了小孩子看不到不能体会的大人的心里描写，也写出了大人不能理解的小孩子的心理。这样说有点奇怪，大人也曾是小孩啊，为什么却不能体会小孩子的心情呢，不知道在哪听过，“每个人都曾是小孩，不过只有少部分人记得”。</p><p>大人望子成龙的心情大家都能理解，每个大人都可以冠冕堂皇的说出为孩子好之类的话，大人用自己的认知来管教孩子，可是虎父无犬子这句话也可以反过来说犬父无犬子啊，都想着下一代去实现自己没能实现的东西，未免有点妄想。不过，事情总不能一概而论，孩子最需要的是陪伴和爱，在这些之后是管教，都说人本恶，我却只是认为那不过是人的兽性罢了。</p>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>观后感</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/06/05/C++%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    <url>/2024/06/05/C++%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h2 id="文件输入输出"><a href="#文件输入输出" class="headerlink" title="文件输入输出"></a>文件输入输出</h2><p>fstream创建对象可用于输入输出</p><p>ifstream创建对象用于输出，即从文件读取数据</p><p>ofstream创建对象用于输入，向文件输入数据</p><h2 id="文件打开"><a href="#文件打开" class="headerlink" title="文件打开"></a>文件打开</h2><table><thead><tr><th align="center">模式</th><th>描述</th></tr></thead><tbody><tr><td align="center">ios::app</td><td>写入都追加到文件末尾</td></tr><tr><td align="center">ios::ate</td><td>文件打开后定位到文件末尾</td></tr><tr><td align="center">ios::in</td><td>打开文件用于读取</td></tr><tr><td align="center">ios::out</td><td>打开文件用于写入</td></tr><tr><td align="center">ios::trunc</td><td>如果该文件已经存在，其内容将在打开文件之前被截断，即把文件长度设为 0。</td></tr></tbody></table><p>以上模式可以组合使用。</p><h2 id="文件关闭"><a href="#文件关闭" class="headerlink" title="文件关闭"></a>文件关闭</h2><pre><code class=" mermaid">graph TBA[开始] --&gt; B[从键盘输入10个整数]B --&gt; C[将前5个整数存放到first.dat]C --&gt; D[将后5个整数存放到second.dat]D --&gt; E[从second.dat读取5个整数]E --&gt; F[存放到first.dat文件原有数据的后面]F --&gt; G[从first.dat读取10个整数]G --&gt; H[升序排列]H --&gt; I[写回second.dat]I --&gt; J[输出second.dat的所有整数]J --&gt; K[结束]</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>真情</title>
    <link href="/2024/05/18/%E7%9C%9F%E6%83%85/"/>
    <url>/2024/05/18/%E7%9C%9F%E6%83%85/</url>
    
    <content type="html"><![CDATA[<p>之前看三体的时候，我还在上高中，并不真正理解叶文洁为什么要毁灭人类，我对她感到揪心，感到难以理解。在之后程心优柔寡断害的人类沦落为三体人的殖民地，我感到些许愤怒。</p><p>后来我看到了社会上的一些不公，看到战争导致的狼藉，看到了政客为了私利而草菅人命、满口谎言。我愤世嫉俗，我无能为力。偶然间，我也会想，就这样的烂世界，反正都要化为一堆土，大家一起毁灭吧，哈哈。但我最终没有这样想，我想，人间有很多真情在。母亲看着孩子在床头睡得正香，丈夫在外工作回家带来的一些小惊喜，为了</p><p>世界上到处都是不公，好人不一定有好报，坏人也有过的好的。对那些可恨的人，我会感到可怜，我相信人是本善的，不过从出生后，我们就在学习外界。那些可恨必然有原因，不过他们依然可恨，不然对不起那些被他们伤害的人。可是，我对那些恶人不能受到应有的惩罚而愤怒，他们</p>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂谈</tag>
      
      <tag>观后感</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一具体就深刻</title>
    <link href="/2024/05/15/%E4%B8%80%E5%85%B7%E4%BD%93%E5%B0%B1%E6%B7%B1%E5%88%BB/"/>
    <url>/2024/05/15/%E4%B8%80%E5%85%B7%E4%BD%93%E5%B0%B1%E6%B7%B1%E5%88%BB/</url>
    
    <content type="html"><![CDATA[<p>最近很焦虑，可能因为自己一直在堕落，我不知道自己想要学什么，未来很迷茫。其实是自己沉迷在网络世界无法自拔，享受着短暂的多巴胺带来的快感。</p>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂谈</tag>
      
      <tag>观后感</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我与地坛</title>
    <link href="/2024/05/03/%E6%88%91%E4%B8%8E%E5%9C%B0%E5%9D%9B/"/>
    <url>/2024/05/03/%E6%88%91%E4%B8%8E%E5%9C%B0%E5%9D%9B/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>书</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读后感</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C+笔记(2):const和static</title>
    <link href="/2024/05/03/C+%E7%AC%94%E8%AE%B0(2)const%E5%92%8Cstatic/"/>
    <url>/2024/05/03/C+%E7%AC%94%E8%AE%B0(2)const%E5%92%8Cstatic/</url>
    
    <content type="html"><![CDATA[<h2 id="const用法"><a href="#const用法" class="headerlink" title="const用法"></a>const用法</h2><h3 id="常量变量声明"><a href="#常量变量声明" class="headerlink" title="常量变量声明:"></a>常量变量声明:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;  <span class="hljs-comment">// a 是一个常量变量,值不可改变</span><br></code></pre></td></tr></table></figure><h3 id="常量指针"><a href="#常量指针" class="headerlink" title="常量指针:"></a>常量指针:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> x = <span class="hljs-number">10</span>, y = <span class="hljs-number">20</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span>* p1 = &amp;x;  <span class="hljs-comment">// p1 指向的值不可修改,但 p1 本身可以修改</span><br><span class="hljs-type">int</span>* <span class="hljs-type">const</span> p2 = &amp;x;  <span class="hljs-comment">// p2 指向的地址不可修改,但 p2 指向的值可以修改</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span>* <span class="hljs-type">const</span> p3 = &amp;x;  <span class="hljs-comment">// p3 既不可以修改指向的地址,也不可以修改指向的值</span><br></code></pre></td></tr></table></figure><h3 id="函数参数声明为常量"><a href="#函数参数声明为常量" class="headerlink" title="函数参数声明为常量:"></a>函数参数声明为常量:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-comment">// 函数内部不能修改 x 的值</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="类数据成员声明为常量"><a href="#类数据成员声明为常量" class="headerlink" title="类数据成员声明为常量:"></a>类数据成员声明为常量:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">MyClass</span>(<span class="hljs-type">int</span> value) : <span class="hljs-built_in">m_value</span>(value) &#123;&#125;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> m_value;  <span class="hljs-comment">// 类内部常量成员</span><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="const-成员函数"><a href="#const-成员函数" class="headerlink" title="const 成员函数:"></a>const 成员函数:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> m_value; &#125;  <span class="hljs-comment">// const 成员函数不能修改类成员变量</span><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> m_value;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="static用法"><a href="#static用法" class="headerlink" title="static用法"></a>static用法</h2><h3 id="静态局部变量"><a href="#静态局部变量" class="headerlink" title="静态局部变量:"></a>静态局部变量:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">incrementCount</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 静态局部变量</span><br>    count++;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Count: &quot;</span> &lt;&lt; count &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">incrementCount</span>();  <span class="hljs-comment">// Output: Count: 1</span><br>    <span class="hljs-built_in">incrementCount</span>();  <span class="hljs-comment">// Output: Count: 2</span><br>    <span class="hljs-built_in">incrementCount</span>();  <span class="hljs-comment">// Output: Count: 3</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个例子中,每次调用<code>incrementCount()</code>函数时,静态局部变量<code>count</code>的值都会保持并递增,而不是在函数退出时重置为0。</p><h3 id="静态全局变量"><a href="#静态全局变量" class="headerlink" title="静态全局变量:"></a>静态全局变量:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// file1.cpp</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> value = <span class="hljs-number">10</span>;  <span class="hljs-comment">// 静态全局变量</span><br><br><span class="hljs-comment">// file2.cpp</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> value;  <span class="hljs-comment">// 声明外部静态全局变量</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Value: &quot;</span> &lt;&lt; value &lt;&lt; std::endl;  <span class="hljs-comment">// Output: Value: 10</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个例子中,<code>file1.cpp</code>中定义了一个静态全局变量<code>value</code>,在<code>file2.cpp</code>中通过<code>extern</code>关键字声明并访问该变量。由于<code>value</code>是静态全局变量,因此它的作用域仅限于<code>file1.cpp</code>内部。</p><h3 id="静态成员变量"><a href="#静态成员变量" class="headerlink" title="静态成员变量:"></a>静态成员变量:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> count;  <span class="hljs-comment">// 静态成员变量</span><br><br>    <span class="hljs-built_in">MyClass</span>() &#123;<br>        count++;<br>    &#125;<br><br>    ~<span class="hljs-built_in">MyClass</span>() &#123;<br>        count--;<br>    &#125;<br>&#125;;<br><br><span class="hljs-type">int</span> MyClass::count = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 静态成员变量的定义</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    MyClass obj1, obj2, obj3;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Object count: &quot;</span> &lt;&lt; MyClass::count &lt;&lt; std::endl;  <span class="hljs-comment">// Output: Object count: 3</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个例子中,<code>MyClass</code>有一个静态成员变量<code>count</code>,它记录了<code>MyClass</code>对象的数量。无论创建多少个<code>MyClass</code>对象,<code>count</code>的值都会保持一致。</p><h3 id="静态成员函数"><a href="#静态成员函数" class="headerlink" title="静态成员函数:"></a>静态成员函数:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title">getCount</span><span class="hljs-params">()</span> </span>&#123;  <span class="hljs-comment">// 静态成员函数</span><br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> count;  <span class="hljs-comment">// 静态成员变量</span><br>&#125;;<br><br><span class="hljs-type">int</span> MyClass::count = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 静态成员变量的定义</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    MyClass obj1, obj2, obj3;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Object count: &quot;</span> &lt;&lt; MyClass::<span class="hljs-built_in">getCount</span>() &lt;&lt; std::endl;  <span class="hljs-comment">// Output: Object count: 3</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个例子中,<code>MyClass</code>有一个静态成员函数<code>getCount()</code>,它可以直接通过类名访问,而不需要创建对象。该函数返回静态成员变量<code>count</code>的值,表示<code>MyClass</code>对象的数量。</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《长安的荔枝》</title>
    <link href="/2024/05/03/%E9%95%BF%E5%AE%89%E7%9A%84%E8%8D%94%E6%9E%9D/"/>
    <url>/2024/05/03/%E9%95%BF%E5%AE%89%E7%9A%84%E8%8D%94%E6%9E%9D/</url>
    
    <content type="html"><![CDATA[<h1 id="一个社畜的挣扎"><a href="#一个社畜的挣扎" class="headerlink" title="一个社畜的挣扎"></a>一个社畜的挣扎</h1><p>2024.5.3凌晨读完这本书，原意是睡前读一会，结果一发不可收拾，剧情刚好到高潮处，跌宕起伏，让人不禁揪起心来。一个九品小芝麻官被安排了不可能完成的任务，从岭南运输鲜荔枝去到长安，全程五千多公里，路上险峻不可一语。刚贷款买完房子的李善德被骗进这一大坑内。</p><p>从一开始彻底绝望，去到岭南也不过想知道“就算失败，我也想知道，自己倒在距离终点多远的地方”。孤注一掷，全力以赴，终究是虔诚感动了上苍，也终究是李善德自己的本事天大。</p><p>《长安的荔枝》<br>马伯庸<br>21个笔记</p><p>◆  第二章</p><p>2024&#x2F;4&#x2F;30 发表想法<br>怎么说呢，我们跟李善德都挺像的。</p><blockquote><blockquote><p>就算失败，我也想知道，自己倒在距离终点多远的地方。</p></blockquote></blockquote><p>◆  第三章</p><p>2024&#x2F;4&#x2F;30 发表想法<br>唉，老实人啊</p><blockquote><blockquote><p>假如朝廷开一个忍气吞声科，他能轻松拿到状元。</p></blockquote></blockquote><blockquote><blockquote><p>假如朝廷开一个忍气吞声科，他能轻松拿到状元。</p></blockquote></blockquote><blockquote><blockquote><p>这一刻，他忘记了等待的贵妃，忘记了自己未知的命运，忘记了长安城市的香积贷，只想纵情歌舞，像当年一样跳一支无忧无虑的胡旋舞。</p></blockquote></blockquote><p>◆  第四章</p><blockquote><blockquote><p>说到这里，他突然再一次咳嗽起来，极其剧烈，嘴里开始浮现带血的泡沫。有老骑手过来检查了一下，摇摇头说这是把肺给生生跑炸了，油尽灯枯，没救了。李善德焦虑地搓着手，不知该说些什么才好。</p></blockquote></blockquote><p>2024&#x2F;5&#x2F;2 发表想法<br>啊这，这么委婉</p><blockquote><blockquote><p>这个积年老吏查起账来，手段实在细腻，但凡勾检到要害之处，总要反复磨算。账上收进支出，每一笔皆落到实处方肯罢休。几番腾挪互抵之后，公粮才一次全数上缴，库存为之一清。</p></blockquote></blockquote><blockquote><blockquote><p>韩洄只是个比部司小官，形势看得清楚，能做的却也不多。他思虑许久，也不知该如何破这个局，最终幽幽叹了口气：“要不，你还是赶紧回家，跟嫂子和离吧。”</p></blockquote></blockquote><p>◆  第五章</p><p>2024&#x2F;5&#x2F;3 发表想法<br>本来完整的计划，在实施路上就是这样意外重重。人永远是计划最大的变数，任何有人参与的工作都难以预知结果。</p><p>2024&#x2F;5&#x2F;2 发表想法<br>唉，我也看不懂，我何尝不是李善德呢</p><blockquote><blockquote><p>杨国忠有些不悦，但看在李善德献转运法的分上，多解释了一句：“本相已有一法</p></blockquote></blockquote><blockquote><blockquote><p>两百贯对百姓来说，是一世积蓄，对招福寺来说，只是做一次人情的成本罢了。</p></blockquote></blockquote><p>◆  第六章</p><p>2024&#x2F;5&#x2F;3 发表想法<br>2024.5.3凌晨，睡前看来一段，被吸引的不可收拾，一口气读完剩下的，爽！剧情紧张刺激，如湍急之流，但是让人心情舒畅，无阻塞憋屈之感。祝大家五一快乐吧，人生不止眼前的苟且！</p><blockquote><blockquote><p>“逃驿？！”</p></blockquote></blockquote><blockquote><p>全力以赴结果只争的这一骑荔枝，举国资源放在这一可笑之举。</p></blockquote><blockquote><blockquote><p>一骑，只有一骑。骑手正弯着脊背，全力奔驰。马背上用细藤筐装着两个瓮，瓮的外侧沾着星星点点的污渍，与马身上的明亮辔头形成鲜明对比。李善德数得没错，只有一骑，两坛</p></blockquote></blockquote><blockquote><blockquote><p>从军十年余，能无分寸功。众人贵苟得，欲语羞雷同。中原有斗争，况在狄与戎。丈夫四方志，安可辞固穷。</p></blockquote></blockquote><blockquote><blockquote><p>当真如羚羊挂角，全无痕迹。</p></blockquote></blockquote><blockquote><blockquote><p>那些愿为我粉身碎骨的小伙子都不吭声了，因为这次真的可能粉身碎骨。只有他一言不发，闷头把我背起来，然后一路走下山去。</p></blockquote></blockquote><p>2024&#x2F;5&#x2F;3 发表想法<br>呜呜呜，看哭了，都是，爱都是相互的，这就是爱情😭</p><blockquote><p>果然每一个成功男人的背后都有一个默默支持他的女人。</p></blockquote><blockquote><blockquote><p>十八年了，他在长安为了生计奔走，其实并不开心。如果这么做能让他念头通达，那便做好了。我嫁的是他，又不是长安。”<br>李夫人看向李善德的背影，嘴角露出少女般的羞涩。</p></blockquote></blockquote>]]></content>
    
    
    <categories>
      
      <category>书</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读后感</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《受戒》</title>
    <link href="/2024/04/30/%E5%8F%97%E6%88%92/"/>
    <url>/2024/04/30/%E5%8F%97%E6%88%92/</url>
    
    <content type="html"><![CDATA[<h1 id="旧时的江南"><a href="#旧时的江南" class="headerlink" title="旧时的江南"></a>旧时的江南</h1><p>​这本书是第二次看了，上次看是因为在语文课外读物中看到受戒这篇小说，特别喜欢其中无虑的语言，所以去看了他的小说集。第二次看第一感觉不是对江南的感觉，而是高中时候对江南向往的回忆。</p><blockquote><p>​无意看到了汪曾祺的小说，一下把我拉回22年的那个暑假，高二升高三的压力还未感受，百无聊赖做一些题后，在书苑里无意看到他的小说集。那天下午雨下的很大，下的匆忙，路上满是避雨的人，书苑旁公园的人也纷纷来屋檐下躲雨。我也沉浸在那个汪曾祺描画的南方的水乡，也有一点身临其境的感觉了。<br> ​半透的玻璃，能看到小孩子对着大雨好奇的眼神，我好久没见过那么大的雨了，也好久没那么想念一场雨了。记得小时候，那也是一个下午，家里莫名停电，母亲在和面蒸馍，姐姐给我推荐一个电影，千与千寻。小时候哪里看得懂，只是对电影的天马行空感到奇妙。大雨，或者是夏雨，我对你满是喜欢。匆忙的来，冲刷着空气，净化着炎热。<br>​童年真的满是幸福啊…</p></blockquote><p>​一点一点的看完了这本书，很舒服，里面的人物都是立体的。</p><p>《受戒：汪曾祺小说精选》<br>汪曾祺</p><p>◆  点评</p><p>2024&#x2F;4&#x2F;29 认为好看<br>在这日益加速的当代，看看旧时江南水乡，静静心。</p><p>◆  故里杂记</p><blockquote><p>好美好，明明没有什么对美好的描写，看到这里却让人心生暖意，平静却美好。对于现在的我们，那里简直是像世外桃源。可是小时候的我过着差不多的生活啊，那时候我也没有什么烦恼，也是同样的自由自在，那时的地头的那条河很清，很浅，只到脚踝，大人不需要担心小孩儿会溺水，在那里戏水是我们夏天一大乐趣，凉快。水清澈的是可以看到底的，大家不觉得水脏，不过在家长的教导下，还是不敢去用手捧起喝。记得学的一句话–水至清则无鱼，可是这条小河还是有些小鱼小虾呀（其实是上游的，小时候一直认为那条河就这么大）。这条河上的桥连接村里和地里，很多人往来，也不担心谁家的小孩忘记回家吃饭。桥很小，刚好能遮住阳光，桥北面是阴凉地，但是大家都不敢多走几步去到里面，好像不知从哪里传的说那里面有蛇，其实两边不过几米远，里面要是有蛇，桥南面怎么会没有？小孩儿哪懂这些，带着那份担心反而让我们的下水游戏增添一份冒险。</p></blockquote><blockquote><blockquote><p>她挎着一篮子荸荠回去了，在柔软的田埂上留了一串脚印。明海看着她的脚印，傻了。五个小小的趾头，脚掌平平的，脚跟细细的，脚弓部分缺了一块。明海身上有一种从来没有过的感觉，他觉得心里痒痒的。这一串美丽的脚印把小和尚的心搞乱了。……</p></blockquote></blockquote><blockquote><blockquote><p>“什么叫‘嗯’呀!要不要，要不要？”明子大声地说：“要!”“你喊什么!”明子小小声说：“要——!”“快点划!”</p></blockquote></blockquote><blockquote><blockquote><p>“二丫头，回家咧!”“四儿，你在哪儿哪？”“奶奶，等等我，我鞋掉了!”人们摸摸板凳，才知道：呀，露水下来了。</p></blockquote></blockquote><blockquote><blockquote><p>西挹神山爽气，东来邻寺疏钟，看吾校巍巍峻宇，连云栉比列其中。半城半郭尘嚣远，无女无男教育同。桃红李白，芬芳馥郁，一堂济济坐春风。愿少年，乘风破浪，他日毋忘化雨功!</p></blockquote></blockquote><p>2024&#x2F;4&#x2F;1 发表想法<br>其实，学生会记老师很久。因为学生的老师不多，而老师的学生很多</p><blockquote><blockquote><p>他们知道，毕业出去的学生，日后多半是会把他们忘记的。</p></blockquote></blockquote><blockquote><blockquote><p>瓦罐不离井上破，大将难免阵头亡。淹死会水的。我见天跟水闹着玩，不定哪天龙王爷就把我请了去。留下孤儿寡妇，我死在阴间也不踏实。这样多好，吃饱了一家子不饥，无牵无挂!”</p></blockquote></blockquote><p>◆  羊舍一夕</p><blockquote><blockquote><p>小吕想象，若叫自己数，一定不行，非数乱了不可!数着数着，乱了——重来；数着数着，乱了——重来!那，一天早上也出不了圈，晚上也进不了家，净来回数了!他想着那情景，不由得嘿嘿地笑起来，下结论说：</p></blockquote></blockquote><blockquote><blockquote><p>。说不出什么道理，天就是这样，老是这样，什么东西都没有，就是一片蓝。可是天上似乎隐隐地有一股什么磁力吸着你的眼睛。你的眼睛觉得很舒服，很受用，你愿意一直对着它看下去，看下去。真好看，真美，美得叫你的心感动起来。</p></blockquote></blockquote><blockquote><blockquote><p>走过一棵老葡萄架下，小吕想坐一坐。一坐下，就想躺下。躺下来，看着头顶的浓密的，鲜嫩清新的，半透明的绿叶。绿叶轻轻摇晃，变软，溶成一片，好像把小吕也溶到里面了。他眼皮一麻搭，不知不觉，睡着了。小吕头枕在一根暴出地面的老葡萄蔓上，满身绿影，睡得真沉，十四岁的正在发育的年轻的胸脯均匀地起伏着。葡萄，正在恣酣地，用力地从地里吸着水，经过皮层下的导管，一直输送到梢顶，输送到每一片伸张着的绿叶，和累累的、已经有指头顶大的淡绿色的果粒之中。——这时候，不论割破葡萄枝蔓的任何一处，都可以看出有清清的白水流出来，嗒嗒地往下滴……</p></blockquote></blockquote><blockquote><blockquote><p>一年到头的劳累，坐一天是很大的享受，也是他们迫切的需要。人，有时需要休息。他们不叫休息，就叫“坐一天”。他们去请假的理由，也是“我要坐一天”。中国的农民，对于生活的要求真是太小了。</p></blockquote></blockquote><p>◆  钓人的孩子</p><p>2024&#x2F;4&#x2F;16 发表想法<br>我也厌恶，放任自己堕落的人。</p><blockquote><p>说实话，当时看到这句话还特别义愤填膺，感觉哪个扬州人不思进取，放弃了自己的理想，放弃了自己对生活的热爱。其实我哪里有资格对别人评头论足，等到我工作或许不如他坚持的久。</p></blockquote><blockquote><blockquote><p>对这个扬州人，我没有第二种感情：厌恶!我恨他，虽然没有理由。</p></blockquote></blockquote><blockquote><blockquote><p>对这个扬州人，我没有第二种感情：厌恶!我恨他，虽然没有理由。</p></blockquote></blockquote><blockquote><blockquote><p>“椒盐饼子西洋糕!”</p></blockquote></blockquote><blockquote><blockquote><p>“捏着鼻子吹洋号!……”</p></blockquote></blockquote><p>◆  故人往事</p><blockquote><p>这篇有点教育的意味了，从情节中丰富自己的三观。</p></blockquote><blockquote><blockquote><p>我怕龙王要追查起我当蝌蚪时候的事儿呀!</p></blockquote></blockquote><blockquote><blockquote><p>一个人要兴旺发达，得有那么一点精气神。</p></blockquote></blockquote>]]></content>
    
    
    <categories>
      
      <category>书</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读后感</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构与算法笔记</title>
    <link href="/2024/04/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/04/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="数据结构与算法笔记"><a href="#数据结构与算法笔记" class="headerlink" title="数据结构与算法笔记"></a>数据结构与算法笔记</h1><p>考完蓝桥杯，混完省三参与奖，开始重新补数据结构与算法，目标是Leetcode Knight</p><h2 id="数学相关算法"><a href="#数学相关算法" class="headerlink" title="数学相关算法"></a>数学相关算法</h2><h3 id="LCM-最小公倍数"><a href="#LCM-最小公倍数" class="headerlink" title="LCM(最小公倍数)"></a>LCM(最小公倍数)</h3><p>使用公式<code>LCM(a, b) = |a * b| / GCD(a, b)</code><br>然后使用辗转相除法球的最大公约数</p><ol><li>b &#x3D; 0, GCD &#x3D; a;</li><li>a &#x3D; b, b &#x3D; a % b, 递归至b &#x3D; 0;<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span>&#123;<br>    <span class="hljs-keyword">while</span>(b != <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-type">int</span> temp = b;<br>        b = a%<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>可以看作是一个长方形，长边是a，短边是b。如何使用一个正方形将该长方形填满，所求的最大的正方形边长就是a和b的最大公约数。<br>先使用<blockquote><p>小技巧<br>需要将一个数字按位分离，可以使用<code>to_string()</code>函数</p></blockquote></li></ol><h3 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">quick_power</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> pow)</span></span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(pow)&#123;<br>        <span class="hljs-keyword">if</span>(pow &amp; <span class="hljs-number">1</span>) res *= x;<br>        pow &gt;&gt;= <span class="hljs-number">1</span>; <span class="hljs-comment">//注意是&gt;&gt;=，忘了等号会死循环，忘好几次了。</span><br>        x *= x;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res<br>&#125;<br></code></pre></td></tr></table></figure><p>快速幂的原理都很清楚，可是对一个更大的数求快速幂需要使用到取余的操作，这里对取余操作写下思考。</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-comment">(a * b)</span> <span class="hljs-meta">%</span> m = <span class="hljs-comment">((a % m)</span> * <span class="hljs-comment">(b % m)</span>) <span class="hljs-meta">%</span> m<br><span class="hljs-comment">(a ^ b)</span> <span class="hljs-meta">%</span> m = <span class="hljs-comment">((a % m)</span> ^ b) <span class="hljs-meta">%</span> m<br></code></pre></td></tr></table></figure><p>对应的快速幂代码是</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//这里是对1337取余</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">quick_power</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> power)</span> </span>&#123;<br>    <span class="hljs-type">int</span> base = x % <span class="hljs-number">1337</span>;  <span class="hljs-comment">// 先对a取模，避免a太大</span><br>    <span class="hljs-type">int</span> res = <span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-keyword">while</span> (power) &#123;<br>        <span class="hljs-comment">// 如果当前指数为奇数，乘入res</span><br>        <span class="hljs-keyword">if</span> (power &amp; <span class="hljs-number">1</span>) &#123;<br>            res = (res * base) % <span class="hljs-number">1337</span>;  <span class="hljs-comment">// 这里取模，避免溢出</span><br>        &#125;<br>        <span class="hljs-comment">// 计算base的平方，并取模</span><br>        base = (base * base) % <span class="hljs-number">1337</span>;<br>        <br>        <span class="hljs-comment">// 右移一位，指数减半</span><br>        power &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> res % <span class="hljs-number">1337</span>;<br>&#125;<br><span class="hljs-comment">//对每个数字的多次取余并不会影响结果，反而会使数字控制在范围之内，最后在所有的乘法后return时最后取余即可完成公式的最后括号外的取余</span><br></code></pre></td></tr></table></figure><blockquote><p>小技巧<br>一个数字可以分数位求幂，例如2 ^ 123，可以求{2 ^ 3} * {(2^10) ^ 2} * {(2^100) ^ 1}</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构与算法笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言实现简单的扫雷小游戏</title>
    <link href="/2024/04/30/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E6%89%AB%E9%9B%B7%E5%B0%8F%E6%B8%B8%E6%88%8F/"/>
    <url>/2024/04/30/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E6%89%AB%E9%9B%B7%E5%B0%8F%E6%B8%B8%E6%88%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="C语言实现简单的扫雷小游戏"><a href="#C语言实现简单的扫雷小游戏" class="headerlink" title="C语言实现简单的扫雷小游戏"></a>C语言实现简单的扫雷小游戏</h2><h4 id="效果要求"><a href="#效果要求" class="headerlink" title="效果要求"></a>效果要求</h4><blockquote></blockquote><h4 id="各功能实现"><a href="#各功能实现" class="headerlink" title="各功能实现"></a>各功能实现</h4><ul><li>打印菜单</li><li>初始化mine与show</li><li>打印show</li><li>埋雷，记录输入的坐标</li></ul><h4 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h4><blockquote><p>1. </p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>C++笔记(1):C++比C多的特性</title>
    <link href="/2024/04/29/C++%E7%AC%94%E8%AE%B0(1)C++%E6%AF%94C%E5%A4%9A%E7%9A%84%E7%89%B9%E6%80%A7/"/>
    <url>/2024/04/29/C++%E7%AC%94%E8%AE%B0(1)C++%E6%AF%94C%E5%A4%9A%E7%9A%84%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<p>C++比C多的一些特性</p><h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><p>贴一个ai写的，太多了😉</p><p>C++中的命名空间（Namespace）是一种机制，用于组织代码元素（如变量、函数、类等），以避免名称冲突并提供一种控制作用域的方式。命名空间帮助开发者在大型项目或使用外部库时，能够有效地管理标识符的可见性和访问权限。以下是关于C++命名空间的一些关键点：</p><h3 id="为什么需要命名空间？"><a href="#为什么需要命名空间？" class="headerlink" title="为什么需要命名空间？"></a>为什么需要命名空间？</h3><ol><li><strong>解决命名冲突</strong>：当不同的库或者程序的不同部分使用相同的名称时，命名空间可以用来区分这些同名的标识符。例如，你可能在自己的代码中定义了一个叫做<code>log</code>的函数，同时又想使用标准库中的<code>std::log</code>数学函数，这时命名空间就显得尤为重要。</li><li><strong>组织代码</strong>：命名空间有助于将相关的代码元素组织在一起，提高代码的可读性和可维护性。比如，所有与输入输出相关的函数和类都在<code>std::iostream</code>命名空间中。</li></ol><h3 id="如何定义和使用命名空间？"><a href="#如何定义和使用命名空间？" class="headerlink" title="如何定义和使用命名空间？"></a>如何定义和使用命名空间？</h3><ol><li><p><strong>定义命名空间</strong>：使用<code>namespace</code>关键字后跟命名空间的名称，并以一对花括号 <code>&#123;&#125;</code> 包裹其中的成员。例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">namespace</span> MyNamespace &#123;<br>   <span class="hljs-type">int</span> value = <span class="hljs-number">10</span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">myFunction</span><span class="hljs-params">()</span> </span>&#123;<br>       <span class="hljs-comment">// ...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>使用命名空间成员</strong>：有两种主要方式访问命名空间内的成员：</p><ul><li>**作用域解析运算符 <code>::</code>**：在标识符前加上命名空间名称和作用域解析运算符。例如，<code>MyNamespace::value</code> 或 <code>MyNamespace::myFunction()</code>。</li><li>using 指令：<ul><li><strong>using声明</strong>：可以在局部作用域内引入特定的命名空间成员，如 <code>using MyNamespace::myFunction;</code> 之后可以直接调用 <code>myFunction()</code>。</li><li><strong>using指令</strong>：<code>using namespace MyNamespace;</code> 这会在当前作用域中展开命名空间，之后可以直接使用命名空间内的所有成员，但需谨慎使用，因为它可能导致名称冲突。</li></ul></li></ul></li><li><p><strong>命名空间嵌套</strong>：命名空间可以嵌套定义，形成层次结构，进一步细化代码的组织。</p></li><li><p><strong>匿名命名空间</strong>：在文件范围内定义的匿名命名空间中的标识符具有文件范围内的唯一性，相当于静态作用域，不会与其他文件中的同名标识符冲突。</p></li></ol><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h3><ul><li>尽管<code>using namespace std;</code>可以让代码看起来更简洁，但在较大的项目中，直接展开整个命名空间可能会导致名称冲突，推荐只导入具体需要的标识符。</li><li>当项目规模扩大或涉及多库集成时，良好的命名空间管理策略对于维护代码的清晰度和可维护性至关重要。</li></ul><p>命名空间是C++语言中一个非常重要的特性，正确使用它可以有效提升代码的质量和可维护性。</p><h2 id="控制程序流程"><a href="#控制程序流程" class="headerlink" title="控制程序流程"></a>控制程序流程</h2><h3 id="for循环的单个数据遍历"><a href="#for循环的单个数据遍历" class="headerlink" title="for循环的单个数据遍历"></a>for循环的单个数据遍历</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> num:nums)&#123;<br>    <span class="hljs-comment">//此处auto会自动判断num的类型</span><br>    <span class="hljs-comment">//num为nums的一个数据，往后遍历。</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><h3 id="cout-cin的基本输入输出"><a href="#cout-cin的基本输入输出" class="headerlink" title="cout cin的基本输入输出"></a>cout cin的基本输入输出</h3><p>与C不同，Cpp有独特的输入输出方式，更简洁方便（但是在特别大的数据量下会更更加耗时）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-type">int</span> num = <span class="hljs-number">0</span>;<br>string str;<br><br>cin &gt;&gt; num &gt;&gt; str;<span class="hljs-comment">//程序会读取一个int，然后读取一个字符串</span><br>cout &lt;&lt; num &lt;&lt; str;<span class="hljs-comment">//会直接输出一个num和str</span><br><br><span class="hljs-comment">/*相当于c语言中的*/</span><br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %s&quot;</span>,&amp;num,&amp;str);<span class="hljs-comment">//C语言中的语法仍然适配Cpp</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %s&quot;</span>,num,str);<br></code></pre></td></tr></table></figure><h3 id="输出不同进制"><a href="#输出不同进制" class="headerlink" title="输出不同进制"></a>输出不同进制</h3><h4 id="十进制输出："><a href="#十进制输出：" class="headerlink" title="十进制输出："></a>十进制输出：</h4><p>默认情况下，<code>std::cout</code>以十进制形式输出数值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> num = <span class="hljs-number">100</span>;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;十进制: &quot;</span> &lt;&lt; num &lt;&lt; std::endl;<br></code></pre></td></tr></table></figure><h4 id="十六进制输出："><a href="#十六进制输出：" class="headerlink" title="十六进制输出："></a>十六进制输出：</h4><p>使用<code>std::hex</code>控制符来改变输出格式为十六进制。注意，在输出后应使用<code>std::dec</code>恢复到十进制输出模式，除非你需要连续输出多个十六进制数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::cout &lt;&lt; <span class="hljs-string">&quot;十六进制: &quot;</span> &lt;&lt; std::hex &lt;&lt; num &lt;&lt; std::endl;<br></code></pre></td></tr></table></figure><h4 id="八进制输出："><a href="#八进制输出：" class="headerlink" title="八进制输出："></a>八进制输出：</h4><p>使用<code>std::oct</code>控制符来改变输出格式为八进制。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::cout &lt;&lt; <span class="hljs-string">&quot;八进制: &quot;</span> &lt;&lt; std::oct &lt;&lt; num &lt;&lt; std::endl;<br></code></pre></td></tr></table></figure><h4 id="二进制输出："><a href="#二进制输出：" class="headerlink" title="二进制输出："></a>二进制输出：</h4><p>C++标准库没有直接的控制符用于二进制输出，但可以使用<code>std::bitset</code>来实现。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">std::bitset&lt;8&gt; <span class="hljs-title">binary</span><span class="hljs-params">(num)</span></span>; <span class="hljs-comment">// 假设num是一个字节大小的整数</span><br>std::cout &lt;&lt; <span class="hljs-string">&quot;二进制: &quot;</span> &lt;&lt; binary &lt;&lt; std::endl;<br></code></pre></td></tr></table></figure><h4 id="控制符的使用"><a href="#控制符的使用" class="headerlink" title="控制符的使用"></a>控制符的使用</h4><ul><li>上述的<code>std::hex</code>、<code>std::oct</code>和<code>std::dec</code>都是操纵符，它们改变了<code>std::cout</code>的后续输出格式，直到下一个相应的操纵符出现或作用域结束。</li><li>使用完特定进制输出后，最好使用<code>std::dec</code>恢复到十进制输出模式，以避免影响后续的输出。</li></ul><h3 id="控制输出长度"><a href="#控制输出长度" class="headerlink" title="控制输出长度"></a>控制输出长度</h3><h4 id="自动补空"><a href="#自动补空" class="headerlink" title="自动补空"></a>自动补空</h4><p>使用<code>std::setw</code>来设定输出的宽度，<code>std::setfill</code>来指定填充字符。例如，让输出的<code>int</code>型数据始终占据5个字符宽，不足的部分用空格填充：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iomanip&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> num = <span class="hljs-number">42</span>;<br>    std::cout &lt;&lt; std::<span class="hljs-built_in">setw</span>(<span class="hljs-number">5</span>) &lt;&lt; std::<span class="hljs-built_in">setfill</span>(<span class="hljs-string">&#x27; &#x27;</span>) &lt;&lt; num &lt;&lt; std::endl;  <span class="hljs-comment">// 输出 &quot;   42&quot;</span><br>    <span class="hljs-comment">//如果去掉setfill(&#x27; &#x27;),默认也是补空</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="自动补零"><a href="#自动补零" class="headerlink" title="自动补零"></a>自动补零</h4><p>只需将<code>std::setfill</code>的参数改为<code>&#39;0&#39;</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iomanip&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> num = <span class="hljs-number">42</span>;<br>    std::cout &lt;&lt; std::<span class="hljs-built_in">setw</span>(<span class="hljs-number">5</span>) &lt;&lt; std::<span class="hljs-built_in">setfill</span>(<span class="hljs-string">&#x27;0&#x27;</span>) &lt;&lt; num &lt;&lt; std::endl;  <span class="hljs-comment">// 输出 &quot;00042&quot;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="整数、浮点数对齐"><a href="#整数、浮点数对齐" class="headerlink" title="整数、浮点数对齐"></a>整数、浮点数对齐</h4><ol><li><strong>setw</strong>: 设置输出的宽度。</li><li><strong>setfill</strong>: 设置填充字符。</li><li><strong>right</strong>, <strong>left</strong>, <strong>internal</strong>: 分别表示右对齐、左对齐和内部对齐（数字前填充）。</li></ol><p>示例代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iomanip&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">123</span>;<br>    <span class="hljs-type">double</span> b = <span class="hljs-number">4567.89</span>;<br><br>    std::cout &lt;&lt; std::<span class="hljs-built_in">setw</span>(<span class="hljs-number">10</span>) &lt;&lt; std::<span class="hljs-built_in">setfill</span>(<span class="hljs-string">&#x27; &#x27;</span>) &lt;&lt; std::right &lt;&lt; a &lt;&lt; std::endl;      <span class="hljs-comment">// 右对齐，宽度10，空格填充</span><br>    std::cout &lt;&lt; std::<span class="hljs-built_in">setw</span>(<span class="hljs-number">10</span>) &lt;&lt; std::<span class="hljs-built_in">setfill</span>(<span class="hljs-string">&#x27;0&#x27;</span>) &lt;&lt; std::left &lt;&lt; b &lt;&lt; std::endl;       <span class="hljs-comment">// 左对齐，宽度10，0填充</span><br>    std::cout &lt;&lt; std::<span class="hljs-built_in">setw</span>(<span class="hljs-number">10</span>) &lt;&lt; std::<span class="hljs-built_in">setfill</span>(<span class="hljs-string">&#x27;.&#x27;</span>) &lt;&lt; std::internal &lt;&lt; b &lt;&lt; std::endl;  <span class="hljs-comment">// 内部对齐，宽度10，.填充，这里实际上无效因为&#x27;.&#x27;不适合用于数字内部填充</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">输出结果</span><br><span class="hljs-comment">       123</span><br><span class="hljs-comment">4567.89000</span><br><span class="hljs-comment">...4567.89</span><br><span class="hljs-comment">*/</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>动态规划问题</title>
    <link href="/2024/04/27/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%97%AE%E9%A2%98/"/>
    <url>/2024/04/27/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="动态规划问题"><a href="#动态规划问题" class="headerlink" title="动态规划问题"></a>动态规划问题</h1><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><blockquote><ol><li>先分析dp各下标及其对应值代表的含义</li><li>写出状态转移方程</li><li>初始化dp数组</li><li>确认遍历顺序</li><li>打印dp数组来debug</li></ol></blockquote><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><h4 id="跳台阶"><a href="#跳台阶" class="headerlink" title="跳台阶"></a>跳台阶</h4><blockquote><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>给定一个共有  𝑛  阶的楼梯，你每步可以上  1  阶或者  2  阶，请问有多少种方案可以爬到楼顶？</p><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><ol><li><p>分析题目，求解到达最后一个台阶的方案，简化为到达第i哥台阶的方案数；设置dp数组，设置为一维数组dp<a href="%E6%96%B9%E4%BE%BF%E5%8F%B0%E9%98%B6%E6%95%B0%E4%B8%8E%E6%95%B0%E7%BB%84%E4%B8%8B%E6%A0%87%E5%AF%B9%E5%BA%94">n + 1</a>，dp[i]代表到达第i个台阶的方案数</p></li><li><p>第i个台阶只能由第i - 1或i - 2各台阶跳上去，因此dp[i] &#x3D; dp[i - 1] + dp[i - 2];</p></li><li><p>初始化dp数组，第一个台阶只有一种方案，第二个台阶有两个，因此dp[1] &#x3D; 1;dp[2] &#x3D; 2;</p></li><li><p>确认遍历顺序，dp前两个已经确定，直接从dp[3] 开始往后循环遍历(从前往后跳，后面台阶方案数需要使用到前面台阶方案数的数据)</p></li><li><p>打印dp数组来debug</p></li></ol></blockquote>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>砝码称重</title>
    <link href="/2024/03/15/WeighWithWeights/"/>
    <url>/2024/03/15/WeighWithWeights/</url>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><blockquote><p>你有一架天平和 N 个砝码，这 N 个砝码重量依次是 W1, W2, · · · , WN。<br>请你计算一共可以称出多少种不同的重量？<br>注意砝码可以放在天平两边。<br>输入格式<br>输入的第一行包含一个整数 N。<br>第二行包含 N 个整数：W1, W2, W3, · · · , WN。<br>输出格式<br>输出一个整数代表答案。</p></blockquote><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><blockquote><p>3<br>1 4 6<br>样例输出<br>10<br>提示</p></blockquote><h4 id="样例说明"><a href="#样例说明" class="headerlink" title="样例说明"></a>样例说明</h4><blockquote><p>能称出的 10 种重量是：1、2、3、4、5、6、7、9、10、11。<br>1 &#x3D; 1；<br>2 &#x3D; 6 4 (天平一边放 6，另一边放 4)；<br>3 &#x3D; 4 1；<br>4 &#x3D; 4；<br>5 &#x3D; 6 1；<br>6 &#x3D; 6；<br>7 &#x3D; 1 + 6；<br>9 &#x3D; 4 + 6 1；<br>10 &#x3D; 4 + 6；<br>11 &#x3D; 1 + 4 + 6。</p></blockquote><h4 id="评测用例规模与约定"><a href="#评测用例规模与约定" class="headerlink" title="评测用例规模与约定"></a>评测用例规模与约定</h4><blockquote><p>对于 50% 的评测用例，1 ≤ N ≤ 15。<br>对于所有评测用例，1 ≤ N ≤ 100，N 个砝码总重不超过 100000。</p></blockquote></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><blockquote><p>对于该问题，每个砝码都有三种选择，不放、放左边、放右边，如果以左边为基准，则放在左边相当于加上该砝码重量，右边减去。</p><p>可以使用回溯来对每一个砝码所有选择遍历</p><p>也可以使用简单的set，简单的双层for，一层按顺序遍历每次的砝码，内层计算选择的砝码与已经计算出的重量的和跟差，存入set</p><p>队列同理，将计算出的重量存入队列，每次选择一个砝码与队列最前面的数据计算和与差，然后弹出此队列最前面的数据，直到队列为空，进行下一次循环</p></blockquote><h2 id="解法一：回溯"><a href="#解法一：回溯" class="headerlink" title="解法一：回溯"></a>解法一：回溯</h2><blockquote><h4 id="具体分析"><a href="#具体分析" class="headerlink" title="具体分析"></a>具体分析</h4><blockquote><ol><li>每个数据有三种状态——跳过、减去、加上。（函数传参需要choice来决定数据的处理）</li><li>数据处理后传递给下一次选择。（函数传参需要temp来记录每次处理数据后的值）</li><li>数据储存来记录是否已经得出过该结果。（set来存放计算的temp）</li><li>结果需要所有的组合数，全局变量counter</li></ol></blockquote><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> counterv = <span class="hljs-number">0</span>;<span class="hljs-comment">//全局变量counter记录组合数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">WeightwithWeights1</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> i, unordered_set&lt;<span class="hljs-type">int</span>&gt; &amp;storage,<span class="hljs-type">int</span> choice,<span class="hljs-type">int</span> temp)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (i == nums.<span class="hljs-built_in">size</span>())<br><span class="hljs-keyword">return</span>;<br><span class="hljs-keyword">if</span> (choice == <span class="hljs-number">0</span>)<br>&#123;<br>temp += nums[i];<br><span class="hljs-keyword">if</span> (!storage.<span class="hljs-built_in">count</span>(<span class="hljs-built_in">abs</span>(temp)))<span class="hljs-comment">//为零加上该数据</span><br>&#123;<br>counter++;<br>storage.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">abs</span>(temp));<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= <span class="hljs-number">2</span>; j++)<span class="hljs-comment">//进行下一选择</span><br>&#123;<br><span class="hljs-built_in">WeightwithWeights1</span>(nums, i + <span class="hljs-number">1</span>, storage, j, temp);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (choice == <span class="hljs-number">1</span>)<br>&#123;<br>temp -= nums[i];<br><span class="hljs-keyword">if</span> (!storage.<span class="hljs-built_in">count</span>(<span class="hljs-built_in">abs</span>(temp)))<span class="hljs-comment">//为一减去</span><br>&#123;<br>counter++;<br>storage.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">abs</span>(temp));<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= <span class="hljs-number">2</span>; j++)<span class="hljs-comment">//进行下一次选择</span><br>&#123;<br><span class="hljs-built_in">WeightwithWeights1</span>(nums, i + <span class="hljs-number">1</span>, storage, j, temp);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (choice == <span class="hljs-number">2</span>)<span class="hljs-comment">//为二跳过</span><br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= <span class="hljs-number">2</span>; j++)<span class="hljs-comment">//进行下一选择</span><br>&#123;<br><span class="hljs-built_in">WeightwithWeights1</span>(nums, i + <span class="hljs-number">1</span>, storage, j, temp);<br>&#125;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></blockquote></blockquote><h2 id="解法二：set顺序结构"><a href="#解法二：set顺序结构" class="headerlink" title="解法二：set顺序结构"></a>解法二：set顺序结构</h2><blockquote><h4 id="具体分析-1"><a href="#具体分析-1" class="headerlink" title="具体分析"></a>具体分析</h4><blockquote><ol><li>使用set数组不会存相同的数据特性（遇见相同的会跳过）</li><li>每次选择一个砝码W，计算W与所有的set数组的组合并存入set。但是会有一个问题，set数组会一直变大，循环将无法结束。</li><li>引入temp数组，依然将组合存入set，但是每次计算前将set复制给temp数组一份，将砝码跟temp进行加减。</li></ol></blockquote><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">WeighwithWeights2</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; weights)</span></span><br><span class="hljs-function"></span>&#123;<br>unordered_set&lt;<span class="hljs-type">int</span>&gt; res;<br>res.<span class="hljs-built_in">insert</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> weight : weights)<br>&#123;<br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">temp</span><span class="hljs-params">(res.begin(), res.end())</span></span>;<span class="hljs-comment">//使用temp保存上一次res的状态</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; temp.<span class="hljs-built_in">size</span>(); i++)<br>&#123;<br>res.<span class="hljs-built_in">insert</span>(weight + temp[i]);<span class="hljs-comment">//存下上次res各位跟此weight的和</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">abs</span>(weight - temp[i]) != <span class="hljs-number">0</span>) &#123;<br>res.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">abs</span>(weight - temp[i]));<span class="hljs-comment">//差</span><br>&#125;<br>&#125;<br>res.<span class="hljs-built_in">insert</span>(weight);<span class="hljs-comment">//存weight</span><br>&#125;<br><span class="hljs-keyword">return</span> res.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote></blockquote><h2 id="解法三：队列"><a href="#解法三：队列" class="headerlink" title="解法三：队列"></a>解法三：队列</h2><blockquote><h4 id="具体分析-2"><a href="#具体分析-2" class="headerlink" title="具体分析"></a>具体分析</h4><blockquote><ol><li>每次选择一个砝码与队列所有数据加减，检查是否已经存有其结果（无就存入队列并且counter++，有就跳过）。</li><li>同样会遇到解法二问题，队列将会变长，浪费时间，引入temp队列，将数据存入temp，一次循环结束将temp复制给queue。</li><li>每次选择queue中最前面的数据，然后弹出，循环结束标志为queue为空。</li></ol></blockquote><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><pre><code class="c++">int count = 0;int WeighwithWeights3(vector&lt;int&gt;&amp; weights)&#123;    queue&lt;int&gt; weightQueue;    weightQueue.push(0);//初始化一个0，便于第一个元素的操作与后面的一致    int count = 0;    for (int weight : weights)    &#123;        queue&lt;int&gt; weightTemp;//定义队列        while (!weightQueue.empty())        &#123;            int temp = weightQueue.front();//将temp赋值为队列最前面的数            weightQueue.pop();            if (!Find(weightTemp, temp + weight))            &#123;                weightTemp.push(temp + weight);//没找到队列最前面数与weight的和                count++;            &#125;            if (!Find(weightTemp, abs(temp - weight)))            &#123;                weightTemp.push(abs(temp - weight));//没找到差                count++;            &#125;            if (!Find(weightTemp, temp))//检查有没有temp            &#123;                weightTemp.push(temp);            &#125;        &#125;        weightQueue = weightTemp;//将temp队列复制给队列，如果没有临时队列，队列长度会一直变长，循环将不会结束    &#125;    return count ;&#125;bool Find(const queue&lt;int&gt; weight, int num)//查找weight中是否有num的函数&#123;    queue&lt;int&gt; temp;    temp = weight;//不这样将会对weight队列改变    while (!temp.empty())    &#123;        if (temp.front() == num)        &#123;            return true;        &#125;        temp.pop();    &#125;    return false;&#125;</code></pre></blockquote>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>刷题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>flowchart</title>
    <link href="/2024/01/01/mermaid/"/>
    <url>/2024/01/01/mermaid/</url>
    
    <content type="html"><![CDATA[<h2 id="flowchart"><a href="#flowchart" class="headerlink" title="flowchart"></a>flowchart</h2><h3 id="方向"><a href="#方向" class="headerlink" title="方向"></a>方向</h3><ul><li>TB - Top to bottom</li><li>TD - Top-down&#x2F; same as top to bottom</li><li>BT - Bottom to top</li><li>RL - Right to left</li><li>LR - Left to right</li></ul><h3 id="节点形状"><a href="#节点形状" class="headerlink" title="节点形状"></a>节点形状</h3><ol><li>正常矩形</li></ol><pre><code class=" mermaid">flowchart TBid1[this is a rectangle node]</code></pre><ol start="2"><li>圆角矩形</li></ol><pre><code class=" mermaid">graph TBid1(this is a node with round edges)</code></pre><ol start="3"><li>跑道形</li></ol><pre><code class=" mermaid">graph TBid1([this is a stadium-shaped node])</code></pre><ol start="4"><li>子例程</li></ol><pre><code class=" mermaid">flowchart TBid[[this is a node in a subroutine shape]]</code></pre><ol start="5"><li>圆柱形</li></ol><pre><code class=" mermaid">flowchart TBid1[(database)]</code></pre><ol start="6"><li>圆形</li></ol><pre><code class=" mermaid">flowchart TBid1((this is a node in the form of a circle))</code></pre><ol start="7"><li>不对称形</li></ol><pre><code class=" mermaid">flowchart TBid1&gt;this is a node in an asymmetric shape]</code></pre><ol start="8"><li>菱形</li></ol><pre><code class=" mermaid">flowchart TBid1&#123;this is a rhombus node&#125;</code></pre><p>常用的大概就这么多，其他的用到再补充</p><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CSP201412-2_by_C</title>
    <link href="/2023/12/03/CSP201412-2_by_C/"/>
    <url>/2023/12/03/CSP201412-2_by_C/</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><blockquote><h4 id="试题编号：201412-2"><a href="#试题编号：201412-2" class="headerlink" title="试题编号：201412-2"></a>试题编号：201412-2</h4><h4 id="试题名称：Z字形扫描"><a href="#试题名称：Z字形扫描" class="headerlink" title="试题名称：Z字形扫描"></a>试题名称：Z字形扫描</h4><h4 id="时间限制：2-0s"><a href="#时间限制：2-0s" class="headerlink" title="时间限制：2.0s"></a>时间限制：2.0s</h4><h4 id="内存限制：256-0MB"><a href="#内存限制：256-0MB" class="headerlink" title="内存限制：256.0MB"></a>内存限制：256.0MB</h4><h4 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h4><p> 　在图像编码的算法中，需要将一个给定的方形矩阵进行Z字形扫描(Zigzag Scan)。给定一个n×n的矩阵，Z字形扫描的过程如下图所示：</p><p>​    <img src="https://pic1.zhimg.com/80/v2-7a3b4d28f524fbb2f4fdfa7f720cd030_hd.jpg" alt="v2-7a3b4d28f524fbb2f4fdfa7f720cd030_hd.jpg"></p><p> 　对于下面的4×4的矩阵，</p><p> 　1 5 3 9</p><p> 　3 7 5 6</p><p> 　9 4 6 4</p><p> 　7 3 1 3</p><p> 　对其进行Z字形扫描后得到长度为16的序列：</p><p> 　1 5 3 9 7 3 9 5 4 7 3 6 6 4 1 3</p><p> 　请实现一个Z字形扫描的程序，给定一个n×n的矩阵，输出对这个矩阵进行Z字形扫描的结果。 </p><p>输入格式 </p><p> 　输入的第一行包含一个整数n，表示矩阵的大小。</p><p> 　输入的第二行到第n+1行每行包含n个正整数，由空格分隔，表示给定的矩阵。 </p><p>输出格式</p><p> 　输出一行，包含n×n个整数，由空格分隔，表示输入的矩阵经过Z字形扫描后的结果。 </p><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><blockquote><p>4<br>1 5 3 9<br>3 7 5 6<br>9 4 6 4<br>7 3 1 3 </p></blockquote><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><p>1 5 3 9 7 3 9 5 4 7 3 6 6 4 1 3 </p><h4 id="评测用例规模与约定"><a href="#评测用例规模与约定" class="headerlink" title="评测用例规模与约定"></a>评测用例规模与约定</h4><p> 　1≤n≤500，矩阵元素为不超过1000的正整数。</p></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs c">&gt;<span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br>&gt;<span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&gt;&#123;<br><span class="hljs-type">int</span> arr[<span class="hljs-number">50</span>][<span class="hljs-number">50</span>];<br><span class="hljs-type">int</span> arr2[<span class="hljs-number">2500</span>];<br><span class="hljs-type">int</span> n = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br><span class="hljs-type">int</span> k = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(k = <span class="hljs-number">0</span>; k &lt; n; k++)<br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;arr[i][k]);<br>&#125;<br>&#125;<br><br><span class="hljs-type">int</span> row = <span class="hljs-number">0</span>, col = <span class="hljs-number">0</span>;<br>arr2[<span class="hljs-number">0</span>] = arr[row][col];<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n*n<span class="hljs-number">-1</span>; i)<br>&#123;<br><span class="hljs-keyword">if</span> (col == <span class="hljs-number">0</span>&amp;&amp;row != n<span class="hljs-number">-1</span>)<br>&#123;<br>row++;<span class="hljs-comment">//到头先往下走一格</span><br>i++;<br>arr2[i] = arr[row][col];<br><br><span class="hljs-type">int</span> k = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> mid = row - col;<br><span class="hljs-keyword">for</span> (k = <span class="hljs-number">0</span>; k &lt; mid; k++)<br>&#123;<br>col++;<br>row--;<br>i++;<br>arr2[i] = arr[row][col];<span class="hljs-comment">//往上数</span><br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (row == <span class="hljs-number">0</span>&amp;&amp;col != n<span class="hljs-number">-1</span>) <br>&#123;<br>i++;<br>col++;<span class="hljs-comment">//到头先往右走一格</span><br>arr2[i] = arr[row][col];<br><span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> mid = col - row;<br><span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; mid; j++)<br>&#123;<br>i++;<br>col--;<br>row++;<br>arr2[i] = arr[row][col];<span class="hljs-comment">//往下数</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (col == n - <span class="hljs-number">1</span>)<br>&#123; <br>row++;<br>i++;<br>arr2[i] = arr[row][col];<br><span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> mid = col - row;<br><span class="hljs-keyword">if</span> (col == n - <span class="hljs-number">1</span> &amp;&amp; row == n - <span class="hljs-number">1</span>)<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; mid; j++)<br>&#123;<br>col--;<br>row++;<br>i++;<br>arr2[i] = arr[row][col];<span class="hljs-comment">//往下数</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (row == n - <span class="hljs-number">1</span>&amp;&amp;col != n<span class="hljs-number">-1</span>)<br>&#123;<br>col++;<br>i++;<br>arr2[i] = arr[row][col];<br><span class="hljs-type">int</span> k = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> mid = row - col;<br><span class="hljs-keyword">for</span>(k = <span class="hljs-number">0</span>; k &lt; mid; k++)<br>&#123;<br>col++;<br>row--;<br>i++;<br>arr2[i] = arr[row][col];<span class="hljs-comment">//往上数</span><br>&#125;<br><br>&#125;<br><br>&#125;<br><span class="hljs-type">int</span> m = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-keyword">for</span>(m = <span class="hljs-number">0</span>; m &lt; n*n; m++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, arr2[m]);<br>&#125;<br><br>&gt;&#125;<br></code></pre></td></tr></table></figure></blockquote><h2 id="方法实现"><a href="#方法实现" class="headerlink" title="方法实现"></a>方法实现</h2><ol><li>使用一个二维数组储存输入的数字方阵,另一个数组来储存一维化后的数组</li><li>使用for语句进行循环,当遍历完成后退出</li><li>row与col来记录当前所处的行与列,if语句进行判断</li><li>当满足条件后使用对应的方法进行遍历(往上数&#x2F;往下数)</li><li>满足条件跳出循环,打印数组</li></ol>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>刷题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/11/26/hello-world/"/>
    <url>/2023/11/26/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Hello-Hexo"><a href="#Hello-Hexo" class="headerlink" title="Hello Hexo"></a>Hello Hexo</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
